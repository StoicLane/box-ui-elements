{"version":3,"sources":["../../src/api/ThreadedComments.js"],"names":["MarkerBasedApi","PERMISSION_CAN_COMMENT","PERMISSION_CAN_DELETE","PERMISSION_CAN_EDIT","ERROR_CODE_CREATE_COMMENT","ERROR_CODE_UPDATE_COMMENT","ERROR_CODE_DELETE_COMMENT","ERROR_CODE_FETCH_COMMENT","ERROR_CODE_FETCH_COMMENTS","PERMISSION_CAN_RESOLVE","ERROR_CODE_FETCH_REPLIES","ERROR_CODE_CREATE_REPLY","formatComment","ThreadedComments","data","isDestroyed","successCallback","entries","comments","map","fileId","getBaseApiUrl","commentId","getUrl","getUrlForId","file","message","errorCallback","errorCode","id","permissions","checkApiCallValidity","e","post","url","status","requestData","put","delete","get","marker","limit","shouldFetchAll","repliesCount","markerGet","replies_count","getUrlWithRepliesForId"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the box threadedComments API\n * @author Box\n */\n\nimport MarkerBasedApi from './MarkerBasedAPI';\nimport {\n    PERMISSION_CAN_COMMENT,\n    PERMISSION_CAN_DELETE,\n    PERMISSION_CAN_EDIT,\n    ERROR_CODE_CREATE_COMMENT,\n    ERROR_CODE_UPDATE_COMMENT,\n    ERROR_CODE_DELETE_COMMENT,\n    ERROR_CODE_FETCH_COMMENT,\n    ERROR_CODE_FETCH_COMMENTS,\n    PERMISSION_CAN_RESOLVE,\n    ERROR_CODE_FETCH_REPLIES,\n    ERROR_CODE_CREATE_REPLY,\n} from '../constants';\nimport { formatComment } from './utils';\n\nimport type { ElementsXhrError, ElementsErrorCallback } from '../common/types/api';\nimport type { BoxItem, BoxItemPermission } from '../common/types/core';\nimport type {\n    BoxCommentPermission,\n    Comment,\n    FeedItemStatus,\n    ThreadedComments as ThreadedCommentsType,\n} from '../common/types/feed';\n\nclass ThreadedComments extends MarkerBasedApi {\n    /**\n     * API URL for comments\n     *\n     * @param {string} [fileId]\n     * @return {string} base url for comments\n     */\n    getUrl(fileId?: string): string {\n        return `${this.getBaseApiUrl()}/undoc/comments${fileId ? `?file_id=${fileId}` : ''}`;\n    }\n\n    /**\n     * API URL for specific comment\n     *\n     * @param {string} [commentId]\n     * @return {string} base url for specific comment\n     */\n    getUrlForId(commentId: string): string {\n        return `${this.getUrl()}/${commentId}`;\n    }\n\n    /**\n     * API URL for specific comment\n     *\n     * @param {string} commentId\n     * @param {string} [fileId]\n     * @return {string}  base url for specific comment replies\n     */\n    getUrlWithRepliesForId(commentId: string, fileId?: string): string {\n        return `${this.getUrlForId(commentId)}/replies${fileId ? `?file_id=${fileId}` : ''}`;\n    }\n\n    /**\n     * Formats the threaded comments api response to usable data\n     * @param {Object} data the api response data\n     */\n    successHandler = (data: Object): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        // There is no response data when deleting a comment\n        if (!data) {\n            this.successCallback();\n            return;\n        }\n\n        // We don't have entries when updating/creating a comment\n        if (!data.entries) {\n            this.successCallback(formatComment(data));\n            return;\n        }\n\n        const comments = data.entries.map(formatComment);\n        this.successCallback({ ...data, entries: comments });\n    };\n\n    /**\n     * API for creating a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are creating a comment\n     * @param {string} message - Comment message\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    createComment({\n        file,\n        message,\n        successCallback,\n        errorCallback,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        message?: string,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_CREATE_COMMENT;\n        const { id, permissions } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.post({\n            id,\n            url: this.getUrl(id),\n            data: {\n                data: { message },\n            },\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for updating a comment\n     *\n     * @param {string} fileId - File id for which we are updating a comment\n     * @param {string} commentId - Comment to be edited\n     * @param {FeedItemStatus} status - Comment status\n     * @param {string} message - Comment message\n     * @param {BoxCommentPermission} permissions - The known permissions of the comment we're updating\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    updateComment({\n        fileId,\n        commentId,\n        status,\n        message,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        message?: string,\n        permissions: BoxCommentPermission,\n        status?: FeedItemStatus,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_UPDATE_COMMENT;\n\n        if (message) {\n            try {\n                this.checkApiCallValidity(PERMISSION_CAN_EDIT, permissions, fileId);\n            } catch (e) {\n                errorCallback(e, this.errorCode);\n                return;\n            }\n        }\n\n        if (status) {\n            try {\n                this.checkApiCallValidity(PERMISSION_CAN_RESOLVE, permissions, fileId);\n            } catch (e) {\n                errorCallback(e, this.errorCode);\n                return;\n            }\n        }\n\n        const requestData = {\n            data: { status, message },\n        };\n\n        this.put({\n            id: fileId,\n            url: this.getUrlForId(commentId),\n            data: requestData,\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for deleting a comment or reply\n     *\n     * @param {string} fileId - Id of an object for which we are deleting a comment\n     * @param {string} commentId - Id of the comment we are deleting\n     * @param {BoxCommentPermission} permissions - The known permissions of the comment we're deleting\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    deleteComment({\n        fileId,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n    }): void {\n        this.errorCode = ERROR_CODE_DELETE_COMMENT;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.delete({\n            id: fileId,\n            url: this.getUrlForId(commentId),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for fetching comment\n     *\n     * @param {string} commentId - comment id\n     * @param {string} fileId - the file id\n     * @param {BoxItemPermission} permissions - the permissions for the file\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @returns {void}\n     */\n    getComment({\n        commentId,\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n    }: {\n        commentId: string,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        permissions: BoxItemPermission,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_FETCH_COMMENT;\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.get({\n            id: fileId,\n            errorCallback,\n            successCallback,\n            url: this.getUrlForId(commentId),\n        });\n    }\n\n    /**\n     * API for fetching comments\n     *\n     * @param {string} fileId - the file id\n     * @param {BoxItemPermission} permissions - the permissions for the file\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {array} fields - the fields to fetch\n     * @param {string} marker the marker from the start to start fetching at\n     * @param {number} limit - the number of items to fetch\n     * @param {boolean} shouldFetchAll - true if should get all the pages before calling the sucessCallback\n     * @param {number} repliesCount - number of replies to return, by deafult all replies all returned\n     *  @returns {void}\n     */\n    getComments({\n        fileId,\n        permissions,\n        successCallback,\n        errorCallback,\n        marker,\n        limit,\n        shouldFetchAll,\n        repliesCount,\n    }: {\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        limit?: number,\n        marker?: string,\n        permissions: BoxItemPermission,\n        repliesCount?: number,\n        shouldFetchAll?: boolean,\n        successCallback: (threadedComments: ThreadedCommentsType) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_FETCH_COMMENTS;\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.markerGet({\n            id: fileId,\n            successCallback,\n            errorCallback,\n            marker,\n            limit,\n            requestData: {\n                ...(repliesCount ? { replies_count: repliesCount } : null),\n            },\n            shouldFetchAll,\n        });\n    }\n\n    /**\n     * @param {string} fileId - the file id\n     * @param {string} commentId - id of a Comment\n     * @param {BoxItemPermission} permissions - The known permissions of the comment\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     */\n    getCommentReplies({\n        fileId,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        permissions: BoxItemPermission,\n        successCallback: (comments: ThreadedCommentsType) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_FETCH_REPLIES;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.get({\n            id: fileId,\n            errorCallback,\n            successCallback,\n            url: this.getUrlWithRepliesForId(commentId),\n        });\n    }\n\n    /**\n     * @param {string} fileId - the file id\n     * @param {string} commentId - id of a Comment for which we createing Reply\n     * @param {BoxItemPermission} permissions - The known permissions of the comment\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {string} message - message of the Reply\n     */\n    createCommentReply({\n        fileId,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n        message,\n    }: {\n        commentId: string,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        message: string,\n        permissions: BoxItemPermission,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_CREATE_REPLY;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.post({\n            id: fileId,\n            data: { data: { message } },\n            errorCallback,\n            successCallback,\n            url: this.getUrlWithRepliesForId(commentId, fileId),\n        });\n    }\n}\n\nexport default ThreadedComments;\n"],"file":"ThreadedComments.js"}