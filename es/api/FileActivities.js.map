{"version":3,"sources":["../../src/api/FileActivities.js"],"names":["Base","ERROR_CODE_FETCH_ACTIVITY","FILE_ACTIVITY_TYPE_ANNOTATION","FILE_ACTIVITY_TYPE_COMMENT","PERMISSION_CAN_COMMENT","PERMISSION_CAN_VIEW_ANNOTATIONS","REPLY_LIMIT","getFileActivityQueryParams","fileID","activityTypes","shouldShowReplies","baseEndpoint","hasActivityTypes","length","enableReplies","enabledRepliesQueryParam","activityTypeQueryParam","join","FileActivities","id","getBaseApiUrl","errorCallback","permissions","repliesCount","successCallback","errorCode","Error","includes","checkApiCallValidity","e","get","requestData","replies_count","url","getFilteredUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SACIC,yBADJ,EAEIC,6BAFJ,EAGIC,0BAHJ,EAIIC,sBAJJ,EAKIC,+BALJ,QAMO,cANP;AAWA;AACA,IAAMC,WAAW,GAAG,CAApB;;AAEA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAC/BC,MAD+B,EAI9B;AAAA,MAFDC,aAEC,uEAFqC,EAErC;AAAA,MADDC,iBACC,uEAD6B,KAC7B;AACD,MAAMC,YAAY,sCAA+BH,MAA/B,CAAlB;AACA,MAAMI,gBAAgB,GAAG,CAAC,CAACH,aAAF,IAAmB,CAAC,CAACA,aAAa,CAACI,MAA5D;AACA,MAAMC,aAAa,GAAGJ,iBAAiB,GAAG,MAAH,GAAY,OAAnD;AACA,MAAMK,wBAAwB,6BAAsBD,aAAtB,0BAAmDR,WAAnD,CAA9B;AACA,MAAMU,sBAAsB,GAAGJ,gBAAgB,6BAAsBH,aAAa,CAACQ,IAAd,EAAtB,IAA+C,EAA9F;AAEA,mBAAUN,YAAV,SAAyBK,sBAAzB,SAAkDD,wBAAlD;AACH,CAZD;;IAcMG,c;;;;;;;;;;;;;;AACF;;;;;;;;mCAQeC,E,EAAYV,a,EAAqCC,iB,EAAqC;AACjG,uBAAU,KAAKU,aAAL,EAAV,SAAiCb,0BAA0B,CAACY,EAAD,EAAKV,aAAL,EAAoBC,iBAApB,CAA3D;AACH;AAED;;;;;;;;;;;;;;;wCA4BS;AAAA,UAfLD,aAeK,QAfLA,aAeK;AAAA,UAdLY,aAcK,QAdLA,aAcK;AAAA,UAbLb,MAaK,QAbLA,MAaK;AAAA,UAZLc,WAYK,QAZLA,WAYK;AAAA,UAXLC,YAWK,QAXLA,YAWK;AAAA,UAVLb,iBAUK,QAVLA,iBAUK;AAAA,UATLc,eASK,QATLA,eASK;AACL,WAAKC,SAAL,GAAiBxB,yBAAjB;;AACA,UAAI;AACA,YAAI,CAACO,MAAL,EAAa;AACT,gBAAM,IAAIkB,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,YAAIjB,aAAa,CAACkB,QAAd,CAAuBxB,0BAAvB,CAAJ,EAAwD;AACpD,eAAKyB,oBAAL,CAA0BxB,sBAA1B,EAAkDkB,WAAlD,EAA+Dd,MAA/D;AACH;;AACD,YAAIC,aAAa,CAACkB,QAAd,CAAuBzB,6BAAvB,CAAJ,EAA2D;AACvD,eAAK0B,oBAAL,CAA0BvB,+BAA1B,EAA2DiB,WAA3D,EAAwEd,MAAxE;AACH;AACJ,OAXD,CAWE,OAAOqB,CAAP,EAAU;AACRR,QAAAA,aAAa,CAACQ,CAAD,EAAI,KAAKJ,SAAT,CAAb;AACA;AACH;;AAED,WAAKK,GAAL,CAAS;AACLX,QAAAA,EAAE,EAAEX,MADC;AAELgB,QAAAA,eAAe,EAAfA,eAFK;AAGLH,QAAAA,aAAa,EAAbA,aAHK;AAILU,QAAAA,WAAW,oBACHR,YAAY,GAAG;AAAES,UAAAA,aAAa,EAAET;AAAjB,SAAH,GAAqC,IAD9C,CAJN;AAOLU,QAAAA,GAAG,EAAE,KAAKC,cAAL,CAAoB1B,MAApB,EAA4BC,aAA5B,EAA2CC,iBAA3C;AAPA,OAAT;AASH;;;;EApEwBV,I;;AAuE7B,eAAekB,cAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box File Activity API\n * @author Box\n */\n\nimport Base from './Base';\nimport {\n    ERROR_CODE_FETCH_ACTIVITY,\n    FILE_ACTIVITY_TYPE_ANNOTATION,\n    FILE_ACTIVITY_TYPE_COMMENT,\n    PERMISSION_CAN_COMMENT,\n    PERMISSION_CAN_VIEW_ANNOTATIONS,\n} from '../constants';\nimport type { BoxItemPermission } from '../common/types/core';\nimport type { ElementsXhrError } from '../common/types/api';\nimport type { FileActivity, FileActivityTypes } from '../common/types/feed';\n\n// We only show the latest reply in the UI\nconst REPLY_LIMIT = 1;\n\nconst getFileActivityQueryParams = (\n    fileID: string,\n    activityTypes?: FileActivityTypes[] = [],\n    shouldShowReplies?: boolean = false,\n) => {\n    const baseEndpoint = `/file_activities?file_id=${fileID}`;\n    const hasActivityTypes = !!activityTypes && !!activityTypes.length;\n    const enableReplies = shouldShowReplies ? 'true' : 'false';\n    const enabledRepliesQueryParam = `&enable_replies=${enableReplies}&reply_limit=${REPLY_LIMIT}`;\n    const activityTypeQueryParam = hasActivityTypes ? `&activity_types=${activityTypes.join()}` : '';\n\n    return `${baseEndpoint}${activityTypeQueryParam}${enabledRepliesQueryParam}`;\n};\n\nclass FileActivities extends Base {\n    /**\n     * API URL for filtered file activities\n     *\n     * @param {string} [id] - a box file id\n     * @param {Array<FileActivityTypes>} activityTypes - optional. Array of File Activity types to filter by, returns all Activity Types if omitted.\n     * @param {boolean} shouldShowReplies - optional. Specify if replies should be included in the response\n     * @return {string} base url for files\n     */\n    getFilteredUrl(id: string, activityTypes?: FileActivityTypes[], shouldShowReplies?: boolean): string {\n        return `${this.getBaseApiUrl()}${getFileActivityQueryParams(id, activityTypes, shouldShowReplies)}`;\n    }\n\n    /**\n     * API for fetching file activities\n     *\n     * @param {Array<FileActivityTypes>} activityTypes - optional. Array of File Activity types to filter by, returns all Activity Types if omitted.\n     * @param {Function} errorCallback - the error callback\n     * @param {string} fileId - the file id\n     * @param {BoxItemPermission} permissions - the permissions for the file\n     * @param {number} repliesCount - number of replies to return, by default all replies are returned\n     * @param {boolean} shouldShowReplies - specify if replies should be included in the response\n     * @param {Function} successCallback - the success callback\n     * @returns {void}\n     */\n    getActivities({\n        activityTypes,\n        errorCallback,\n        fileID,\n        permissions,\n        repliesCount,\n        shouldShowReplies,\n        successCallback,\n    }: {\n        activityTypes: FileActivityTypes[],\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileID: string,\n        permissions: BoxItemPermission,\n        repliesCount?: number,\n        shouldShowReplies?: boolean,\n        successCallback: (activity: FileActivity) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_FETCH_ACTIVITY;\n        try {\n            if (!fileID) {\n                throw new Error('Missing file id!');\n            }\n\n            if (activityTypes.includes(FILE_ACTIVITY_TYPE_COMMENT)) {\n                this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileID);\n            }\n            if (activityTypes.includes(FILE_ACTIVITY_TYPE_ANNOTATION)) {\n                this.checkApiCallValidity(PERMISSION_CAN_VIEW_ANNOTATIONS, permissions, fileID);\n            }\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.get({\n            id: fileID,\n            successCallback,\n            errorCallback,\n            requestData: {\n                ...(repliesCount ? { replies_count: repliesCount } : null),\n            },\n            url: this.getFilteredUrl(fileID, activityTypes, shouldShowReplies),\n        });\n    }\n}\n\nexport default FileActivities;\n"],"file":"FileActivities.js"}