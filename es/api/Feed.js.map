{"version":3,"sources":["../../src/api/Feed.js"],"names":["noop","uniqueId","getBadItemError","getBadUserError","getMissingItemTextOrStatus","isUserCorrectableError","commonMessages","messages","sortFeedItems","FEED_FILE_VERSIONS_FIELDS_TO_FETCH","Base","AnnotationsAPI","CommentsAPI","ThreadedCommentsAPI","FileActivitiesAPI","VersionsAPI","TasksNewAPI","GroupsAPI","TaskCollaboratorsAPI","TaskLinksAPI","AppActivityAPI","ERROR_CODE_CREATE_TASK","ERROR_CODE_UPDATE_TASK","ERROR_CODE_GROUP_EXCEEDS_LIMIT","FEED_ITEM_TYPE_ANNOTATION","FEED_ITEM_TYPE_COMMENT","FEED_ITEM_TYPE_TASK","FILE_ACTIVITY_TYPE_ANNOTATION","FILE_ACTIVITY_TYPE_APP_ACTIVITY","FILE_ACTIVITY_TYPE_COMMENT","FILE_ACTIVITY_TYPE_TASK","HTTP_STATUS_CODE_CONFLICT","IS_ERROR_DISPLAYED","PERMISSION_CAN_VIEW_ANNOTATIONS","TASK_NEW_APPROVED","TASK_NEW_COMPLETED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TYPED_ID_FEED_PREFIX","TASK_MAX_GROUP_ASSIGNEES","TASK_NEW_INITIAL_STATUS","getItemWithFilteredReplies","item","replyId","replies","rest","filter","id","getItemWithPendingReply","reply","parseReplies","parsedReplies","map","tagged_message","message","getParsedFileActivitiesResponse","response","entries","length","data","parsedData","source","activity_type","taskItem","assigned_to","assignedToEntries","entry","assignedToEntry","role","toUpperCase","status","completion_rule","task_type","created_by","target","commentItem","annotationItem","Feed","options","file","annotationId","text","permissions","successCallback","errorCallback","annotationsAPI","feedItemChanges","updateFeedItem","isPending","updateAnnotation","annotation","total_reply_count","annotationBase","isDestroyed","e","code","updateCommentErrorCallback","createFeedError","commentUpdateErrorMessage","feedErrorCallback","error","parentId","updateReplyItem","repliesFetchErrorMessage","successCallBack","deleteAnnotation","deleteFeedItem","bind","deleteCommentErrorCallback","resolve","comment","taskId","taskCollaboratorId","taskCollaboratorStatus","collaboratorsApi","taskCollaboratorsAPI","push","taskCollaboratorPayload","handleError","errorMessage","taskApproveErrorMessage","taskCompleteErrorMessage","taskRejectErrorMessage","taskActionErrorTitle","updateTaskCollaborator","taskCollaborator","taskCollab","updateTaskCollaboratorSuccessCallback","updatedCollaborator","tasksNewAPI","getTask","task","groupInfoPromises","addedAssignees","assignee","type","groupId","getGroupCount","group","Promise","all","groupCounts","hasAnyGroupCountExceeded","some","groupInfo","total_count","warning","reject","updateTaskWithDeps","taskData","commentId","commentsAPI","deleteComment","threadedCommentsAPI","fileId","deleteReplySuccessCallback","deleteReplyErrorCallback","modifyFeedItemRepliesCountBy","deleteReplyItem","commentDeleteErrorMessage","currentUser","assignees","taskType","dueAt","completionRule","uuid","dueAtString","dueAtDate","Date","toISOString","pendingTask","created_at","due_at","description","avatar_url","can_delete","can_update","limit","next_marker","can_create_task_collaborator","can_create_task_link","task_links","taskPayload","then","createTaskWithDeps","taskWithDepsData","addPendingItem","catch","deleteTask","taskDeleteErrorMessage","cachedItems","getCachedItems","feedItems","items","feedItem","setCachedItems","errors","hasError","console","itemBase","date","pendingFeedItem","modified_at","feedItemsWithPendingItem","commentBase","pendingReply","updatedFeedItems","commentData","commentCreateConflictMessage","commentCreateErrorMessage","updates","replyUpdates","getItemWithUpdatedReply","updatedItem","hasMention","taggedMessage","createComment","createCommentSuccessCallback","createCommentErrorCallback","updateComment","undefined","updateReplyErrorCallback","n","find","itemId","newReplyCount","appActivityId","appActivityAPI","deleteAppActivity","deleteAppActivityErrorCallback","appActivityDeleteErrorMessage","taskLinksAPI","newAnnotation","cache","getCache","cacheKey","getCacheKey","get","set","shouldRefreshCache","onError","shouldShowAnnotations","shouldShowAppActivity","shouldShowReplies","shouldShowTasks","shouldShowVersions","shouldUseUAA","annotationsPromise","fetchAnnotations","commentsPromise","fetchThreadedComments","fetchComments","tasksPromise","fetchTasksNew","appActivityPromise","fetchAppActivity","versionsPromise","fetchVersions","currentVersionPromise","fetchCurrentVersion","annotationActivityType","appActivityActivityType","taskActivityType","filteredActivityTypes","fileActivitiesPromise","fetchFileActivities","handleFeedItems","versions","currentVersion","fileActivitiesResponse","versionsWithCurrent","versionsAPI","addCurrentVersion","parsedFeedItems","sortedFeedItems","shouldFetchReplies","getAnnotations","fetchFeedItemErrorCallback","getComments","getComment","fetchThreadedCommentSuccessCallback","activityTypes","fileActivitiesAPI","getActivities","fileID","commentFeedItemId","commentFeedItemType","isRepliesLoading","successCallbackFn","errorCallbackFn","fetchRepliesErrorCallback","getAnnotationReplies","getCommentReplies","getVersions","file_version","getVersion","getTasksForFile","err","shouldDisplayError","createTaskCollaboratorsforGroup","createTaskCollaborator","user","deleteTaskCollaborator","createTaskLink","title","errorOccured","parentType","addPendingReply","createReplySuccessCallback","createReplyErrorCallback","createAnnotationReply","createCommentReply","Array","isArray","forEach","api","destroy","getAppActivity","destroyTaskCollaborators","destroyTaskLinks"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for activity feed API's\n * @author Box\n */\nimport noop from 'lodash/noop';\nimport uniqueId from 'lodash/uniqueId';\nimport type { MessageDescriptor } from 'react-intl';\nimport { getBadItemError, getBadUserError, getMissingItemTextOrStatus, isUserCorrectableError } from '../utils/error';\nimport commonMessages from '../elements/common/messages';\nimport messages from './messages';\nimport { sortFeedItems } from '../utils/sorter';\nimport { FEED_FILE_VERSIONS_FIELDS_TO_FETCH } from '../utils/fields';\nimport Base from './Base';\nimport AnnotationsAPI from './Annotations';\nimport CommentsAPI from './Comments';\nimport ThreadedCommentsAPI from './ThreadedComments';\nimport FileActivitiesAPI from './FileActivities';\nimport VersionsAPI from './Versions';\nimport TasksNewAPI from './tasks/TasksNew';\nimport GroupsAPI from './Groups';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport AppActivityAPI from './AppActivity';\nimport {\n    ERROR_CODE_CREATE_TASK,\n    ERROR_CODE_UPDATE_TASK,\n    ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n    FEED_ITEM_TYPE_ANNOTATION,\n    FEED_ITEM_TYPE_COMMENT,\n    FEED_ITEM_TYPE_TASK,\n    FILE_ACTIVITY_TYPE_ANNOTATION,\n    FILE_ACTIVITY_TYPE_APP_ACTIVITY,\n    FILE_ACTIVITY_TYPE_COMMENT,\n    FILE_ACTIVITY_TYPE_TASK,\n    HTTP_STATUS_CODE_CONFLICT,\n    IS_ERROR_DISPLAYED,\n    PERMISSION_CAN_VIEW_ANNOTATIONS,\n    TASK_NEW_APPROVED,\n    TASK_NEW_COMPLETED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TYPED_ID_FEED_PREFIX,\n    TASK_MAX_GROUP_ASSIGNEES,\n} from '../constants';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskCollabStatus,\n    TaskLink,\n    TaskNew,\n    TaskType,\n    TaskPayload,\n    TaskUpdatePayload,\n} from '../common/types/tasks';\nimport type { ElementsXhrError, ErrorResponseData, APIOptions } from '../common/types/api';\nimport type {\n    SelectorItems,\n    SelectorItem,\n    UserMini,\n    GroupMini,\n    BoxItem,\n    BoxItemPermission,\n    BoxItemVersion,\n    FileVersions,\n    User,\n} from '../common/types/core';\nimport type {\n    Annotation,\n    AnnotationPermission,\n    Annotations,\n    AppActivityItems,\n    BoxCommentPermission,\n    Comment,\n    CommentFeedItemType,\n    Comments,\n    FeedItem,\n    FeedItems,\n    FeedItemStatus,\n    FileActivity,\n    FileActivityTypes,\n    Task,\n    Tasks,\n    ThreadedComments as ThreadedCommentsType,\n} from '../common/types/feed';\n\nconst TASK_NEW_INITIAL_STATUS = TASK_NEW_NOT_STARTED;\n\ntype FeedItemsCache = {\n    errors: ErrorResponseData[],\n    items: FeedItems,\n};\n\ntype ErrorCallback = (e: ElementsXhrError, code: string, contextInfo?: Object) => void;\n\nconst getItemWithFilteredReplies = <T: { replies?: Array<Comment> }>(item: T, replyId: string): T => {\n    const { replies = [], ...rest } = item;\n    return { replies: replies.filter(({ id }) => id !== replyId), ...rest };\n};\n\nconst getItemWithPendingReply = <T: { replies?: Array<Comment> }>(item: T, reply: Comment): T => {\n    const { replies = [], ...rest } = item;\n    return { replies: [...replies, reply], ...rest };\n};\n\nconst parseReplies = (replies: Comment[]): Comment[] => {\n    const parsedReplies = [...replies];\n\n    return parsedReplies.map(reply => {\n        return { ...reply, tagged_message: reply.tagged_message || reply.message || '' };\n    });\n};\n\nexport const getParsedFileActivitiesResponse = (response?: { entries: FileActivity[] }) => {\n    if (!response || !response.entries || !response.entries.length) {\n        return { entries: [] };\n    }\n\n    const data = response.entries;\n\n    const parsedData: Array<Object> = data\n        .map(item => {\n            if (!item.source) {\n                return null;\n            }\n\n            const source = { ...item.source };\n\n            switch (item.activity_type) {\n                case FILE_ACTIVITY_TYPE_TASK: {\n                    const taskItem = { ...source[FILE_ACTIVITY_TYPE_TASK] };\n                    // UAA follows a lowercased enum naming convention, convert to uppercase to align with task api\n                    if (taskItem.assigned_to?.entries) {\n                        const assignedToEntries = taskItem.assigned_to.entries.map(entry => {\n                            const assignedToEntry = { ...entry };\n\n                            assignedToEntry.role = entry.role.toUpperCase();\n                            assignedToEntry.status = entry.status.toUpperCase();\n\n                            return assignedToEntry;\n                        });\n                        // $FlowFixMe Using the toUpperCase method makes Flow assume role and status is a string type, which is incompatible with string literal\n                        taskItem.assigned_to.entries = assignedToEntries;\n                    }\n                    if (taskItem.completion_rule) {\n                        taskItem.completion_rule = taskItem.completion_rule.toUpperCase();\n                    }\n                    if (taskItem.status) {\n                        taskItem.status = taskItem.status.toUpperCase();\n                    }\n                    if (taskItem.task_type) {\n                        taskItem.task_type = taskItem.task_type.toUpperCase();\n                    }\n                    // $FlowFixMe File Activities only returns a created_by user, Flow type fix is needed\n                    taskItem.created_by = { target: taskItem.created_by };\n\n                    return taskItem;\n                }\n                case FILE_ACTIVITY_TYPE_COMMENT: {\n                    const commentItem = { ...source[FILE_ACTIVITY_TYPE_COMMENT] };\n\n                    if (commentItem.replies && commentItem.replies.length) {\n                        const replies = parseReplies(commentItem.replies);\n\n                        commentItem.replies = replies;\n                    }\n\n                    commentItem.tagged_message = commentItem.tagged_message || commentItem.message || '';\n\n                    return commentItem;\n                }\n                case FILE_ACTIVITY_TYPE_ANNOTATION: {\n                    const annotationItem = { ...source[FILE_ACTIVITY_TYPE_ANNOTATION] };\n\n                    if (annotationItem.replies && annotationItem.replies.length) {\n                        const replies = parseReplies(annotationItem.replies);\n\n                        annotationItem.replies = replies;\n                    }\n\n                    return annotationItem;\n                }\n                case FILE_ACTIVITY_TYPE_APP_ACTIVITY: {\n                    return { ...source[FILE_ACTIVITY_TYPE_APP_ACTIVITY] };\n                }\n\n                default: {\n                    return null;\n                }\n            }\n        })\n        .filter(item => !!item);\n\n    return { entries: parsedData };\n};\n\nclass Feed extends Base {\n    /**\n     * @property {AnnotationsAPI}\n     */\n    annotationsAPI: AnnotationsAPI;\n\n    /**\n     * @property {VersionsAPI}\n     */\n    versionsAPI: VersionsAPI;\n\n    /**\n     * @property {CommentsAPI}\n     */\n    commentsAPI: CommentsAPI;\n\n    /**\n     * @property {AppActivityAPI}\n     */\n    appActivityAPI: AppActivityAPI;\n\n    /**\n     * @property {TasksNewAPI}\n     */\n    tasksNewAPI: TasksNewAPI;\n\n    /**\n     * @property {TaskCollaboratorsAPI}\n     */\n    taskCollaboratorsAPI: TaskCollaboratorsAPI[];\n\n    /**\n     * @property {TaskLinksAPI}\n     */\n    taskLinksAPI: TaskLinksAPI[];\n\n    /**\n     * @property {ThreadedCommentsAPI}\n     */\n    threadedCommentsAPI: ThreadedCommentsAPI;\n\n    /**\n     * @property {FileActivitiesAPI}\n     */\n    fileActivitiesAPI: FileActivitiesAPI;\n\n    /**\n     * @property {BoxItem}\n     */\n    file: BoxItem;\n\n    /**\n     * @property {ElementsXhrError}\n     */\n    errors: ElementsXhrError[];\n\n    constructor(options: APIOptions) {\n        super(options);\n        this.taskCollaboratorsAPI = [];\n        this.taskLinksAPI = [];\n        this.errors = [];\n    }\n\n    /**\n     * Creates pending card on create_start action, then updates card on next call\n     * @param {BoxItem} file - The file to which the annotation is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Annotation} annotation - the current annotation to be created\n     * @param {string} id - unique id for the incoming annotation\n     * @param {boolean} isPending - indicates the current creation process of the annotation\n     */\n    addAnnotation(file: BoxItem, currentUser: User, annotation: Annotation, id: string, isPending: boolean): void {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n\n        // Add the pending interstitial card\n        if (isPending) {\n            const newAnnotation = {\n                ...annotation,\n                created_by: currentUser,\n                id,\n                type: FEED_ITEM_TYPE_ANNOTATION,\n            };\n\n            this.addPendingItem(this.file.id, currentUser, newAnnotation);\n\n            return;\n        }\n        // Create action has completed, so update the existing pending item\n        this.updateFeedItem({ ...annotation, isPending: false }, id);\n    }\n\n    updateAnnotation = (\n        file: BoxItem,\n        annotationId: string,\n        text?: string,\n        status?: FeedItemStatus,\n        permissions: AnnotationPermission,\n        successCallback: (annotation: Annotation) => void,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n        if (!text && !status) {\n            throw getMissingItemTextOrStatus();\n        }\n\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        const feedItemChanges = {};\n        if (text) {\n            feedItemChanges.message = text;\n        }\n        if (status) {\n            feedItemChanges.status = status;\n        }\n        this.updateFeedItem({ ...feedItemChanges, isPending: true }, annotationId);\n\n        this.annotationsAPI.updateAnnotation(\n            this.file.id,\n            annotationId,\n            permissions,\n            feedItemChanges,\n            (annotation: Annotation) => {\n                const { replies, total_reply_count, ...annotationBase } = annotation;\n                this.updateFeedItem(\n                    {\n                        // Do not update replies and total_reply_count props as their current values are not included in the response\n                        ...annotationBase,\n                        isPending: false,\n                    },\n                    annotationId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(annotation);\n                }\n            },\n            (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, annotationId);\n            },\n        );\n    };\n\n    /**\n     * Error callback for updating a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the id of either an annotation or comment\n     * @return {void}\n     */\n    updateCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentUpdateErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Error callback for updating a reply\n     *\n     * @param {ElementsXhrError} error - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the id of the reply (comment)\n     * @param {string} parentId - the id of either the parent item (an annotation or comment)\n     * @return {void}\n     */\n    updateReplyErrorCallback = (error: ElementsXhrError, code: string, id: string, parentId: string) => {\n        this.updateReplyItem(this.createFeedError(messages.commentUpdateErrorMessage), parentId, id);\n        this.feedErrorCallback(true, error, code);\n    };\n\n    /**\n     * Error callback for fetching replies\n     *\n     * @param {ElementsXhrError} error - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the id of either an annotation or comment\n     * @return {void}\n     */\n    fetchRepliesErrorCallback = (error: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.repliesFetchErrorMessage), id);\n        this.feedErrorCallback(true, error, code);\n    };\n\n    deleteAnnotation = (\n        file: BoxItem,\n        annotationId: string,\n        permissions: AnnotationPermission,\n        successCallBack: Function,\n        errorCallback: Function,\n    ): void => {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        this.updateFeedItem({ isPending: true }, annotationId);\n        this.annotationsAPI.deleteAnnotation(\n            this.file.id,\n            annotationId,\n            permissions,\n            this.deleteFeedItem.bind(this, annotationId, successCallBack),\n            (error: ElementsXhrError, code: string) => {\n                // Reusing comment error handler since annotations are treated as comments to user\n                this.deleteCommentErrorCallback(error, code, annotationId);\n            },\n        );\n    };\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${TYPED_ID_FEED_PREFIX}${id}`;\n    }\n\n    /**\n     * Gets the items from the cache\n     *\n     * @param {string} id the cache id\n     */\n    getCachedItems(id: string): ?FeedItemsCache {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        return cache.get(cacheKey);\n    }\n\n    /**\n     * Sets the items in the cache\n     *\n     * @param {string} id - the cache id\n     * @param {Array} items - the feed items to cache\n     */\n    setCachedItems(id: string, items: FeedItems) {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        cache.set(cacheKey, {\n            errors: this.errors,\n            items,\n        });\n    }\n\n    /**\n     * Gets the feed items\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {boolean} shouldRefreshCache - Optionally updates the cache\n     * @param {Function} successCallback - the success callback  which is called after data fetching is complete\n     * @param {Function} errorCallback - the error callback which is called after data fetching is complete if there was an error\n     * @param {Function} onError - the function to be called immediately after an error occurs\n     * @param {Object} [options]- feature flips, etc\n     * @param {Object} [options.shouldShowAppActivity] - feature flip the new app activity api\n     */\n    feedItems(\n        file: BoxItem,\n        shouldRefreshCache: boolean,\n        successCallback: Function,\n        errorCallback: (feedItems: FeedItems, errors: ElementsXhrError[]) => void,\n        onError: ErrorCallback,\n        {\n            shouldShowAnnotations = false,\n            shouldShowAppActivity = false,\n            shouldShowReplies = false,\n            shouldShowTasks = true,\n            shouldShowVersions = true,\n            shouldUseUAA = false,\n        }: {\n            shouldShowAnnotations?: boolean,\n            shouldShowAppActivity?: boolean,\n            shouldShowReplies?: boolean,\n            shouldShowTasks?: boolean,\n            shouldShowVersions?: boolean,\n            shouldUseUAA?: boolean,\n        } = {},\n    ): void {\n        const { id, permissions = {} } = file;\n        const cachedItems = this.getCachedItems(id);\n        if (cachedItems) {\n            const { errors, items } = cachedItems;\n            if (errors.length) {\n                errorCallback(items, errors);\n            } else {\n                successCallback(items);\n            }\n\n            if (!shouldRefreshCache) {\n                return;\n            }\n        }\n\n        this.file = file;\n        this.errors = [];\n        this.errorCallback = onError;\n\n        // Using the UAA File Activities endpoint replaces the need for these calls\n        const annotationsPromise =\n            !shouldUseUAA && shouldShowAnnotations\n                ? this.fetchAnnotations(permissions, shouldShowReplies)\n                : Promise.resolve();\n        const commentsPromise = () => {\n            if (shouldUseUAA) {\n                return Promise.resolve();\n            }\n\n            return shouldShowReplies ? this.fetchThreadedComments(permissions) : this.fetchComments(permissions);\n        };\n        const tasksPromise = !shouldUseUAA && shouldShowTasks ? this.fetchTasksNew() : Promise.resolve();\n        const appActivityPromise =\n            !shouldUseUAA && shouldShowAppActivity ? this.fetchAppActivity(permissions) : Promise.resolve();\n\n        const versionsPromise = shouldShowVersions ? this.fetchVersions() : Promise.resolve();\n        const currentVersionPromise = shouldShowVersions ? this.fetchCurrentVersion() : Promise.resolve();\n\n        const annotationActivityType =\n            shouldShowAnnotations && permissions[PERMISSION_CAN_VIEW_ANNOTATIONS]\n                ? [FILE_ACTIVITY_TYPE_ANNOTATION]\n                : [];\n        const appActivityActivityType = shouldShowAppActivity ? [FILE_ACTIVITY_TYPE_APP_ACTIVITY] : [];\n        const taskActivityType = shouldShowTasks ? [FILE_ACTIVITY_TYPE_TASK] : [];\n        const filteredActivityTypes = [\n            ...annotationActivityType,\n            ...appActivityActivityType,\n            FILE_ACTIVITY_TYPE_COMMENT,\n            ...taskActivityType,\n        ];\n\n        const fileActivitiesPromise = shouldUseUAA\n            ? this.fetchFileActivities(permissions, filteredActivityTypes, shouldShowReplies)\n            : Promise.resolve();\n\n        const handleFeedItems = (feedItems: FeedItems) => {\n            if (!this.isDestroyed()) {\n                this.setCachedItems(id, feedItems);\n                if (this.errors.length) {\n                    errorCallback(feedItems, this.errors);\n                } else {\n                    successCallback(feedItems);\n                }\n            }\n        };\n\n        if (shouldUseUAA) {\n            Promise.all([versionsPromise, currentVersionPromise, fileActivitiesPromise]).then(\n                ([versions: ?FileVersions, currentVersion: ?BoxItemVersion, ...feedItems]) => {\n                    if (!feedItems || !feedItems.length) {\n                        return;\n                    }\n\n                    const fileActivitiesResponse = feedItems[0];\n                    const versionsWithCurrent = currentVersion\n                        ? this.versionsAPI.addCurrentVersion(currentVersion, versions, this.file)\n                        : undefined;\n                    const parsedFeedItems = getParsedFileActivitiesResponse(fileActivitiesResponse);\n                    // $FlowFixMe Does not need to be sorted once we include versions in the file activities call\n                    const sortedFeedItems = sortFeedItems(versionsWithCurrent, parsedFeedItems);\n                    handleFeedItems(sortedFeedItems);\n                },\n            );\n        } else {\n            Promise.all([\n                versionsPromise,\n                currentVersionPromise,\n                commentsPromise(),\n                tasksPromise,\n                appActivityPromise,\n                annotationsPromise,\n            ]).then(([versions: ?FileVersions, currentVersion: ?BoxItemVersion, ...feedItems]) => {\n                const versionsWithCurrent = currentVersion\n                    ? this.versionsAPI.addCurrentVersion(currentVersion, versions, this.file)\n                    : undefined;\n                const sortedFeedItems = sortFeedItems(versionsWithCurrent, ...feedItems);\n                handleFeedItems(sortedFeedItems);\n            });\n        }\n    }\n\n    fetchAnnotations(permissions: BoxItemPermission, shouldFetchReplies?: boolean): Promise<?Annotations> {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n        return new Promise(resolve => {\n            this.annotationsAPI.getAnnotations(\n                this.file.id,\n                undefined,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n                undefined,\n                undefined,\n                shouldFetchReplies,\n            );\n        });\n    }\n\n    /**\n     * Fetches the comments for a file\n     *\n     * @param {Object} permissions - the file permissions\n     * @return {Promise} - the file comments\n     */\n    fetchComments(permissions: BoxItemPermission): Promise<?Comments> {\n        this.commentsAPI = new CommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.commentsAPI.getComments(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches a comment for a file\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - comment id\n     * @param {Function} successCallback\n     * @param {ErrorCallback} errorCallback\n     * @return {Promise} - the file comments\n     */\n    fetchThreadedComment(\n        file: BoxItem,\n        commentId: string,\n        successCallback: (comment: Comment) => void,\n        errorCallback: ErrorCallback,\n    ): Promise<?Comment> {\n        const { id, permissions } = file;\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.threadedCommentsAPI.getComment({\n                commentId,\n                errorCallback,\n                fileId: id,\n                permissions,\n                successCallback: this.fetchThreadedCommentSuccessCallback.bind(this, resolve, successCallback),\n            });\n        });\n    }\n\n    /**\n     * Callback for successful fetch of a comment\n     *\n     * @param {Function} resolve - resolve function\n     * @param {Function} successCallback - success callback\n     * @param {Comment} comment - comment data\n     * @return {void}\n     */\n    fetchThreadedCommentSuccessCallback = (resolve: Function, successCallback: Function, comment: Comment): void => {\n        successCallback(comment);\n        resolve();\n    };\n\n    /**\n     * Fetches the comments with replies for a file\n     *\n     * @param {Object} permissions - the file permissions\n     * @return {Promise} - the file comments\n     */\n    fetchThreadedComments(permissions: BoxItemPermission): Promise<?ThreadedCommentsType> {\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.threadedCommentsAPI.getComments({\n                errorCallback: this.fetchFeedItemErrorCallback.bind(this, resolve),\n                fileId: this.file.id,\n                permissions,\n                successCallback: resolve,\n            });\n        });\n    }\n\n    /**\n     * Fetches the file activities for a file\n     *\n     * @param {BoxItemPermission} permissions - the file permissions\n     * @param {FileActivityTypes[]} activityTypes - the activity types to filter by\n     * @param {boolean} shouldShowReplies - specify if replies should be included in the response\n     * @return {Promise} - the file comments\n     */\n    fetchFileActivities(\n        permissions: BoxItemPermission,\n        activityTypes: FileActivityTypes[],\n        shouldShowReplies?: boolean = false,\n    ): Promise<Object> {\n        this.fileActivitiesAPI = new FileActivitiesAPI(this.options);\n        return new Promise(resolve => {\n            this.fileActivitiesAPI.getActivities({\n                errorCallback: this.fetchFeedItemErrorCallback.bind(this, resolve),\n                fileID: this.file.id,\n                permissions,\n                successCallback: resolve,\n                activityTypes,\n                shouldShowReplies,\n            });\n        });\n    }\n\n    /**\n     * Fetches replies (comments) of a comment or annotation\n     *\n     * @param {BoxItem} file - The file to which the comment or annotation belongs to\n     * @param {string} commentFeedItemId - ID of the comment or annotation\n     * @param {CommentFeedItemType} commentFeedItemType - Type of the comment or annotation\n     * @param {Function} successCallback\n     * @param {ErrorCallback} errorCallback\n     * @return {void}\n     */\n    fetchReplies(\n        file: BoxItem,\n        commentFeedItemId: string,\n        commentFeedItemType: CommentFeedItemType,\n        successCallback: (comments: Array<Comment>) => void,\n        errorCallback: ErrorCallback,\n    ): void {\n        const { id, permissions } = file;\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        this.updateFeedItem({ isRepliesLoading: true }, commentFeedItemId);\n\n        const successCallbackFn = ({ entries }: ThreadedCommentsType) => {\n            this.updateFeedItem(\n                { isRepliesLoading: false, replies: entries, total_reply_count: entries.length },\n                commentFeedItemId,\n            );\n            successCallback(entries);\n        };\n        const errorCallbackFn = (error: ErrorResponseData, code: string) => {\n            this.fetchRepliesErrorCallback(error, code, commentFeedItemId);\n        };\n\n        if (commentFeedItemType === FEED_ITEM_TYPE_ANNOTATION) {\n            this.annotationsAPI = new AnnotationsAPI(this.options);\n\n            this.annotationsAPI.getAnnotationReplies(\n                file.id,\n                commentFeedItemId,\n                permissions,\n                successCallbackFn,\n                errorCallbackFn,\n            );\n        } else if (commentFeedItemType === FEED_ITEM_TYPE_COMMENT) {\n            this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n            this.threadedCommentsAPI.getCommentReplies({\n                fileId: file.id,\n                commentId: commentFeedItemId,\n                permissions,\n                successCallback: successCallbackFn,\n                errorCallback: errorCallbackFn,\n            });\n        }\n    }\n\n    /**\n     * Fetches the versions for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchVersions(): Promise<?FileVersions> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            this.versionsAPI.getVersions(\n                this.file.id,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n                undefined,\n                undefined,\n                FEED_FILE_VERSIONS_FIELDS_TO_FETCH,\n            );\n        });\n    }\n\n    /**\n     * Fetches the current version for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchCurrentVersion(): Promise<?BoxItemVersion> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            const { file_version = {} } = this.file;\n            this.versionsAPI.getVersion(\n                this.file.id,\n                file_version.id,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the tasks for a file\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchTasksNew(): Promise<?Tasks> {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n\n        return new Promise(resolve => {\n            this.tasksNewAPI.getTasksForFile({\n                file: { id: this.file.id },\n                successCallback: resolve,\n                errorCallback: (err, code) => this.fetchFeedItemErrorCallback(resolve, err, code),\n            });\n        });\n    }\n\n    /**\n     * Error callback for fetching feed items.\n     * Should only call the error callback if the response is a 401, 429 or >= 500\n     *\n     * @param {Function} resolve - the function which will be called on error\n     * @param {Object} e - the axios error\n     * @param {string} code - the error code\n     * @return {void}\n     */\n    fetchFeedItemErrorCallback(resolve: Function, e: ElementsXhrError, code: string) {\n        const { status } = e;\n        const shouldDisplayError = isUserCorrectableError(status);\n        this.feedErrorCallback(shouldDisplayError, e, code);\n        resolve();\n    }\n\n    /**\n     * Updates a task assignment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - ID of task to be updated\n     * @param {string} taskCollaboratorId - Task assignment ID\n     * @param {TaskCollabStatus} taskCollaboratorStatus - New task assignment status\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskCollaborator = (\n        file: BoxItem,\n        taskId: string,\n        taskCollaboratorId: string,\n        taskCollaboratorStatus: TaskCollabStatus,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, taskId);\n        const collaboratorsApi = new TaskCollaboratorsAPI(this.options);\n        this.taskCollaboratorsAPI.push(collaboratorsApi);\n        const taskCollaboratorPayload = {\n            id: taskCollaboratorId,\n            status: taskCollaboratorStatus,\n        };\n        const handleError = (e: ElementsXhrError, code: string) => {\n            let errorMessage;\n            switch (taskCollaboratorStatus) {\n                case TASK_NEW_APPROVED:\n                    errorMessage = messages.taskApproveErrorMessage;\n                    break;\n                case TASK_NEW_COMPLETED:\n                    errorMessage = messages.taskCompleteErrorMessage;\n                    break;\n                case TASK_NEW_REJECTED:\n                    errorMessage = messages.taskRejectErrorMessage;\n                    break;\n                default:\n                    errorMessage = messages.taskCompleteErrorMessage;\n            }\n            this.updateFeedItem(this.createFeedError(errorMessage, messages.taskActionErrorTitle), taskId);\n            this.feedErrorCallback(true, e, code);\n        };\n        collaboratorsApi.updateTaskCollaborator({\n            file,\n            taskCollaborator: taskCollaboratorPayload,\n            successCallback: (taskCollab: TaskCollabAssignee) => {\n                this.updateTaskCollaboratorSuccessCallback(taskId, file, taskCollab, successCallback, handleError);\n            },\n            errorCallback: handleError,\n        });\n    };\n\n    /**\n     * Updates the task assignment state of the updated task\n     *\n     * @param {string} taskId - Box task id\n     * @param {TaskAssignment} updatedCollaborator - New task assignment from API\n     * @param {Function} successCallback - the function which will be called on success\n     * @return {void}\n     */\n    updateTaskCollaboratorSuccessCallback = (\n        taskId: string,\n        file: { id: string },\n        updatedCollaborator: TaskCollabAssignee,\n        successCallback: Function,\n        errorCallback: Function,\n    ): void => {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.tasksNewAPI.getTask({\n            id: taskId,\n            file,\n            successCallback: task => {\n                this.updateFeedItem({ ...task, isPending: false }, taskId);\n                successCallback(updatedCollaborator);\n            },\n            errorCallback,\n        });\n    };\n\n    /**\n     * Updates a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} task - The update task payload object\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskNew = async (\n        file: BoxItem,\n        task: TaskUpdatePayload,\n        successCallback: () => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        try {\n            // create request for the size of each group by ID\n            // TODO: use async/await for both creating and editing tasks\n            const groupInfoPromises: Array<Promise<any>> = task.addedAssignees\n                .filter(\n                    (assignee: SelectorItem<UserMini | GroupMini>) => assignee.item && assignee.item.type === 'group',\n                )\n                .map(assignee => assignee.id)\n                .map(groupId => {\n                    return new GroupsAPI(this.options).getGroupCount({\n                        file,\n                        group: { id: groupId },\n                    });\n                });\n\n            const groupCounts: Array<{ total_count: number }> = await Promise.all(groupInfoPromises);\n            const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n            );\n            const warning = {\n                code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                type: 'warning',\n            };\n\n            if (hasAnyGroupCountExceeded) {\n                this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                return;\n            }\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.updateTaskWithDeps({\n                    file,\n                    task,\n                    successCallback: resolve,\n                    errorCallback: reject,\n                });\n            });\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.getTask({\n                    file,\n                    id: task.id,\n                    successCallback: (taskData: Task) => {\n                        this.updateFeedItem(\n                            {\n                                ...taskData,\n                                isPending: false,\n                            },\n                            task.id,\n                        );\n\n                        resolve();\n                    },\n                    errorCallback: (e: ElementsXhrError) => {\n                        this.updateFeedItem({ isPending: false }, task.id);\n                        this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n                        reject();\n                    },\n                });\n            });\n\n            // everything succeeded, so call the passed in success callback\n            if (!this.isDestroyed()) {\n                successCallback();\n            }\n        } catch (e) {\n            this.updateFeedItem({ isPending: false }, task.id);\n            this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n        }\n    };\n\n    /**\n     * Deletes a comment.\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - Comment ID\n     * @param {BoxCommentPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteComment = (\n        file: BoxItem,\n        commentId: string,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        this.commentsAPI = new CommentsAPI(this.options);\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, commentId);\n\n        this.commentsAPI.deleteComment({\n            file,\n            commentId,\n            permissions,\n            successCallback: this.deleteFeedItem.bind(this, commentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Deletes a threaded comment (using ThreadedComments API).\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - Comment ID\n     * @param {BoxCommentPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteThreadedComment = (\n        file: BoxItem,\n        commentId: string,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, commentId);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.deleteComment({\n            fileId: file.id,\n            commentId,\n            permissions,\n            successCallback: this.deleteFeedItem.bind(this, commentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Deletes a reply (using ThreadedComments API).\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} id - id of the reply (comment)\n     * @param {string} parentId - id of the parent feed item\n     * @param {BoxCommentPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteReply = (\n        file: BoxItem,\n        id: string,\n        parentId: string,\n        permissions: BoxCommentPermission,\n        successCallback: () => void,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateReplyItem({ isPending: true }, parentId, id);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.deleteComment({\n            fileId: file.id,\n            commentId: id,\n            permissions,\n            successCallback: this.deleteReplySuccessCallback.bind(this, id, parentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteReplyErrorCallback(e, code, id, parentId);\n            },\n        });\n    };\n\n    /**\n     * Callback for successful deletion of a reply.\n     *\n     * @param {string} id - ID of the reply\n     * @param {string} parentId - ID of the parent feed item\n     * @param {Function} successCallback - success callback\n     * @return {void}\n     */\n    deleteReplySuccessCallback = (id: string, parentId: string, successCallback: Function): void => {\n        this.modifyFeedItemRepliesCountBy(parentId, -1);\n        this.deleteReplyItem(id, parentId, successCallback);\n    };\n\n    /**\n     * Error callback for deleting a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} commentId - the comment id\n     * @return {void}\n     */\n    deleteCommentErrorCallback = (e: ElementsXhrError, code: string, commentId: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentDeleteErrorMessage), commentId);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Error callback for deleting a reply\n     *\n     * @param {ElementsXhrError} error - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the reply (comment) id\n     * @param {string} parentId - the comment id of the parent feed item\n     * @return {void}\n     */\n    deleteReplyErrorCallback = (error: ElementsXhrError, code: string, id: string, parentId: string) => {\n        this.updateReplyItem(this.createFeedError(messages.commentDeleteErrorMessage), parentId, id);\n        this.feedErrorCallback(true, error, code);\n    };\n\n    /**\n     * Creates a task.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} message - Task text\n     * @param {Array} assignees - List of assignees\n     * @param {number} dueAt - Task's due date\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    createTaskNew = (\n        file: BoxItem,\n        currentUser: User,\n        message: string,\n        assignees: SelectorItems<>,\n        taskType: TaskType,\n        dueAt: ?string,\n        completionRule: TaskCompletionRule,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        const uuid = uniqueId('task_');\n        let dueAtString;\n        if (dueAt) {\n            const dueAtDate: Date = new Date(dueAt);\n            dueAtString = dueAtDate.toISOString();\n        }\n\n        // TODO: make pending task generator a function\n        const pendingTask: TaskNew = {\n            created_by: {\n                type: 'task_collaborator',\n                target: currentUser,\n                id: uniqueId(),\n                role: 'CREATOR',\n                status: TASK_NEW_INITIAL_STATUS,\n            },\n            completion_rule: completionRule,\n            created_at: new Date().toISOString(),\n            due_at: dueAtString,\n            id: uuid,\n            description: message,\n            type: FEED_ITEM_TYPE_TASK,\n            assigned_to: {\n                entries: assignees.map((assignee: SelectorItem<UserMini | GroupMini>) => ({\n                    id: uniqueId(),\n                    target: { ...assignee, avatar_url: '', type: 'user' },\n                    status: TASK_NEW_INITIAL_STATUS,\n                    permissions: {\n                        can_delete: false,\n                        can_update: false,\n                    },\n                    role: 'ASSIGNEE',\n                    type: 'task_collaborator',\n                })),\n                limit: 10,\n                next_marker: null,\n            },\n            permissions: {\n                can_update: false,\n                can_delete: false,\n                can_create_task_collaborator: false,\n                can_create_task_link: false,\n            },\n            task_links: {\n                entries: [\n                    {\n                        id: uniqueId(),\n                        type: 'task_link',\n                        target: {\n                            type: 'file',\n                            ...file,\n                        },\n                        permissions: {\n                            can_delete: false,\n                            can_update: false,\n                        },\n                    },\n                ],\n                limit: 1,\n                next_marker: null,\n            },\n            task_type: taskType,\n            status: TASK_NEW_NOT_STARTED,\n        };\n\n        const taskPayload: TaskPayload = {\n            description: message,\n            due_at: dueAtString,\n            task_type: taskType,\n            completion_rule: completionRule,\n        };\n\n        // create request for the size of each group by ID\n        const groupInfoPromises: Array<Promise<any>> = assignees\n            .filter((assignee: SelectorItem<UserMini | GroupMini>) => (assignee.item && assignee.item.type) === 'group')\n            .map(assignee => assignee.id)\n            .map(groupId => {\n                return new GroupsAPI(this.options).getGroupCount({\n                    file,\n                    group: { id: groupId },\n                });\n            });\n\n        // Fetch each group size in parallel --> return an array of group sizes\n        Promise.all(groupInfoPromises)\n            .then((groupCounts: Array<{ total_count: number }>) => {\n                const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                    groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n                );\n                const warning = {\n                    code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                    type: 'warning',\n                };\n                if (hasAnyGroupCountExceeded) {\n                    this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                    return;\n                }\n\n                this.tasksNewAPI = new TasksNewAPI(this.options);\n                this.tasksNewAPI.createTaskWithDeps({\n                    file,\n                    task: taskPayload,\n                    assignees,\n                    successCallback: (taskWithDepsData: any) => {\n                        this.addPendingItem(this.file.id, currentUser, pendingTask);\n                        this.updateFeedItem(\n                            {\n                                ...taskWithDepsData,\n                                task_links: {\n                                    entries: taskWithDepsData.task_links,\n                                    next_marker: null,\n                                    limit: 1,\n                                },\n                                assigned_to: {\n                                    entries: taskWithDepsData.assigned_to,\n                                    next_marker: null,\n                                    limit: taskWithDepsData.assigned_to.length,\n                                },\n                                isPending: false,\n                            },\n                            uuid,\n                        );\n                        successCallback(taskWithDepsData);\n                    },\n                    errorCallback: (e: ElementsXhrError, code: string) => {\n                        this.feedErrorCallback(false, e, code);\n                    },\n                });\n            })\n            .catch(error => {\n                this.feedErrorCallback(false, error, ERROR_CODE_CREATE_TASK);\n            });\n    };\n\n    /**\n     * Creates a task group via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaboratorsforGroup(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<Array<TaskCollabAssignee>> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n            taskCollaboratorsAPI.createTaskCollaboratorsforGroup({\n                file,\n                task,\n                group: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.createTaskCollaborator({\n                file,\n                task,\n                user: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Deletes a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly deleted or existing task from the API\n     * @param {TaskCollabAssignee} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task delete error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    deleteTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: TaskCollabAssignee,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file.id = file.id;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.deleteTaskCollaborator({\n                file,\n                task,\n                taskCollaborator: { id: assignee.id },\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task link via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task} task - The newly created task from the API\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment}\n     */\n    createTaskLink(file: BoxItem, task: Task): Promise<TaskLink> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskLinksAPI = new TaskLinksAPI(this.options);\n            this.taskLinksAPI.push(taskLinksAPI);\n\n            taskLinksAPI.createTaskLink({\n                file,\n                task,\n                successCallback: resolve,\n                errorCallback: reject,\n            });\n        });\n    }\n\n    /**\n     * Deletes a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - The task's id\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteTaskNew = (\n        file: BoxItem,\n        task: TaskNew,\n        successCallback: (taskId: string) => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        this.tasksNewAPI.deleteTask({\n            file,\n            task,\n            successCallback: this.deleteFeedItem.bind(this, task.id, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.updateFeedItem(this.createFeedError(messages.taskDeleteErrorMessage), task.id);\n                this.feedErrorCallback(true, e, code);\n            },\n        });\n    };\n\n    /**\n     * Deletes a feed item from the cache\n     *\n     * @param {string} id - The id of the feed item to be deleted\n     * @param {Function} successCallback - function to be called after the delete\n     */\n    deleteFeedItem = (id: string, successCallback: Function = noop) => {\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const feedItems = cachedItems.items.filter(feedItem => feedItem.id !== id);\n            this.setCachedItems(this.file.id, feedItems);\n\n            if (!this.isDestroyed()) {\n                successCallback(id);\n            }\n        }\n    };\n\n    /**\n     * Deletes a reply from the cache\n     *\n     * @param {string} id - The id of the feed item to be deleted\n     * @param {string} parentId - The id of the parent feed item\n     * @param {Function} successCallback - function to be called after the delete\n     */\n    deleteReplyItem = (\n        id: string,\n        parentId: string,\n        successCallback: (id: string, parentId: string) => void = noop,\n    ) => {\n        const cachedItems = this.getCachedItems(this.file.id) || { items: [], errors: [] };\n        const feedItems = cachedItems.items.map(item => {\n            if (item.id !== parentId) {\n                return item;\n            }\n            if (item.type === FEED_ITEM_TYPE_ANNOTATION) {\n                return getItemWithFilteredReplies<Annotation>(item, id);\n            }\n            if (item.type === FEED_ITEM_TYPE_COMMENT) {\n                return getItemWithFilteredReplies<Comment>(item, id);\n            }\n            return item;\n        });\n        this.setCachedItems(this.file.id, feedItems);\n\n        if (!this.isDestroyed()) {\n            successCallback(id, parentId);\n        }\n    };\n\n    /**\n     * Network error callback\n     *\n     * @param {boolean} hasError - true if the UI should display an error\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code for the error which occured\n     * @return {void}\n     */\n    feedErrorCallback = (hasError: boolean = false, e: ElementsXhrError, code: string): void => {\n        if (hasError) {\n            this.errors.push({ ...e, code });\n        }\n\n        if (!this.isDestroyed() && this.errorCallback) {\n            this.errorCallback(e, code, {\n                error: e,\n                [IS_ERROR_DISPLAYED]: hasError,\n            });\n        }\n\n        console.error(e); // eslint-disable-line no-console\n    };\n\n    /**\n     * Add a placeholder pending feed item.\n     *\n     * @param {string} id - the file id\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Object} itemBase - Base properties for item to be added to the feed as pending.\n     * @return {void}\n     */\n    addPendingItem = (id: string, currentUser: User, itemBase: Object): Comment | Task | TaskNew | BoxItemVersion => {\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const date = new Date().toISOString();\n        const pendingFeedItem = {\n            created_at: date,\n            created_by: currentUser,\n            modified_at: date,\n            isPending: true,\n            ...itemBase,\n        };\n        const cachedItems = this.getCachedItems(this.file.id);\n        const feedItems = cachedItems ? cachedItems.items : [];\n        const feedItemsWithPendingItem = [...feedItems, pendingFeedItem];\n        this.setCachedItems(id, feedItemsWithPendingItem);\n\n        return pendingFeedItem;\n    };\n\n    /**\n     * Add a placeholder pending comment (reply).\n     *\n     * @param {string} parentId - id of parent comment or annotation\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Object} commentBase - Base properties for reply (comment) to be added to the feed as pending.\n     * @return {Comment} - newly created pending reply\n     */\n    addPendingReply = (parentId: string, currentUser: User, commentBase: Object): Comment => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const date = new Date().toISOString();\n        const pendingReply: Comment = {\n            created_at: date,\n            created_by: currentUser,\n            modified_at: date,\n            isPending: true,\n            ...commentBase,\n        };\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map(item => {\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_COMMENT) {\n                    return getItemWithPendingReply<Comment>(item, pendingReply);\n                }\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_ANNOTATION) {\n                    return getItemWithPendingReply<Annotation>(item, pendingReply);\n                }\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n        }\n\n        return pendingReply;\n    };\n\n    /**\n     * Callback for successful creation of a Comment.\n     *\n     * @param {Comment} commentData - API returned Comment\n     * @param {string} id - ID of the feed item to update with the new comment data\n     * @return {void}\n     */\n    createCommentSuccessCallback = (commentData: Comment, id: string, successCallback: Function): void => {\n        const { message = '', tagged_message = '' } = commentData;\n        // Comment component uses tagged_message only\n        commentData.tagged_message = tagged_message || message;\n\n        this.updateFeedItem(\n            {\n                ...commentData,\n                isPending: false,\n            },\n            id,\n        );\n\n        if (!this.isDestroyed()) {\n            successCallback(commentData);\n        }\n    };\n\n    /**\n     * Callback for failed creation of a Comment.\n     *\n     * @param {Object} e - The axios error\n     * @param {string} code - the error code\n     * @param {string} id - ID of the feed item to update\n     * @return {void}\n     */\n    createCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        const errorMessage =\n            e.status === HTTP_STATUS_CODE_CONFLICT\n                ? messages.commentCreateConflictMessage\n                : messages.commentCreateErrorMessage;\n        this.updateFeedItem(this.createFeedError(errorMessage), id);\n        this.feedErrorCallback(false, e, code);\n    };\n\n    /**\n     * Callback for successful creation of a Comment.\n     *\n     * @param {Comment} commentData - API returned Comment\n     * @param {string} parentId - ID of the parent feed item\n     * @param {string} id - ID of the reply to update with the new comment data\n     * @param {Function} successCallback - success callback\n     * @return {void}\n     */\n    createReplySuccessCallback = (\n        commentData: Comment,\n        parentId: string,\n        id: string,\n        successCallback: Function,\n    ): void => {\n        this.updateReplyItem(\n            {\n                ...commentData,\n                isPending: false,\n            },\n            parentId,\n            id,\n        );\n\n        if (!this.isDestroyed()) {\n            successCallback(commentData);\n        }\n    };\n\n    /**\n     * Callback for failed creation of a reply.\n     *\n     * @param {ElementsXhrError} error - The axios error\n     * @param {string} code - the error code\n     * @param {string} parentId - ID of the parent feed item\n     * @param {string} id - ID of the feed item to update\n     * @return {void}\n     */\n    createReplyErrorCallback = (error: ElementsXhrError, code: string, parentId: string, id: string) => {\n        const errorMessage =\n            error.status === HTTP_STATUS_CODE_CONFLICT\n                ? messages.commentCreateConflictMessage\n                : messages.commentCreateErrorMessage;\n        this.updateReplyItem(this.createFeedError(errorMessage), parentId, id);\n        this.feedErrorCallback(false, error, code);\n    };\n\n    /**\n     * Constructs an error object that renders to an inline feed error\n     *\n     * @param {string} message - The error message body.\n     * @param {string} title - The error message title.\n     * @return {Object} An error message object\n     */\n    createFeedError(message: MessageDescriptor, title: MessageDescriptor = commonMessages.errorOccured) {\n        return {\n            error: { message, title },\n        };\n    }\n\n    /**\n     * Replace a feed item with new feed item data.\n     *\n     * @param {Object} updates - The new data to be applied to the feed item.\n     * @param {string} id - ID of the feed item to replace.\n     * @return {void}\n     */\n    updateFeedItem = (updates: Object, id: string): ?FeedItems => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map((item: FeedItem) => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        ...updates,\n                    };\n                }\n\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n            return updatedFeedItems;\n        }\n\n        return null;\n    };\n\n    /**\n     * Replace a reply of feed item with new comment data.\n     *\n     * @param {Object} replyUpdates - New data to be applied to the reply.\n     * @param {string} parentId - ID of the parent feed item.\n     * @param {string} id - ID of the reply to replace.\n     * @return {void}\n     */\n    updateReplyItem = (replyUpdates: Object, parentId: string, id: string) => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const getItemWithUpdatedReply = <T: { replies?: Array<Comment> }>(\n            item: T,\n            replyId: string,\n            updates: Object,\n        ): T => {\n            const updatedItem: T = { ...item };\n            if (updatedItem.replies) {\n                updatedItem.replies = updatedItem.replies.map(reply => {\n                    if (reply.id === replyId) {\n                        return {\n                            ...reply,\n                            ...updates,\n                        };\n                    }\n                    return reply;\n                });\n            }\n            return updatedItem;\n        };\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map((item: FeedItem) => {\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_COMMENT) {\n                    return getItemWithUpdatedReply<Comment>(item, id, replyUpdates);\n                }\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_ANNOTATION) {\n                    return getItemWithUpdatedReply<Annotation>(item, id, replyUpdates);\n                }\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n        }\n    };\n\n    /**\n     * Create a comment, and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createComment = (\n        file: BoxItem,\n        currentUser: User,\n        text: string,\n        hasMention: boolean,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: FEED_ITEM_TYPE_COMMENT,\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingItem(this.file.id, currentUser, commentData);\n\n        const message = {};\n        if (hasMention) {\n            message.taggedMessage = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.createComment({\n            file,\n            ...message,\n            successCallback: (comment: Comment) => {\n                this.createCommentSuccessCallback(comment, uuid, successCallback);\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.createCommentErrorCallback(e, code, uuid);\n            },\n        });\n    };\n\n    /**\n     * Create a threaded comment (using ThreadedComments API),\n     * and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createThreadedComment = (\n        file: BoxItem,\n        currentUser: User,\n        text: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: FEED_ITEM_TYPE_COMMENT,\n        };\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingItem(this.file.id, currentUser, commentData);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.createComment({\n            file,\n            message: text,\n            successCallback: (comment: Comment) => {\n                this.createCommentSuccessCallback(comment, uuid, successCallback);\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.createCommentErrorCallback(e, code, uuid);\n            },\n        });\n    };\n\n    /**\n     * Create a reply to annotation or comment, and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} parentId - id of the parent item\n     * @param {CommentFeedItemType} parentType - type of the parent item\n     * @param {string} text - the comment text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createReply(\n        file: BoxItem,\n        currentUser: User,\n        parentId: string,\n        parentType: CommentFeedItemType,\n        text: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void {\n        const { id, permissions } = file;\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: FEED_ITEM_TYPE_COMMENT,\n        };\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingReply(parentId, currentUser, commentData);\n        this.modifyFeedItemRepliesCountBy(parentId, 1);\n\n        const successCallbackFn = (comment: Comment) => {\n            this.createReplySuccessCallback(comment, parentId, uuid, successCallback);\n        };\n        const errorCallbackFn = (error: ErrorResponseData, code: string) => {\n            this.createReplyErrorCallback(error, code, parentId, uuid);\n        };\n\n        if (parentType === FEED_ITEM_TYPE_ANNOTATION) {\n            this.annotationsAPI = new AnnotationsAPI(this.options);\n\n            this.annotationsAPI.createAnnotationReply(\n                file.id,\n                parentId,\n                permissions,\n                text,\n                successCallbackFn,\n                errorCallbackFn,\n            );\n        } else if (parentType === FEED_ITEM_TYPE_COMMENT) {\n            this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n            this.threadedCommentsAPI.createCommentReply({\n                fileId: file.id,\n                commentId: parentId,\n                permissions,\n                message: text,\n                successCallback: successCallbackFn,\n                errorCallback: errorCallbackFn,\n            });\n        }\n    }\n\n    /**\n     * Update a comment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} commentId - Comment ID\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {BoxCommentPermission} permissions - Permissions to attach to the app activity items\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateComment = (\n        file: BoxItem,\n        commentId: string,\n        text: string,\n        hasMention: boolean,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const commentData = {\n            tagged_message: text,\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ ...commentData, isPending: true }, commentId);\n\n        const message = {};\n        if (hasMention) {\n            message.tagged_message = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.updateComment({\n            file,\n            commentId,\n            permissions,\n            ...message,\n            successCallback: (comment: Comment) => {\n                // use the request payload instead of response in the\n                // feed item update because response may not contain\n                // the tagged version of the message\n                this.updateFeedItem(\n                    {\n                        ...message,\n                        isPending: false,\n                    },\n                    commentId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Update a threaded comment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} commentId - Comment ID\n     * @param {string} text - the comment text\n     * @param {FeedItemStatus} status - status of the comment\n     * @param {BoxCommentPermission} permissions - Permissions to attach to the app activity items\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateThreadedComment = (\n        file: BoxItem,\n        commentId: string,\n        text?: string,\n        status?: FeedItemStatus,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n        if (!text && !status) {\n            throw getMissingItemTextOrStatus();\n        }\n\n        const commentData = {};\n        if (text) {\n            commentData.tagged_message = text;\n        }\n        if (status) {\n            commentData.status = status;\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ ...commentData, isPending: true }, commentId);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.updateComment({\n            fileId: file.id,\n            commentId,\n            permissions,\n            message: text,\n            status,\n            successCallback: (comment: Comment) => {\n                const { replies, total_reply_count, ...commentBase } = comment;\n                this.updateFeedItem(\n                    {\n                        // Do not update replies and total_reply_count props as their current values are not included in the response\n                        ...commentBase,\n                        isPending: false,\n                    },\n                    commentId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Update a reply\n     *\n     * @param {BoxItem} file - The file to which the reply with its parent is assigned\n     * @param {string} id - id of the reply\n     * @param {string} parentId - id of the parent item\n     * @param {string} text - the updated text\n     * @param {BoxCommentPermission} permissions - Permissions to attach to the app activity items\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateReply = (\n        file: BoxItem,\n        id: string,\n        parentId: string,\n        text: string,\n        permissions: BoxCommentPermission,\n        successCallback: (comment: Comment) => void,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateReplyItem({ tagged_message: text, isPending: true }, parentId, id);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.updateComment({\n            fileId: file.id,\n            commentId: id,\n            permissions,\n            message: text,\n            undefined,\n            successCallback: (comment: Comment) => {\n                this.updateReplyItem(\n                    {\n                        ...comment,\n                        isPending: false,\n                    },\n                    parentId,\n                    id,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (error: ErrorResponseData, code: string) => {\n                this.updateReplyErrorCallback(error, code, id, parentId);\n            },\n        });\n    };\n\n    /**\n     * Modify feed item replies count\n     *\n     * @param {string} id - id of the item\n     * @param {number} n - number to modify the count by\n     * @return {void}\n     */\n    modifyFeedItemRepliesCountBy = (id: string, n: number) => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const { items: feedItems = [] } = this.getCachedItems(this.file.id) || {};\n        const feedItem = feedItems.find(({ id: itemId }) => itemId === id);\n\n        if (!feedItem || (feedItem.type !== 'annotation' && feedItem.type !== 'comment')) {\n            return;\n        }\n\n        const newReplyCount = (feedItem.total_reply_count || 0) + n;\n        if (newReplyCount >= 0) {\n            this.updateFeedItem({ total_reply_count: newReplyCount }, id);\n        }\n    };\n\n    destroyTaskCollaborators() {\n        if (Array.isArray(this.taskCollaboratorsAPI)) {\n            this.taskCollaboratorsAPI.forEach(api => api.destroy());\n            this.taskCollaboratorsAPI = [];\n        }\n    }\n\n    destroyTaskLinks() {\n        if (Array.isArray(this.taskLinksAPI)) {\n            this.taskLinksAPI.forEach(api => api.destroy());\n            this.taskLinksAPI = [];\n        }\n    }\n\n    /**\n     * Fetches app activities for a file\n     * @param {BoxItemPermission} permissions - Permissions to attach to the app activity items\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchAppActivity(permissions: BoxItemPermission): Promise<?AppActivityItems> {\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        return new Promise(resolve => {\n            this.appActivityAPI.getAppActivity(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Deletes an app activity item.\n     *\n     * @param {BoxItem} file - The file to which the app activity belongs to\n     * @param {string} appActivityId - The app activity item id to delete\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteAppActivity = (\n        file: BoxItem,\n        appActivityId: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const { id } = file;\n        if (!id) {\n            throw getBadItemError();\n        }\n\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, appActivityId);\n\n        this.appActivityAPI.deleteAppActivity({\n            id,\n            appActivityId,\n            successCallback: this.deleteFeedItem.bind(this, appActivityId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteAppActivityErrorCallback(e, code, appActivityId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting an app activity item\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the app activity id\n     * @return {void}\n     */\n    deleteAppActivityErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.appActivityDeleteErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Destroys all the task feed API's\n     *\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n\n        if (this.annotationsAPI) {\n            this.annotationsAPI.destroy();\n            delete this.annotationsAPI;\n        }\n\n        if (this.commentsAPI) {\n            this.commentsAPI.destroy();\n            delete this.commentsAPI;\n        }\n\n        if (this.threadedCommentsAPI) {\n            this.threadedCommentsAPI.destroy();\n            delete this.threadedCommentsAPI;\n        }\n\n        if (this.versionsAPI) {\n            this.versionsAPI.destroy();\n            delete this.versionsAPI;\n        }\n\n        if (this.appActivityAPI) {\n            this.appActivityAPI.destroy();\n            delete this.appActivityAPI;\n        }\n\n        if (this.tasksNewAPI) {\n            this.tasksNewAPI.destroy();\n            delete this.tasksNewAPI;\n        }\n\n        this.destroyTaskCollaborators();\n        this.destroyTaskLinks();\n    }\n}\n\nexport default Feed;\n"],"file":"Feed.js"}