{"version":3,"sources":["../../../../src/elements/common/current-user/withCurrentUser.tsx"],"names":["React","messages","withAPIContext","getBadItemError","withCurrentUser","WrappedComponent","ComponentWithCurrentUser","props","error","code","contextInfo","console","onError","user","shouldDestroy","api","file","getUsersAPI","getUser","id","fetchCurrentUserSuccessCallback","fetchCurrentUserErrorCallback","setState","currentUser","currentUserError","undefined","e","maskError","errorHeader","currentUserErrorHeaderMessage","errorSubHeader","defaultErrorMaskSubHeaderMessage","errorCallback","state","fetchCurrentUser","Component","displayName","name"],"mappings":"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","sourcesContent":["import React from 'react';\n// @ts-ignore: no ts definition\nimport messages from '../messages';\n// @ts-ignore: no ts definition\nimport { withAPIContext } from '../api-context';\n// @ts-ignore: no ts definition\nimport { getBadItemError } from '../../../utils/error';\n// @ts-ignore: no ts definition\n// eslint-disable-next-line import/named\nimport { ElementsXhrError, ErrorContextProps } from '../../../common/types/api';\n// @ts-ignore: no ts definition\n// eslint-disable-next-line import/named\nimport { Errors } from '../flowTypes';\n// @ts-ignore: no ts definition\n// eslint-disable-next-line import/named\nimport { User } from '../../../common/types/core';\n\nexport type WithCurrentUserProps = {\n    currentUser?: User;\n    currentUserError?: Errors;\n} & ErrorContextProps;\n\nexport type ComponentWithCurrentUser = {\n    errorCallback: (error: ElementsXhrError, code: string, contextInfo: Object) => void;\n    fetchCurrentUser: (user?: User, shouldDestroy?: boolean) => void;\n    fetchCurrentUserErrorCallback: (e: ElementsXhrError, code: string) => Errors;\n    fetchCurrentUserSuccessCallback: (currentUser: User) => void;\n};\n\nexport type CurrentUserState = {\n    currentUser?: User;\n    currentUserError?: Errors;\n};\n\nexport type WithCurrentUserComponent<P> = React.ComponentClass<P & WithCurrentUserProps>;\n\nexport default function withCurrentUser<P extends object>(\n    WrappedComponent: React.ComponentType<P & WithCurrentUserProps>,\n): WithCurrentUserComponent<P> {\n    class ComponentWithCurrentUser extends React.Component<P & WithCurrentUserProps, CurrentUserState> {\n        static displayName: string;\n\n        constructor(props: P & WithCurrentUserProps) {\n            super(props);\n            const { currentUser } = props;\n            this.state = { currentUser };\n        }\n\n        componentDidMount() {\n            const { currentUser } = this.state;\n            this.fetchCurrentUser(currentUser);\n        }\n\n        /**\n         * Network error callback\n         *\n         * @private\n         * @param {Error} error - Error object\n         * @param {Error} code - the code for the error\n         * @param {Object} contextInfo - the context info for the error\n         * @return {void}\n         */\n        errorCallback = (error: ElementsXhrError, code: string, contextInfo: Object = {}): void => {\n            // eslint-disable-next-line no-console\n            console.error(error);\n            this.props.onError(error, code, contextInfo);\n        };\n\n        /**\n         * Fetches a Users info\n         *\n         * @private\n         * @param {User} [user] - Box User. If missing, gets user that the current token was generated for.\n         * @param {boolean} shouldDestroy\n         * @return {void}\n         */\n        fetchCurrentUser = (user?: User, shouldDestroy = false): void => {\n            const { api, file } = this.props;\n\n            if (!file) {\n                throw getBadItemError();\n            }\n\n            if (typeof user === 'undefined') {\n                api.getUsersAPI(shouldDestroy).getUser(\n                    file.id,\n                    this.fetchCurrentUserSuccessCallback,\n                    this.fetchCurrentUserErrorCallback,\n                );\n            } else {\n                this.setState({ currentUser: user, currentUserError: undefined });\n            }\n        };\n\n        /**\n         * User fetch success callback\n         *\n         * @private\n         * @param {Object} currentUser - User info object\n         * @return {void}\n         */\n        fetchCurrentUserSuccessCallback = (currentUser: User): void => {\n            this.setState({ currentUser, currentUserError: undefined });\n        };\n\n        /**\n         * Handles a failed file user info fetch\n         *\n         * @private\n         * @param {ElementsXhrError} e - API error\n         * @return {void}\n         */\n        fetchCurrentUserErrorCallback = (e: ElementsXhrError, code: string) => {\n            this.setState({\n                currentUser: undefined,\n                currentUserError: {\n                    maskError: {\n                        errorHeader: messages.currentUserErrorHeaderMessage,\n                        errorSubHeader: messages.defaultErrorMaskSubHeaderMessage,\n                    },\n                },\n            });\n\n            this.errorCallback(e, code, {\n                error: e,\n            });\n        };\n\n        render() {\n            const { currentUser, currentUserError } = this.state;\n            return <WrappedComponent {...this.props} currentUser={currentUser} currentUserError={currentUserError} />;\n        }\n    }\n\n    const displayName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    ComponentWithCurrentUser.displayName = `WithCurrentUser(${displayName})`;\n\n    return withAPIContext(ComponentWithCurrentUser);\n}\n"],"file":"withCurrentUser.js"}