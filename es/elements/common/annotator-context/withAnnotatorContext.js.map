{"version":3,"sources":["../../../../src/elements/common/annotator-context/withAnnotatorContext.tsx"],"names":["React","AnnotatorContext","withAnnotatorContext","WrappedComponent","forwardRef","props","ref","emitActiveAnnotationChangeEvent","emitAnnotationRemoveEvent","emitAnnotationReplyCreateEvent","emitAnnotationReplyDeleteEvent","emitAnnotationReplyUpdateEvent","emitAnnotationUpdateEvent","getAnnotationsMatchPath","getAnnotationsPath","state"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAoBA,eAAe,SAASC,oBAAT,CAA4CC,gBAA5C,EAAsF;AACjG,SAAOH,KAAK,CAACI,UAAN,CAA0E,UAACC,KAAD,EAAQC,GAAR;AAAA,WAC7E,oBAAC,gBAAD,CAAkB,QAAlB,QACK;AAAA,UACGC,+BADH,QACGA,+BADH;AAAA,UAEGC,yBAFH,QAEGA,yBAFH;AAAA,UAGGC,8BAHH,QAGGA,8BAHH;AAAA,UAIGC,8BAJH,QAIGA,8BAJH;AAAA,UAKGC,8BALH,QAKGA,8BALH;AAAA,UAMGC,yBANH,QAMGA,yBANH;AAAA,UAOGC,uBAPH,QAOGA,uBAPH;AAAA,UAQGC,kBARH,QAQGA,kBARH;AAAA,UASGC,KATH,QASGA,KATH;AAAA,aAWG,oBAAC,gBAAD;AACI,QAAA,GAAG,EAAET;AADT,SAEQD,KAFR;AAGI,QAAA,cAAc,EAAEU,KAHpB;AAII,QAAA,+BAA+B,EAAER,+BAJrC;AAKI,QAAA,yBAAyB,EAAEC,yBAL/B;AAMI,QAAA,8BAA8B,EAAEC,8BANpC;AAOI,QAAA,8BAA8B,EAAEC,8BAPpC;AAQI,QAAA,8BAA8B,EAAEC,8BARpC;AASI,QAAA,yBAAyB,EAAEC,yBAT/B;AAUI,QAAA,uBAAuB,EAAEC,uBAV7B;AAWI,QAAA,kBAAkB,EAAEC;AAXxB,SAXH;AAAA,KADL,CAD6E;AAAA,GAA1E,CAAP;AA6BH","sourcesContent":["import * as React from 'react';\nimport AnnotatorContext from './AnnotatorContext';\nimport { AnnotatorState, GetMatchPath } from './types';\n\nexport interface WithAnnotatorContextProps {\n    annotatorState?: AnnotatorState;\n    emitActiveAnnotationChangeEvent?: (id: string) => void;\n    emitAnnotationRemoveEvent?: (id: string, isStartEvent?: boolean) => void;\n    emitAnnotationReplyCreateEvent?: (\n        reply: Object,\n        requestId: string,\n        annotationId: string,\n        isStartEvent?: boolean,\n    ) => void;\n    emitAnnotationReplyDeleteEvent?: (id: string, annotationId: string, isStartEvent?: boolean) => void;\n    emitAnnotationReplyUpdateEvent?: (reply: Object, annotationId: string, isStartEvent?: boolean) => void;\n    emitAnnotationUpdateEvent?: (annotation: Object, isStartEvent?: boolean) => void;\n    getAnnotationsMatchPath?: GetMatchPath;\n    getAnnotationsPath?: (fileVersionId?: string, annotationId?: string) => string;\n}\n\nexport default function withAnnotatorContext<P extends {}>(WrappedComponent: React.ComponentType<P>) {\n    return React.forwardRef<React.RefForwardingComponent<React.ComponentType<P>>, P>((props, ref) => (\n        <AnnotatorContext.Consumer>\n            {({\n                emitActiveAnnotationChangeEvent,\n                emitAnnotationRemoveEvent,\n                emitAnnotationReplyCreateEvent,\n                emitAnnotationReplyDeleteEvent,\n                emitAnnotationReplyUpdateEvent,\n                emitAnnotationUpdateEvent,\n                getAnnotationsMatchPath,\n                getAnnotationsPath,\n                state,\n            }) => (\n                <WrappedComponent\n                    ref={ref}\n                    {...props}\n                    annotatorState={state}\n                    emitActiveAnnotationChangeEvent={emitActiveAnnotationChangeEvent}\n                    emitAnnotationRemoveEvent={emitAnnotationRemoveEvent}\n                    emitAnnotationReplyCreateEvent={emitAnnotationReplyCreateEvent}\n                    emitAnnotationReplyDeleteEvent={emitAnnotationReplyDeleteEvent}\n                    emitAnnotationReplyUpdateEvent={emitAnnotationReplyUpdateEvent}\n                    emitAnnotationUpdateEvent={emitAnnotationUpdateEvent}\n                    getAnnotationsMatchPath={getAnnotationsMatchPath}\n                    getAnnotationsPath={getAnnotationsPath}\n                />\n            )}\n        </AnnotatorContext.Consumer>\n    ));\n}\n"],"file":"withAnnotatorContext.js"}