{"version":3,"sources":["../../../src/elements/content-explorer/ItemGrid.js"],"names":["React","ArrowKeyStepper","AutoSizer","getProp","GridView","focus","ItemGridCell","ItemGrid","currentCollection","gridColumnCount","onItemSelect","rootElement","rootId","selected","rest","items","gridRowCount","Math","ceil","length","linearIndex","findIndex","item","id","selectedRowIndex","floor","selectedColumnIndex","slotRenderer","slotIndex","onCellSelect","row","column","index","height","width","scrollToRow","scrollToColumn"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,gDAA5B;AACA,OAAOC,SAAP,MAAsB,0CAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,QAAP,MAAqB,qCAArB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAaA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAQJ;AAAA,MAPTC,iBAOS,QAPTA,iBAOS;AAAA,MANTC,eAMS,QANTA,eAMS;AAAA,MALTC,YAKS,QALTA,YAKS;AAAA,MAJTC,WAIS,QAJTA,WAIS;AAAA,MAHTC,MAGS,QAHTA,MAGS;AAAA,MAFTC,QAES,QAFTA,QAES;AAAA,MADNC,IACM;;AACT,MAAMC,KAAK,GAAGZ,OAAO,CAACK,iBAAD,EAAoB,OAApB,EAA6B,EAA7B,CAArB;AACA,MAAMQ,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,MAAN,GAAeV,eAAzB,CAArB;AACA,MAAMW,WAAW,GAAGP,QAAQ,GAAGE,KAAK,CAACM,SAAN,CAAgB,UAAAC,IAAI;AAAA,WAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,EAAN,OAAaV,QAAb,aAAaA,QAAb,uBAAaA,QAAQ,CAAEU,EAAvB,CAAJ;AAAA,GAApB,CAAH,GAAwD,CAApF;AACA,MAAMC,gBAAgB,GAAGP,IAAI,CAACQ,KAAL,CAAWL,WAAW,GAAGX,eAAzB,CAAzB;AACA,MAAMiB,mBAAmB,GAAGN,WAAW,GAAGX,eAA1C;AAEA;;;;;;;AAMA,MAAMkB,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAA4C;AAC7D,QAAMN,IAAc,GAAGnB,OAAO,CAACK,iBAAD,kBAA6BoB,SAA7B,OAA9B;AACA,WAAON,IAAI,GAAG,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAEA,IAApB;AAA0B,MAAA,YAAY,EAAEZ,YAAxC;AAAsD,MAAA,MAAM,EAAEE;AAA9D,OAA0EE,IAA1E,EAAH,GAAwF,IAAnG;AACH,GAHD;AAKA;;;;;;;;AAMA,MAAMe,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAcC,MAAd,EAAiC;AAClD,QAAMC,KAAK,GAAGF,GAAG,GAAGrB,eAAN,GAAwBsB,MAAtC;AACA,QAAMT,IAAc,GAAGnB,OAAO,CAACK,iBAAD,kBAA6BwB,KAA7B,OAA9B;;AAEA,QAAIV,IAAJ,EAAU;AACNZ,MAAAA,YAAY,CAACY,IAAD,EAAO,YAAM;AACrBjB,QAAAA,KAAK,CAACM,WAAD,EAAc,kEAAd,EAAkF,KAAlF,CAAL;AACH,OAFW,CAAZ;AAGH;AACJ,GATD;;AAWA,SACI,oBAAC,SAAD,QACK;AAAA,QAAGsB,MAAH,SAAGA,MAAH;AAAA,QAAWC,KAAX,SAAWA,KAAX;AAAA,WACG,oBAAC,eAAD;AACI,MAAA,WAAW,EAAEzB,eADjB;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,YAAY,MAHhB;AAII,MAAA,WAAW,EAAEe,gBAJjB;AAKI,MAAA,cAAc,EAAEE,mBALpB;AAMI,MAAA,gBAAgB,EAAE,iCAAqC;AAAA,YAAlCS,WAAkC,SAAlCA,WAAkC;AAAA,YAArBC,cAAqB,SAArBA,cAAqB;AACnDP,QAAAA,YAAY,CAACM,WAAD,EAAcC,cAAd,CAAZ;AACH,OARL;AASI,MAAA,QAAQ,EAAEpB;AATd,OAWK;AAAA,UAAGmB,WAAH,SAAGA,WAAH;AAAA,aACG,oBAAC,QAAD;AACI,QAAA,WAAW,EAAE1B,eADjB;AAEI,QAAA,iBAAiB,EAAED,iBAFvB;AAGI,QAAA,MAAM,EAAEyB,MAHZ;AAII,QAAA,WAAW,EAAEE,WAJjB;AAKI,QAAA,YAAY,EAAER,YALlB;AAMI,QAAA,KAAK,EAAEO;AANX,QADH;AAAA,KAXL,CADH;AAAA,GADL,CADJ;AA4BH,CAvED;;AAyEA,eAAe3B,QAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ArrowKeyStepper from '@box/react-virtualized/dist/es/ArrowKeyStepper';\nimport AutoSizer from '@box/react-virtualized/dist/es/AutoSizer';\nimport getProp from 'lodash/get';\n\nimport GridView from '../../components/grid-view/GridView';\nimport { focus } from '../../utils/dom';\nimport ItemGridCell from './ItemGridCell';\n\nimport type { ItemGridProps } from './flowTypes';\nimport type { BoxItem, Collection } from '../../common/types/core';\n\ntype Props = {\n    currentCollection: Collection,\n    gridColumnCount: number,\n    rootElement: HTMLElement,\n    selected?: BoxItem,\n    ...$Exact<ItemGridProps>,\n};\n\nconst ItemGrid = ({\n    currentCollection,\n    gridColumnCount,\n    onItemSelect,\n    rootElement,\n    rootId,\n    selected,\n    ...rest\n}: Props) => {\n    const items = getProp(currentCollection, 'items', []);\n    const gridRowCount = Math.ceil(items.length / gridColumnCount);\n    const linearIndex = selected ? items.findIndex(item => item?.id === selected?.id) : 0;\n    const selectedRowIndex = Math.floor(linearIndex / gridColumnCount);\n    const selectedColumnIndex = linearIndex % gridColumnCount;\n\n    /**\n     * Renderer used for cards in grid view\n     *\n     * @param {number} slotIndex - index of item in currentCollection.items\n     * @return {React.Element} - Element to display in card\n     */\n    const slotRenderer = (slotIndex: number): ?React.Element<any> => {\n        const item: ?BoxItem = getProp(currentCollection, `items[${slotIndex}]`);\n        return item ? <ItemGridCell item={item} onItemSelect={onItemSelect} rootId={rootId} {...rest} /> : null;\n    };\n\n    /**\n     * Update the currently selected item when navigating with keyboard\n     * @param {number} row - row index of selected item\n     * @param {number} column - column index of selected item\n     * @return {void}\n     */\n    const onCellSelect = (row: number, column: number) => {\n        const index = row * gridColumnCount + column;\n        const item: ?BoxItem = getProp(currentCollection, `items[${index}]`);\n\n        if (item) {\n            onItemSelect(item, () => {\n                focus(rootElement, '.bdl-GridViewSlot-content--selected .be-item-name .be-item-label', false);\n            });\n        }\n    };\n\n    return (\n        <AutoSizer>\n            {({ height, width }) => (\n                <ArrowKeyStepper\n                    columnCount={gridColumnCount}\n                    mode=\"cells\"\n                    isControlled\n                    scrollToRow={selectedRowIndex}\n                    scrollToColumn={selectedColumnIndex}\n                    onScrollToChange={({ scrollToRow, scrollToColumn }) => {\n                        onCellSelect(scrollToRow, scrollToColumn);\n                    }}\n                    rowCount={gridRowCount}\n                >\n                    {({ scrollToRow }) => (\n                        <GridView\n                            columnCount={gridColumnCount}\n                            currentCollection={currentCollection}\n                            height={height}\n                            scrollToRow={scrollToRow}\n                            slotRenderer={slotRenderer}\n                            width={width}\n                        />\n                    )}\n                </ArrowKeyStepper>\n            )}\n        </AutoSizer>\n    );\n};\n\nexport default ItemGrid;\n"],"file":"ItemGrid.js"}