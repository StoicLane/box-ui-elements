{"version":3,"sources":["../../../src/elements/content-sidebar/ActivitySidebar.js"],"names":["React","classNames","debounce","flow","getProp","noop","uniqueId","FormattedMessage","generatePath","ActivityFeed","AddTaskButton","API","messages","SidebarContent","withAnnotatorContext","EVENT_DATA_READY","EVENT_JS_READY","getBadUserError","mark","withAPIContext","withErrorBoundary","withFeatureConsumer","isFeatureEnabled","withLogger","withRouterAndRef","ActivitySidebarFilter","ACTIVITY_FILTER_OPTION_ALL","ACTIVITY_FILTER_OPTION_RESOLVED","ACTIVITY_FILTER_OPTION_TASKS","ACTIVITY_FILTER_OPTION_UNRESOLVED","DEFAULT_COLLAB_DEBOUNCE","ERROR_CODE_FETCH_ACTIVITY","FEED_ITEM_TYPE_ANNOTATION","FEED_ITEM_TYPE_COMMENT","FEED_ITEM_TYPE_TASK","FEED_ITEM_TYPE_VERSION","ORIGIN_ACTIVITY_SIDEBAR","SIDEBAR_VIEW_ACTIVITY","TASK_COMPLETION_RULE_ALL","activityFeedInlineError","inlineError","title","errorOccured","content","activityFeedItemApiError","MARK_NAME_DATA_LOADING","MARK_NAME_DATA_READY","MARK_NAME_JS_READY","ActivitySidebar","props","id","permissions","api","emitAnnotationRemoveEvent","file","getFeedAPI","deleteAnnotation","deleteAnnotationSuccess","bind","feedErrorCallback","fetchFeedItems","text","emitAnnotationUpdateEvent","description","message","updateAnnotation","undefined","annotation","feedSuccessCallback","status","e","code","contextInfo","errorCallback","assignees","taskType","dueAt","completionRule","onSuccess","onError","currentUser","successCallback","createTaskNew","task","onTaskDelete","deleteTaskNew","taskId","onTaskUpdate","updateTaskNew","taskAssignmentId","onTaskAssignmentUpdate","updateTaskCollaborator","hasReplies","onCommentDelete","comment","deleteThreadedComment","deleteComment","parentId","emitAnnotationReplyDeleteEvent","deleteReply","deleteReplySuccessCallback","hasMention","onCommentUpdate","updateThreadedComment","updateComment","emitAnnotationReplyUpdateEvent","tagged_message","updateReply","updateReplySuccessCallback","error","replies","activeFeedEntryId","history","feedItems","state","feedAPI","length","some","item","getCommentFeedItemByReplyId","replace","getActiveCommentPath","updateFeedItem","reply","onCommentCreate","createThreadedComment","createComment","parentType","emitAnnotationReplyCreateEvent","eventRequestId","createReply","createReplySuccessCallback","deleteAppActivity","getActiveFeedEntryData","then","type","isActiveEntryInFeed","isItemTypeComment","Promise","resolve","getFeedItemsWithReplies","updatedItems","fetchFeedItemsSuccessCallback","catch","fetchFeedItemsErrorCallback","fileId","logger","onDataReadyMetric","endMarkName","startMarkName","setState","activityFeedError","errors","Array","isArray","Error","showNotification","map","feedItem","reject","fetchReplies","updatedFeedItems","getCommentFeedItemWithReplies","console","collaborators","entries","approverSelectorContacts","contactsLoaded","mentionSelectorContacts","searchStr","getFileCollaboratorsAPI","getCollaboratorsWithQuery","getApproverContactsSuccessCallback","includeGroups","getMentionContactsSuccessCallback","itemId","find","isItemTypeFocusable","replyId","getFocusableFeedItemById","activeFeedEntryType","firstLevelItem","firstLevelItemWithActiveReply","fetchThreadedComment","parent","parentItem","userId","getUsersAPI","getAvatarUrlWithAccessToken","file_version","nextActiveAnnotationId","emitActiveAnnotationChangeEvent","getAnnotationsMatchPath","getAnnotationsPath","location","onAnnotationSelect","annotationFileVersionId","currentFileVersionId","match","selectedFileVersionId","push","onFilterChange","feedItemsStatusFilter","filter","isDisabled","hasTasks","getApprover","getAvatarUrl","createTask","onTaskModalClose","approvers","getApproverWithQuery","features","shouldShowActivityFeedFilter","shouldShowAdditionalFilterOptions","activityFilterOptions","selectedStatus","handleItemsFiltered","renderActivitySidebarFilter","renderAddTaskButton","shouldHideTitle","sidebarActivityTitle","onReadyMetric","shouldRefreshCache","shouldDestroy","shouldShowReplies","shouldShowTasks","shouldShowVersions","hasVersions","shouldFetchReplies","shouldShowAppActivity","shouldShowAnnotations","shouldUseUAA","fetchRepliesForFeedItems","commentId","sidebar","currentUserError","elementId","onVersionHistoryClick","getUserProfileUrl","onTaskView","isNewThreadedRepliesEnabled","renderActions","renderTitle","getFilteredFeedItems","getMention","handleAnnotationDelete","handleAnnotationEdit","handleAnnotationSelect","handleAnnotationStatusChange","updateReplies","getReplies","updateTaskAssignment","deleteTask","updateTask","PureComponent","annotatorState","onTaskCreate","onVersionChange","ActivitySidebarComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Activity feed sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport uniqueId from 'lodash/uniqueId';\nimport { FormattedMessage } from 'react-intl';\nimport { generatePath, type ContextRouter } from 'react-router-dom';\nimport ActivityFeed from './activity-feed';\nimport AddTaskButton from './AddTaskButton';\nimport API from '../../api';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport { withAnnotatorContext } from '../common/annotator-context';\nimport { EVENT_DATA_READY, EVENT_JS_READY } from '../common/logger/constants';\nimport { getBadUserError } from '../../utils/error';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withFeatureConsumer, isFeatureEnabled } from '../common/feature-checking';\nimport { withLogger } from '../common/logger';\nimport { withRouterAndRef } from '../common/routing';\nimport ActivitySidebarFilter from './ActivitySidebarFilter';\nimport {\n    ACTIVITY_FILTER_OPTION_ALL,\n    ACTIVITY_FILTER_OPTION_RESOLVED,\n    ACTIVITY_FILTER_OPTION_TASKS,\n    ACTIVITY_FILTER_OPTION_UNRESOLVED,\n    DEFAULT_COLLAB_DEBOUNCE,\n    ERROR_CODE_FETCH_ACTIVITY,\n    FEED_ITEM_TYPE_ANNOTATION,\n    FEED_ITEM_TYPE_COMMENT,\n    FEED_ITEM_TYPE_TASK,\n    FEED_ITEM_TYPE_VERSION,\n    ORIGIN_ACTIVITY_SIDEBAR,\n    SIDEBAR_VIEW_ACTIVITY,\n    TASK_COMPLETION_RULE_ALL,\n} from '../../constants';\nimport type {\n    TaskCompletionRule,\n    TaskType,\n    TaskNew,\n    TaskUpdatePayload,\n    TaskCollabStatus,\n} from '../../common/types/tasks';\nimport type {\n    Annotation,\n    AnnotationPermission,\n    ActivityFilterItemType,\n    ActivityFilterOption,\n    BoxCommentPermission,\n    Comment,\n    CommentFeedItemType,\n    FocusableFeedItem,\n    FocusableFeedItemType,\n    FeedItem,\n    FeedItems,\n    FeedItemStatus,\n    FeedItemType,\n} from '../../common/types/feed';\nimport type { ErrorContextProps, ElementsXhrError } from '../../common/types/api';\nimport type { WithLoggerProps } from '../../common/types/logging';\nimport type { SelectorItems, User, UserMini, GroupMini, BoxItem } from '../../common/types/core';\nimport type { Errors, GetProfileUrlCallback } from '../common/flowTypes';\nimport type { Translations } from './flowTypes';\nimport type { FeatureConfig } from '../common/feature-checking';\nimport './ActivitySidebar.scss';\n\nimport { type OnAnnotationEdit } from './activity-feed/comment/types';\n\ninterface WithAnnotatorContextProps {\n    annotatorState?: AnnotatorState;\n    emitActiveAnnotationChangeEvent?: (id: string) => void;\n    emitAnnotationRemoveEvent?: (id: string, isStartEvent?: boolean) => void;\n    emitAnnotationReplyCreateEvent?: (\n        reply: Object,\n        requestId: string,\n        annotationId: string,\n        isStartEvent?: boolean,\n    ) => void;\n    emitAnnotationReplyDeleteEvent?: (id: string, annotationId: string, isStartEvent?: boolean) => void;\n    emitAnnotationReplyUpdateEvent?: (reply: Object, annotationId: string, isStartEvent?: boolean) => void;\n    emitAnnotationUpdateEvent?: (annotation: Object, isStartEvent?: boolean) => void;\n    getAnnotationsMatchPath?: GetMatchPath;\n    getAnnotationsPath?: (fileVersionId?: string, annotationId?: string) => string;\n}\n\ntype ExternalProps = {\n    activeFeedEntryId?: string,\n    activeFeedEntryType?: FocusableFeedItemType,\n    currentUser?: User,\n    currentUserError?: Errors,\n    getUserProfileUrl?: GetProfileUrlCallback,\n    hasReplies?: boolean,\n    hasTasks?: boolean,\n    hasVersions?: boolean,\n    onCommentCreate: Function,\n    onCommentDelete: (comment: Comment) => any,\n    onCommentUpdate: () => any,\n    onTaskAssignmentUpdate: Function,\n    onTaskCreate: Function,\n    onTaskDelete: (id: string) => any,\n    onTaskUpdate: () => any,\n    onTaskView: (id: string, isCreator: boolean) => any,\n} & ErrorContextProps &\n    WithAnnotatorContextProps;\n\ntype PropsWithoutContext = {\n    elementId: string,\n    file: BoxItem,\n    hasSidebarInitialized?: boolean,\n    isDisabled: boolean,\n    onAnnotationSelect: Function,\n    onFilterChange: (status?: ActivityFilterItemType) => void,\n    onVersionChange: Function,\n    onVersionHistoryClick?: Function,\n    translations?: Translations,\n} & ExternalProps &\n    WithLoggerProps &\n    ContextRouter;\n\ntype Props = {\n    api: API,\n    features: FeatureConfig,\n} & PropsWithoutContext;\n\ntype State = {\n    activityFeedError?: Errors,\n    approverSelectorContacts: SelectorItems<UserMini | GroupMini>,\n    contactsLoaded?: boolean,\n    feedItems?: FeedItems,\n    feedItemsStatusFilter?: ActivityFilterItemType,\n    mentionSelectorContacts?: SelectorItems<UserMini>,\n};\n\nexport const activityFeedInlineError: Errors = {\n    inlineError: {\n        title: messages.errorOccured,\n        content: messages.activityFeedItemApiError,\n    },\n};\n\nconst MARK_NAME_DATA_LOADING = `${ORIGIN_ACTIVITY_SIDEBAR}_data_loading`;\nconst MARK_NAME_DATA_READY = `${ORIGIN_ACTIVITY_SIDEBAR}_${EVENT_DATA_READY}`;\nconst MARK_NAME_JS_READY = `${ORIGIN_ACTIVITY_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass ActivitySidebar extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        annotatorState: {},\n        emitActiveAnnotationChangeEvent: noop,\n        emitAnnotationRemoveEvent: noop,\n        emitAnnotationReplyCreateEvent: noop,\n        emitAnnotationReplyDeleteEvent: noop,\n        emitAnnotationReplyUpdateEvent: noop,\n        emitAnnotationUpdateEvent: noop,\n        getAnnotationsMatchPath: noop,\n        getAnnotationsPath: noop,\n        hasReplies: false,\n        hasTasks: true,\n        hasVersions: true,\n        isDisabled: false,\n        onAnnotationSelect: noop,\n        onCommentCreate: noop,\n        onCommentDelete: noop,\n        onCommentUpdate: noop,\n        onFilterChange: noop,\n        onTaskAssignmentUpdate: noop,\n        onTaskCreate: noop,\n        onTaskDelete: noop,\n        onTaskUpdate: noop,\n        onVersionChange: noop,\n        onVersionHistoryClick: noop,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        // eslint-disable-next-line react/prop-types\n        const { logger } = this.props;\n\n        mark(MARK_NAME_DATA_LOADING);\n\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n        this.state = {};\n    }\n\n    componentDidMount() {\n        this.fetchFeedItems(true);\n    }\n\n    handleAnnotationDelete = ({ id, permissions }: { id: string, permissions: AnnotationPermission }) => {\n        const { api, emitAnnotationRemoveEvent, file } = this.props;\n\n        emitAnnotationRemoveEvent(id, true);\n        api.getFeedAPI(false).deleteAnnotation(\n            file,\n            id,\n            permissions,\n            this.deleteAnnotationSuccess.bind(this, id),\n            this.feedErrorCallback,\n        );\n\n        this.fetchFeedItems();\n    };\n\n    handleAnnotationEdit: OnAnnotationEdit = ({ id, text, permissions }) => {\n        const { api, emitAnnotationUpdateEvent, file } = this.props;\n\n        emitAnnotationUpdateEvent(\n            {\n                id,\n                description: {\n                    message: text,\n                },\n            },\n            true,\n        );\n        api.getFeedAPI(false).updateAnnotation(\n            file,\n            id,\n            text,\n            undefined,\n            permissions,\n            (annotation: Annotation) => {\n                emitAnnotationUpdateEvent(annotation);\n                this.feedSuccessCallback();\n            },\n            this.feedErrorCallback,\n        );\n\n        this.fetchFeedItems();\n    };\n\n    handleAnnotationStatusChange = (id: string, status: FeedItemStatus, permissions: AnnotationPermission) => {\n        const { api, emitAnnotationUpdateEvent, file } = this.props;\n\n        emitAnnotationUpdateEvent({ id, status }, true);\n        api.getFeedAPI(false).updateAnnotation(\n            file,\n            id,\n            undefined,\n            status,\n            permissions,\n            (annotation: Annotation) => {\n                emitAnnotationUpdateEvent(annotation);\n                this.feedSuccessCallback();\n            },\n            this.feedErrorCallback,\n        );\n\n        this.fetchFeedItems();\n    };\n\n    deleteAnnotationSuccess(id: string) {\n        const { emitAnnotationRemoveEvent } = this.props;\n\n        this.feedSuccessCallback();\n        emitAnnotationRemoveEvent(id);\n    }\n\n    /**\n     * Success callback for fetching feed items\n     */\n    feedSuccessCallback = (): void => {\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Error callback for fetching feed items\n     *\n     * @param {Error} e - the error which occured\n     * @param {Error} code - the code for the error\n     * @param {Object} contextInfo - the context info for the error\n     */\n    feedErrorCallback = (e: ElementsXhrError, code: string, contextInfo?: Object) => {\n        this.errorCallback(e, code, contextInfo);\n        this.fetchFeedItems();\n    };\n\n    createTask = (\n        message: string,\n        assignees: SelectorItems<>,\n        taskType: TaskType,\n        dueAt: ?string,\n        completionRule: TaskCompletionRule,\n        onSuccess: ?Function,\n        onError: ?Function,\n    ): void => {\n        const { api, currentUser, file } = this.props;\n\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n        const errorCallback = (e, code, contextInfo) => {\n            if (onError) {\n                onError(e, code, contextInfo);\n            }\n            this.feedErrorCallback(e, code, contextInfo);\n        };\n        const successCallback = () => {\n            if (onSuccess) {\n                onSuccess();\n            }\n            this.feedSuccessCallback();\n        };\n\n        api.getFeedAPI(false).createTaskNew(\n            file,\n            currentUser,\n            message,\n            assignees,\n            taskType,\n            dueAt,\n            completionRule,\n            successCallback,\n            errorCallback,\n        );\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    deleteTask = (task: TaskNew): void => {\n        const { file, api, onTaskDelete } = this.props;\n        api.getFeedAPI(false).deleteTaskNew(\n            file,\n            task,\n            (taskId: string) => {\n                this.feedSuccessCallback();\n                onTaskDelete(taskId);\n            },\n            this.feedErrorCallback,\n        );\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    updateTask = (task: TaskUpdatePayload, onSuccess: ?Function, onError: ?Function): void => {\n        const { api, file, onTaskUpdate } = this.props;\n        const errorCallback = (e, code) => {\n            if (onError) {\n                onError(e, code);\n            }\n            this.feedErrorCallback(e, code);\n        };\n        const successCallback = () => {\n            this.feedSuccessCallback();\n\n            if (onSuccess) {\n                onSuccess();\n            }\n\n            onTaskUpdate();\n        };\n\n        api.getFeedAPI(false).updateTaskNew(file, task, successCallback, errorCallback);\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    updateTaskAssignment = (taskId: string, taskAssignmentId: string, status: TaskCollabStatus): void => {\n        const { api, currentUser = {}, file, onTaskAssignmentUpdate } = this.props;\n\n        const successCallback = () => {\n            this.feedSuccessCallback();\n            onTaskAssignmentUpdate(taskId, taskAssignmentId, status, currentUser.id);\n        };\n\n        api.getFeedAPI(false).updateTaskCollaborator(\n            file,\n            taskId,\n            taskAssignmentId,\n            status,\n            successCallback,\n            this.feedErrorCallback,\n        );\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Deletes a comment via the API.\n     *\n     * @param {Object} args - A subset of the comment\n     * @return void\n     */\n    deleteComment = ({ id, permissions }: { id: string, permissions: BoxCommentPermission }): void => {\n        const { api, file, hasReplies, onCommentDelete } = this.props;\n\n        const successCallback = (comment: Comment) => {\n            this.feedSuccessCallback();\n            onCommentDelete(comment);\n        };\n\n        if (hasReplies) {\n            api.getFeedAPI(false).deleteThreadedComment(file, id, permissions, successCallback, this.feedErrorCallback);\n        } else {\n            api.getFeedAPI(false).deleteComment(file, id, permissions, successCallback, this.feedErrorCallback);\n        }\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Deletes a reply via the API.\n     *\n     * @param {Object} args - A subset of the comment\n     * @return void\n     */\n    deleteReply = ({\n        id,\n        parentId,\n        permissions,\n    }: {\n        id: string,\n        parentId: string,\n        permissions: BoxCommentPermission,\n    }): void => {\n        const { api, emitAnnotationReplyDeleteEvent, file } = this.props;\n\n        emitAnnotationReplyDeleteEvent(id, parentId, true);\n        api.getFeedAPI(false).deleteReply(\n            file,\n            id,\n            parentId,\n            permissions,\n            this.deleteReplySuccessCallback.bind(this, id, parentId),\n            this.feedErrorCallback,\n        );\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Handles a successful deletion of a reply\n     *\n     * @private\n     * @param {string} id - The id of the reply\n     * @param {string} parentId - The id of the reply's parent item\n     * @return {void}\n     */\n    deleteReplySuccessCallback = (id: string, parentId: string) => {\n        const { emitAnnotationReplyDeleteEvent } = this.props;\n\n        this.feedSuccessCallback();\n        emitAnnotationReplyDeleteEvent(id, parentId);\n    };\n\n    updateComment = (\n        id: string,\n        text?: string,\n        status?: FeedItemStatus,\n        hasMention: boolean,\n        permissions: BoxCommentPermission,\n        onSuccess: ?Function,\n        onError: ?Function,\n    ): void => {\n        const { api, file, hasReplies, onCommentUpdate } = this.props;\n\n        const errorCallback = (e, code) => {\n            if (onError) {\n                onError(e, code);\n            }\n            this.feedErrorCallback(e, code);\n        };\n\n        const successCallback = () => {\n            this.feedSuccessCallback();\n            if (onSuccess) {\n                onSuccess();\n            }\n            onCommentUpdate();\n        };\n\n        if (hasReplies) {\n            api.getFeedAPI(false).updateThreadedComment(\n                file,\n                id,\n                text,\n                status,\n                permissions,\n                successCallback,\n                errorCallback,\n            );\n        } else {\n            api.getFeedAPI(false).updateComment(\n                file,\n                id,\n                text || '',\n                hasMention,\n                permissions,\n                successCallback,\n                errorCallback,\n            );\n        }\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Updates a reply\n     *\n     * @param {string} id - id of the reply\n     * @param {string} parentId - id of the parent item\n     * @param {string} text - the reply updated text\n     * @param {BoxCommentPermission} permissions - permissions associated with the reply\n     * @param {Function} onSuccess - the success callback\n     * @param {Function} onError - the error callback\n     * @return {void}\n     */\n    updateReply = (\n        id: string,\n        parentId: string,\n        text: string,\n        permissions: BoxCommentPermission,\n        onSuccess: ?Function,\n        onError: ?Function,\n    ): void => {\n        const { api, emitAnnotationReplyUpdateEvent, file } = this.props;\n\n        emitAnnotationReplyUpdateEvent({ id, tagged_message: text }, parentId, true);\n        api.getFeedAPI(false).updateReply(\n            file,\n            id,\n            parentId,\n            text,\n            permissions,\n            this.updateReplySuccessCallback.bind(this, parentId, onSuccess),\n            (error, code) => {\n                if (onError) {\n                    onError(error, code);\n                }\n                this.feedErrorCallback(error, code);\n            },\n        );\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Updates replies of a comment or annotation in the Feed\n     *\n     * @param {string} id - id of the feed item\n     * @param {Array<Comment>} replies - replies\n     * @return {void}\n     */\n    updateReplies = (id: string, replies: Array<Comment>) => {\n        const { activeFeedEntryId, api, file, history } = this.props;\n        const { feedItems } = this.state;\n\n        if (!feedItems) {\n            return;\n        }\n\n        const feedAPI = api.getFeedAPI(false);\n        feedAPI.file = file;\n\n        // Detect if replies are being hidden and activeFeedEntryId belongs to a reply\n        // that is in currently being updated parent, in order to disable active item\n        if (\n            activeFeedEntryId &&\n            replies.length === 1 &&\n            feedItems.some(\n                (item: FeedItem) =>\n                    item.id === id && item === this.getCommentFeedItemByReplyId(feedItems, activeFeedEntryId),\n            )\n        ) {\n            history.replace(this.getActiveCommentPath());\n        }\n\n        feedAPI.updateFeedItem({ replies }, id);\n\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Handles a successful update of a reply\n     *\n     * @private\n     * @param {string} parentId - The id of the reply's parent item\n     * @param {Function} onSuccess - the success callback\n     * @param {Comment} reply - The reply comment object\n     * @return {void}\n     */\n    updateReplySuccessCallback = (parentId: string, onSuccess: ?Function, reply: Comment) => {\n        const { emitAnnotationReplyUpdateEvent } = this.props;\n\n        this.feedSuccessCallback();\n        emitAnnotationReplyUpdateEvent(reply, parentId);\n        if (onSuccess) {\n            onSuccess();\n        }\n    };\n\n    /**\n     * Posts a new comment to the API\n     *\n     * @param {string} text - The comment's text\n     * @param {boolean} hasMention - The comment's text\n     * @return {void}\n     */\n    createComment = (text: string, hasMention: boolean): void => {\n        const { api, currentUser, file, hasReplies, onCommentCreate } = this.props;\n\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const successCallback = (comment: Comment) => {\n            onCommentCreate(comment);\n            this.feedSuccessCallback();\n        };\n\n        if (hasReplies) {\n            api.getFeedAPI(false).createThreadedComment(\n                file,\n                currentUser,\n                text,\n                successCallback,\n                this.feedErrorCallback,\n            );\n        } else {\n            api.getFeedAPI(false).createComment(\n                file,\n                currentUser,\n                text,\n                hasMention,\n                successCallback,\n                this.feedErrorCallback,\n            );\n        }\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Posts a new reply to the API\n     *\n     * @param {string} parentId - The id of the parent item\n     * @param {CommentFeedItemType} parentType - The type of the parent item\n     * @param {string} text - The text of reply\n     * @return {void}\n     */\n    createReply = (parentId: string, parentType: CommentFeedItemType, text: string): void => {\n        const { api, currentUser, emitAnnotationReplyCreateEvent, file } = this.props;\n\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const eventRequestId = uniqueId('comment_');\n        emitAnnotationReplyCreateEvent({ tagged_message: text }, eventRequestId, parentId, true);\n        api.getFeedAPI(false).createReply(\n            file,\n            currentUser,\n            parentId,\n            parentType,\n            text,\n            this.createReplySuccessCallback.bind(this, eventRequestId, parentId),\n            this.feedErrorCallback,\n        );\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Handles a successful creation of a reply\n     *\n     * @private\n     * @param {string} eventRequestId - The id of the parent item\n     * @param {string} parentId - The id of the reply's parent item\n     * @param {Comment} reply - The reply comment object\n     * @return {void}\n     */\n    createReplySuccessCallback = (eventRequestId: string, parentId: string, reply: Comment) => {\n        const { emitAnnotationReplyCreateEvent } = this.props;\n\n        this.feedSuccessCallback();\n        emitAnnotationReplyCreateEvent(reply, eventRequestId, parentId);\n    };\n\n    /**\n     * Deletes an app activity item via the API.\n     *\n     * @param {Object} args - A subset of the app activity\n     * @return void\n     */\n    deleteAppActivity = ({ id }: { id: string }): void => {\n        const { api, file } = this.props;\n\n        api.getFeedAPI(false).deleteAppActivity(file, id, this.feedSuccessCallback, this.feedErrorCallback);\n\n        // need to load the pending item\n        this.fetchFeedItems();\n    };\n\n    /**\n     * Fetches the feed items for the sidebar\n     *\n     * @param {boolean} shouldRefreshCache true if the cache should be refreshed\n     * @param {boolean} shouldDestroy true if the api factory should be destroyed\n     */\n    fetchFeedItems(shouldRefreshCache: boolean = false, shouldDestroy: boolean = false) {\n        const {\n            activeFeedEntryId,\n            activeFeedEntryType,\n            api,\n            file,\n            features,\n            hasReplies: shouldShowReplies,\n            hasTasks: shouldShowTasks,\n            hasVersions: shouldShowVersions,\n        } = this.props;\n        const shouldFetchReplies =\n            shouldRefreshCache &&\n            shouldShowReplies &&\n            activeFeedEntryId &&\n            activeFeedEntryType === FEED_ITEM_TYPE_COMMENT;\n        const shouldShowAppActivity = isFeatureEnabled(features, 'activityFeed.appActivity.enabled');\n        const shouldShowAnnotations = isFeatureEnabled(features, 'activityFeed.annotations.enabled');\n        const shouldUseUAA = isFeatureEnabled(features, 'activityFeed.uaaIntegration.enabled');\n\n        api.getFeedAPI(shouldDestroy).feedItems(\n            file,\n            shouldRefreshCache,\n            shouldFetchReplies ? this.fetchRepliesForFeedItems : this.fetchFeedItemsSuccessCallback,\n            this.fetchFeedItemsErrorCallback,\n            this.errorCallback,\n            {\n                shouldShowAnnotations,\n                shouldShowAppActivity,\n                shouldShowReplies,\n                shouldShowTasks,\n                shouldShowVersions,\n                shouldUseUAA,\n            },\n        );\n    }\n\n    fetchRepliesForFeedItems = (feedItems: FeedItems) => {\n        const { activeFeedEntryId } = this.props;\n\n        if (!activeFeedEntryId) {\n            return;\n        }\n\n        this.getActiveFeedEntryData(feedItems)\n            .then(({ id, type }) => {\n                if (\n                    !id ||\n                    !type ||\n                    this.isActiveEntryInFeed(feedItems, activeFeedEntryId) ||\n                    !this.isItemTypeComment(type)\n                ) {\n                    return Promise.resolve(feedItems);\n                }\n\n                const parentType: CommentFeedItemType =\n                    type === FEED_ITEM_TYPE_COMMENT ? FEED_ITEM_TYPE_COMMENT : FEED_ITEM_TYPE_ANNOTATION;\n\n                return this.getFeedItemsWithReplies(feedItems, id, parentType);\n            })\n            .then(updatedItems => this.fetchFeedItemsSuccessCallback(updatedItems))\n            .catch(error => this.fetchFeedItemsErrorCallback(feedItems, [error]));\n    };\n\n    /**\n     * Handles a successful feed API fetch\n     *\n     * @private\n     * @param {Array} feedItems - the feed items\n     * @return {void}\n     */\n    fetchFeedItemsSuccessCallback = (feedItems: FeedItems): void => {\n        const {\n            file: { id: fileId },\n            logger,\n        } = this.props;\n\n        mark(MARK_NAME_DATA_READY);\n\n        // Only emit metric if has >1 activity feed items (there should always at least be the current version)\n        if (feedItems.length > 1) {\n            logger.onDataReadyMetric(\n                {\n                    endMarkName: MARK_NAME_DATA_READY,\n                    startMarkName: MARK_NAME_DATA_LOADING,\n                },\n                fileId,\n            );\n        }\n\n        this.setState({ feedItems, activityFeedError: undefined });\n    };\n\n    /**\n     * Handles a failed feed item fetch\n     *\n     * @private\n     * @param {Error} e - API error\n     * @return {void}\n     */\n    fetchFeedItemsErrorCallback = (feedItems: FeedItems, errors: ElementsXhrError[]): void => {\n        const { onError } = this.props;\n\n        this.setState({\n            feedItems,\n            activityFeedError: activityFeedInlineError,\n        });\n\n        if (Array.isArray(errors) && errors.length) {\n            onError(new Error('Fetch feed items error'), ERROR_CODE_FETCH_ACTIVITY, {\n                showNotification: true,\n                errors: errors.map(({ code }) => code),\n            });\n        }\n    };\n\n    getCommentFeedItemWithReplies = <T: { replies ?: Array < Comment > }>(feedItem: T, replies: Array<Comment>): T => ({\n        ...feedItem,\n        replies,\n    });\n\n        getFeedItemsWithReplies = (feedItems: FeedItems, id?: string, type?: CommentFeedItemType): Promise<FeedItems> => {\n        const {api, file} = this.props;\n\n        return new Promise((resolve, reject) => {\n            if (!id || !type) {\n                resolve(feedItems);\n            return;\n            }\n            api.getFeedAPI(false).fetchReplies(\n            file,\n            id,\n            type,\n                replies => {\n                    const updatedFeedItems = feedItems.map(item => {\n                        if (item.id === id && this.isItemTypeComment(item.type)) {\n                            if (item.type === FEED_ITEM_TYPE_ANNOTATION) {\n                                return this.getCommentFeedItemWithReplies<Annotation>(item, replies);\n                            }\n                if (item.type === FEED_ITEM_TYPE_COMMENT) {\n                                return this.getCommentFeedItemWithReplies<Comment>(item, replies);\n                            }\n                        }\n                    return item;\n                    });\n                    resolve(updatedFeedItems);\n                },\n                error => {\n                        reject(error);\n                },\n                    );\n        });\n    };\n\n    /**\n     * Network error callback\n     *\n     * @private\n     * @param {Error} error - Error object\n                    * @param {Error} code - the code for the error\n                    * @param {Object} contextInfo - the context info for the error\n                    * @return {void}\n                    */\n                    errorCallback = (error: ElementsXhrError, code: string, contextInfo: Object = { }): void => {\n                        /* eslint-disable no-console */\n                        console.error(error);\n                    /* eslint-enable no-console */\n\n                    // eslint-disable-next-line react/prop-types\n                    this.props.onError(error, code, contextInfo);\n    };\n\n    /**\n     * File approver contacts fetch success callback\n     *\n     * @private\n     * @param {BoxItemCollection} collaborators - Collaborators response data\n                    * @return {void}\n                    */\n                    getApproverContactsSuccessCallback = (collaborators: {entries: SelectorItems<> }): void => {\n        const {entries} = collaborators;\n                        this.setState({approverSelectorContacts: entries });\n    };\n\n    /**\n     * File @mention contacts fetch success callback\n     *\n     * @private\n     * @param {BoxItemCollection} collaborators - Collaborators response data\n                        * @return {void}\n                        */\n                        getMentionContactsSuccessCallback = (collaborators: {entries: SelectorItems<> }): void => {\n        const {entries} = collaborators;\n                            this.setState({contactsLoaded: false }, () =>\n                            this.setState({\n                                contactsLoaded: true,\n                            mentionSelectorContacts: entries,\n            }),\n                            );\n    };\n\n    /**\n     * Fetches file @mention's with groups\n     *\n     * @private\n     * @param {string} searchStr - Search string to filter file collaborators by\n                            * @return {void}\n                            */\n    getApprover = debounce((searchStr: string) => {\n        const {file, api} = this.props;\n                            api.getFileCollaboratorsAPI(false).getCollaboratorsWithQuery(\n                            file.id,\n                            this.getApproverContactsSuccessCallback,\n                            this.errorCallback,\n                            searchStr,\n                            {\n                                includeGroups: true,\n            },\n                            );\n    }, DEFAULT_COLLAB_DEBOUNCE);\n\n    /**\n     * Fetches file @mention's\n     *\n     * @private\n     * @param {string} searchStr - Search string to filter file collaborators by\n                            * @return {void}\n                            */\n    getMention = debounce((searchStr: string) => {\n        const {file, api} = this.props;\n                            api.getFileCollaboratorsAPI(false).getCollaboratorsWithQuery(\n                            file.id,\n                            this.getMentionContactsSuccessCallback,\n                            this.errorCallback,\n                            searchStr,\n                            );\n    }, DEFAULT_COLLAB_DEBOUNCE);\n\n    /**\n     * Returns feed item based on the item id\n     *\n     * @param {FeedItems} feedItems - the feed items\n                            * @param {string} itemId - feed item id\n                            * @return {FeedItem | undefined}\n                            */\n    getFocusableFeedItemById = (feedItems: FeedItems, itemId?: string): FeedItem | typeof undefined => {\n        if (!itemId) {\n            return undefined;\n        }\n                            return feedItems.find(({id, type}) => id === itemId && this.isItemTypeFocusable(type));\n    };\n\n    /**\n     * Returns parent feed item based on the reply id\n     *\n     * @param {FeedItems} feedItems - the feed items\n                            * @param {string} replyId - feed item's reply id\n                            * @return {FeedItem | undefined}\n                            */\n    getCommentFeedItemByReplyId = (feedItems: FeedItems, replyId?: string): FeedItem | typeof undefined => {\n        if (!replyId) {\n            return undefined;\n        }\n        return feedItems.find(item => {\n            if ((item.type !== FEED_ITEM_TYPE_ANNOTATION && item.type !== FEED_ITEM_TYPE_COMMENT) || !item.replies) {\n                return false;\n            }\n                            return item.replies.some(({id}) => id === replyId);\n        });\n    };\n\n    /**\n     * Returns true if item (based on given item id) is found within feed items or its replies and it, or its parent, can be active (focusable)\n     *\n     * @param {FeedItems} feedItems - the feed items\n                            * @param {string} itemId - feed item id\n                            * @return {boolean}\n                            */\n    isActiveEntryInFeed = (feedItems: FeedItems, itemId: string): boolean =>\n                            !!(this.getFocusableFeedItemById(feedItems, itemId) || this.getCommentFeedItemByReplyId(feedItems, itemId));\n\n    isItemTypeFocusable = (type?: FeedItemType | FocusableFeedItem | CommentFeedItemType): boolean =>\n                            type === FEED_ITEM_TYPE_ANNOTATION || type === FEED_ITEM_TYPE_COMMENT || type === FEED_ITEM_TYPE_TASK;\n\n    isItemTypeComment = (type?: FeedItemType | FocusableFeedItem | CommentFeedItemType): boolean =>\n                            type === FEED_ITEM_TYPE_ANNOTATION || type === FEED_ITEM_TYPE_COMMENT;\n\n    /**\n     * Returns active entry data (id, type) based on the activeFeedEntryId and activeFeedEntryType values\n     * (it can be existing item or parent if the active entry id belongs to a reply)\n     *\n     * @param {FeedItems} feedItems - the feed items\n                            * @return {Promise < { id: string, type?: FocusableFeedItemType } >}\n                            */\n                            getActiveFeedEntryData = (feedItems: FeedItems): Promise<{ id ?: string, type ?: FeedItemType}> => {\n        const {activeFeedEntryId, activeFeedEntryType, api, file} = this.props;\n        return new Promise((resolve, reject) => {\n            if (!activeFeedEntryId || !activeFeedEntryType || !this.isItemTypeFocusable(activeFeedEntryType)) {\n                                    resolve({});\n                                return;\n            }\n\n                                // Check if the active entry is a first level Feed item\n                                const firstLevelItem = this.getFocusableFeedItemById(feedItems, activeFeedEntryId);\n                                if (firstLevelItem) {\n                const {id, type} = firstLevelItem;\n                                resolve({id, type});\n                                return;\n            }\n\n                                // Check if the active entry is within replies of any first level Feed items\n                                const firstLevelItemWithActiveReply = this.getCommentFeedItemByReplyId(feedItems, activeFeedEntryId);\n                                if (firstLevelItemWithActiveReply) {\n                const {id, type} = firstLevelItemWithActiveReply;\n                                resolve({id, type});\n                                return;\n            }\n\n                                // If the active entry could not be found within feed items, it's most likely a reply that\n                                // is not yet visible in feed and we need to fetch its data in order to find parent\n                                api.getFeedAPI(false).fetchThreadedComment(\n                                file,\n                                activeFeedEntryId,\n                                ({parent}) => {\n                    const parentItem = this.getFocusableFeedItemById(feedItems, parent?.id);\n                                const {id, type} = parentItem || { };\n                                resolve({id, type});\n                },\n                (error: ElementsXhrError) => {\n                    if (error.status === 404) {\n                                    resolve({});\n                    } else {\n                                    reject(error);\n                    }\n                },\n                                );\n        });\n    };\n\n                                getActiveCommentPath(commentId?: string): string {\n        if (!commentId) {\n            return '/activity';\n        }\n\n                                return generatePath('/:sidebar/comments/:commentId?', {\n                                    sidebar: 'activity',\n                                commentId,\n        });\n    }\n\n    /**\n     * Fetches replies (comments) of a comment or annotation\n     *\n     * @param {string} id - id of the feed item\n                                * @param {CommentFeedItemType} type - type of the feed item\n                                * @return {void}\n                                */\n    getReplies = (id: string, type: CommentFeedItemType): void => {\n        const {api, file} = this.props;\n\n                                api.getFeedAPI(false).fetchReplies(file, id, type, this.feedSuccessCallback, this.feedErrorCallback);\n\n                                // need to load the pending item\n                                this.fetchFeedItems();\n    };\n\n    /**\n     * Gets the user avatar URL\n     *\n     * @param {string} userId the user id\n                                * @param {string} fileId the file id\n                                * @return the user avatar URL string for a given user with access token attached\n                                */\n                                getAvatarUrl = async (userId: string): Promise<?string> => {\n        const {file, api} = this.props;\n\n                                return api.getUsersAPI(false).getAvatarUrlWithAccessToken(userId, file.id);\n    };\n\n    handleAnnotationSelect = (annotation: Annotation): void => {\n        const {file_version, id: nextActiveAnnotationId } = annotation;\n                                const {\n                                    emitActiveAnnotationChangeEvent,\n                                    file,\n                                    getAnnotationsMatchPath,\n                                    getAnnotationsPath,\n                                    history,\n                                    location,\n                                    onAnnotationSelect,\n        } = this.props;\n                                const annotationFileVersionId = getProp(file_version, 'id');\n                                const currentFileVersionId = getProp(file, 'file_version.id');\n                                const match = getAnnotationsMatchPath(location);\n                                const selectedFileVersionId = getProp(match, 'params.fileVersionId', currentFileVersionId);\n\n                                emitActiveAnnotationChangeEvent(nextActiveAnnotationId);\n\n                                if (annotationFileVersionId && annotationFileVersionId !== selectedFileVersionId) {\n                                    history.push(getAnnotationsPath(annotationFileVersionId, nextActiveAnnotationId));\n        }\n\n                                onAnnotationSelect(annotation);\n    };\n\n    handleItemsFiltered = (status?: ActivityFilterItemType) => {\n        const {onFilterChange} = this.props;\n\n                                this.setState({feedItemsStatusFilter: status });\n                                onFilterChange(status);\n    };\n\n    getFilteredFeedItems = (): FeedItems | typeof undefined => {\n        const {feedItems, feedItemsStatusFilter} = this.state;\n                                if (!feedItems || !feedItemsStatusFilter || feedItemsStatusFilter === ACTIVITY_FILTER_OPTION_ALL) {\n            return feedItems;\n        }\n        // Filter is completed on two properties (status and type) because filtering on comments (resolved vs. unresolved)\n        // requires looking at item status to see if it is open or resolved. To filter all tasks, we need to look at the\n        // item type. Item type is also used to keep versions in the feed. Task also has a status but it's status will be\n        // \"NOT_STARTED\" or \"COMPLETED\" so it will not conflict with comment's status.\n        return feedItems.filter(item => {\n            return (\n                                item.status === feedItemsStatusFilter ||\n                                item.type === FEED_ITEM_TYPE_VERSION ||\n                                item.type === feedItemsStatusFilter\n                                );\n        });\n    };\n\n    onTaskModalClose = () => {\n                                    this.setState({\n                                        approverSelectorContacts: [],\n                                    });\n    };\n\n                                refresh(shouldRefreshCache: boolean = true): void {\n                                    this.fetchFeedItems(shouldRefreshCache);\n    }\n\n    renderAddTaskButton = () => {\n        const {isDisabled, hasTasks} = this.props;\n                                const {approverSelectorContacts} = this.state;\n                                const {getApprover, getAvatarUrl, createTask, onTaskModalClose} = this;\n\n                                if (!hasTasks) {\n            return null;\n        }\n\n                                return (\n                                <AddTaskButton\n                                    isDisabled={isDisabled}\n                                    onTaskModalClose={onTaskModalClose}\n                                    taskFormProps={{\n                                        approvers: [],\n                                        approverSelectorContacts,\n                                        completionRule: TASK_COMPLETION_RULE_ALL,\n                                        createTask,\n                                        getApproverWithQuery: getApprover,\n                                        getAvatarUrl,\n                                        id: '',\n                                        message: '',\n                                    }}\n                                />\n                                );\n    };\n\n    renderActivitySidebarFilter = () => {\n        const {features, hasTasks} = this.props;\n                                const {feedItemsStatusFilter} = this.state;\n                                const shouldShowActivityFeedFilter = isFeatureEnabled(features, 'activityFeed.filter.enabled');\n                                const shouldShowAdditionalFilterOptions = isFeatureEnabled(features, 'activityFeed.newThreadedReplies.enabled');\n\n                                if (!shouldShowActivityFeedFilter) {\n            return null;\n        }\n\n                                const activityFilterOptions: ActivityFilterOption[] = [\n                                ACTIVITY_FILTER_OPTION_ALL,\n                                ACTIVITY_FILTER_OPTION_UNRESOLVED,\n                                ];\n                                if (shouldShowAdditionalFilterOptions) {\n                                    // Determine which filter options to show based on what activity types are available in current context\n                                    activityFilterOptions.push(ACTIVITY_FILTER_OPTION_RESOLVED);\n                                if (hasTasks) {\n                                    activityFilterOptions.push(ACTIVITY_FILTER_OPTION_TASKS);\n            }\n        }\n\n                                return (\n                                <ActivitySidebarFilter\n                                    activityFilterOptions={activityFilterOptions}\n                                    feedItemType={feedItemsStatusFilter}\n                                    onFeedItemTypeClick={selectedStatus => {\n                                        this.handleItemsFiltered(selectedStatus);\n                                    }}\n                                />\n                                );\n    };\n\n    renderActions = () => (\n                                <>\n                                    {this.renderActivitySidebarFilter()}\n                                    {this.renderAddTaskButton()}\n                                </>\n                                );\n\n    renderTitle = () => {\n        const {features} = this.props;\n                                const shouldHideTitle = isFeatureEnabled(features, 'activityFeed.filter.enabled');\n\n                                if (shouldHideTitle) {\n            return null;\n        }\n                                return <FormattedMessage {...messages.sidebarActivityTitle} />;\n    };\n\n                                render() {\n        const {\n                                    activeFeedEntryId,\n                                    activeFeedEntryType,\n                                    currentUser,\n                                    currentUserError,\n                                    elementId,\n                                    features,\n                                    file,\n                                    hasReplies,\n                                    hasVersions,\n                                    isDisabled = false,\n                                    onVersionHistoryClick,\n                                    getUserProfileUrl,\n                                    onTaskView,\n        } = this.props;\n                                const {activityFeedError, approverSelectorContacts, contactsLoaded, mentionSelectorContacts} = this.state;\n                                const isNewThreadedRepliesEnabled = isFeatureEnabled(features, 'activityFeed.newThreadedReplies.enabled');\n                                const shouldUseUAA = isFeatureEnabled(features, 'activityFeed.uaaIntegration.enabled');\n\n                                return (\n                                <SidebarContent\n                                    actions={this.renderActions()}\n                                    className={classNames('bcs-activity', { 'bcs-activity--full': hasReplies })}\n                                    elementId={elementId}\n                                    sidebarView={SIDEBAR_VIEW_ACTIVITY}\n                                    title={this.renderTitle()}\n                                >\n                                    <ActivityFeed\n                                        activeFeedEntryId={activeFeedEntryId}\n                                        activeFeedEntryType={activeFeedEntryType}\n                                        activityFeedError={activityFeedError}\n                                        approverSelectorContacts={approverSelectorContacts}\n                                        currentUser={currentUser}\n                                        currentUserError={currentUserError}\n                                        feedItems={this.getFilteredFeedItems()}\n                                        file={file}\n                                        getApproverWithQuery={this.getApprover}\n                                        getAvatarUrl={this.getAvatarUrl}\n                                        getMentionWithQuery={this.getMention}\n                                        getUserProfileUrl={getUserProfileUrl}\n                                        hasNewThreadedReplies={isNewThreadedRepliesEnabled}\n                                        hasReplies={hasReplies}\n                                        hasVersions={hasVersions}\n                                        isDisabled={isDisabled}\n                                        mentionSelectorContacts={mentionSelectorContacts}\n                                        contactsLoaded={contactsLoaded}\n                                        onAnnotationDelete={this.handleAnnotationDelete}\n                                        onAnnotationEdit={this.handleAnnotationEdit}\n                                        onAnnotationSelect={this.handleAnnotationSelect}\n                                        onAnnotationStatusChange={this.handleAnnotationStatusChange}\n                                        onAppActivityDelete={this.deleteAppActivity}\n                                        onCommentCreate={this.createComment}\n                                        onCommentDelete={this.deleteComment}\n                                        onCommentUpdate={this.updateComment}\n                                        onHideReplies={this.updateReplies}\n                                        onReplyCreate={this.createReply}\n                                        onReplyDelete={this.deleteReply}\n                                        onReplyUpdate={this.updateReply}\n                                        onShowReplies={this.getReplies}\n                                        onTaskAssignmentUpdate={this.updateTaskAssignment}\n                                        onTaskCreate={this.createTask}\n                                        onTaskDelete={this.deleteTask}\n                                        onTaskModalClose={this.onTaskModalClose}\n                                        onTaskUpdate={this.updateTask}\n                                        onTaskView={onTaskView}\n                                        onVersionHistoryClick={onVersionHistoryClick}\n                                        shouldUseUAA={shouldUseUAA}\n                                    />\n                                </SidebarContent>\n                                );\n    }\n}\n\n                                export type ActivitySidebarProps = ExternalProps;\n                                export {ActivitySidebar as ActivitySidebarComponent};\n                                export default flow([\n                                withLogger(ORIGIN_ACTIVITY_SIDEBAR),\n                                withErrorBoundary(ORIGIN_ACTIVITY_SIDEBAR),\n                                withAPIContext,\n                                withFeatureConsumer,\n                                withAnnotatorContext,\n                                withRouterAndRef,\n                                ])(ActivitySidebar);\n"],"file":"ActivitySidebar.js"}