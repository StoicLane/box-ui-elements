{"version":3,"sources":["../../../src/elements/content-sidebar/SidebarPanels.js"],"names":["flow","React","Navigate","Outlet","Route","Routes","useParams","ORIGIN_ACTIVITY_SIDEBAR","ORIGIN_DETAILS_SIDEBAR","ORIGIN_METADATA_SIDEBAR","ORIGIN_SKILLS_SIDEBAR","SIDEBAR_VIEW_ACTIVITY","SIDEBAR_VIEW_DETAILS","SIDEBAR_VIEW_METADATA","SIDEBAR_VIEW_SKILLS","withAnnotatorContext","withAPIContext","withRouterAndRef","SidebarUtils","withSidebarAnnotations","BASE_EVENT_NAME","MARK_NAME_JS_LOADING_DETAILS","MARK_NAME_JS_LOADING_ACTIVITY","MARK_NAME_JS_LOADING_SKILLS","MARK_NAME_JS_LOADING_METADATA","URL_TO_FEED_ITEM_TYPE","annotations","comments","tasks","LoadableDetailsSidebar","getAsyncSidebarContent","LoadableActivitySidebar","LoadableSkillsSidebar","LoadableMetadataSidebar","SidebarPanels","createRef","isInitialized","setState","shouldRefreshCache","activitySidebar","current","detailsSidebar","metadataSidebar","versionsSidebar","refresh","props","activitySidebarProps","currentUser","currentUserError","detailsSidebarProps","elementId","file","fileId","getPreview","getViewer","hasActivity","hasDetails","hasMetadata","hasSkills","hasVersions","isOpen","metadataSidebarProps","onAnnotationSelect","onVersionChange","onVersionHistoryClick","state","Component","RedirectHandler","redirect","console","log","ActivitySidebarWrapper","matchEntryType","activeFeedEntryType","activeFeedEntryId","undefined","SidebarPanelsComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Sidebar Panels component\n * @author Box\n */\n\nimport flow from 'lodash/flow';\nimport * as React from 'react';\nimport { Navigate, Outlet, Route, Routes, useParams } from 'react-router-dom';\nimport type { BoxItem, User } from '../../common/types/core';\nimport {\n    ORIGIN_ACTIVITY_SIDEBAR,\n    ORIGIN_DETAILS_SIDEBAR,\n    ORIGIN_METADATA_SIDEBAR,\n    ORIGIN_SKILLS_SIDEBAR,\n    SIDEBAR_VIEW_ACTIVITY,\n    SIDEBAR_VIEW_DETAILS,\n    SIDEBAR_VIEW_METADATA,\n    SIDEBAR_VIEW_SKILLS,\n} from '../../constants';\nimport { withAnnotatorContext } from '../common/annotator-context';\nimport { withAPIContext } from '../common/api-context';\nimport type { Errors } from '../common/flowTypes';\nimport { withRouterAndRef } from '../common/routing';\nimport type { ActivitySidebarProps } from './ActivitySidebar';\nimport type { DetailsSidebarProps } from './DetailsSidebar';\nimport type { MetadataSidebarProps } from './MetadataSidebar';\nimport SidebarUtils from './SidebarUtils';\nimport type { VersionsSidebarProps } from './versions';\nimport withSidebarAnnotations from './withSidebarAnnotations';\n\ntype Props = {\n    activitySidebarProps: ActivitySidebarProps,\n    currentUser?: User,\n    currentUserError?: Errors,\n    detailsSidebarProps: DetailsSidebarProps,\n    elementId: string,\n    file: BoxItem,\n    fileId: string,\n    getPreview: Function,\n    getViewer: Function,\n    hasActivity: boolean,\n    hasDetails: boolean,\n    hasMetadata: boolean,\n    hasSkills: boolean,\n    hasVersions: boolean,\n    isOpen: boolean,\n    metadataSidebarProps: MetadataSidebarProps,\n    onAnnotationSelect?: Function,\n    onVersionChange?: Function,\n    onVersionHistoryClick?: Function,\n    versionsSidebarProps: VersionsSidebarProps,\n};\n\ntype State = {\n    isInitialized: boolean,\n};\n\ntype ElementRefType = {\n    current: null | Object,\n};\n\n// TODO: place into code splitting logic\nconst BASE_EVENT_NAME = '_JS_LOADING';\nconst MARK_NAME_JS_LOADING_DETAILS = `${ORIGIN_DETAILS_SIDEBAR}${BASE_EVENT_NAME}`;\nconst MARK_NAME_JS_LOADING_ACTIVITY = `${ORIGIN_ACTIVITY_SIDEBAR}${BASE_EVENT_NAME}`;\nconst MARK_NAME_JS_LOADING_SKILLS = `${ORIGIN_SKILLS_SIDEBAR}${BASE_EVENT_NAME}`;\nconst MARK_NAME_JS_LOADING_METADATA = `${ORIGIN_METADATA_SIDEBAR}${BASE_EVENT_NAME}`;\n// const MARK_NAME_JS_LOADING_VERSIONS = `${ORIGIN_VERSIONS_SIDEBAR}${BASE_EVENT_NAME}`;\n\nconst URL_TO_FEED_ITEM_TYPE = { annotations: 'annotation', comments: 'comment', tasks: 'task' };\n\nconst LoadableDetailsSidebar = SidebarUtils.getAsyncSidebarContent(SIDEBAR_VIEW_DETAILS, MARK_NAME_JS_LOADING_DETAILS);\nconst LoadableActivitySidebar = SidebarUtils.getAsyncSidebarContent(\n    SIDEBAR_VIEW_ACTIVITY,\n    MARK_NAME_JS_LOADING_ACTIVITY,\n);\nconst LoadableSkillsSidebar = SidebarUtils.getAsyncSidebarContent(SIDEBAR_VIEW_SKILLS, MARK_NAME_JS_LOADING_SKILLS);\nconst LoadableMetadataSidebar = SidebarUtils.getAsyncSidebarContent(\n    SIDEBAR_VIEW_METADATA,\n    MARK_NAME_JS_LOADING_METADATA,\n);\n// const LoadableVersionsSidebar = SidebarUtils.getAsyncSidebarContent(\n//     SIDEBAR_VIEW_VERSIONS,\n//     MARK_NAME_JS_LOADING_VERSIONS,\n// );\n\nclass SidebarPanels extends React.Component<Props, State> {\n    activitySidebar: ElementRefType = React.createRef();\n\n    detailsSidebar: ElementRefType = React.createRef();\n\n    metadataSidebar: ElementRefType = React.createRef();\n\n    state: State = { isInitialized: false };\n\n    versionsSidebar: ElementRefType = React.createRef();\n\n    componentDidMount() {\n        this.setState({ isInitialized: true });\n    }\n\n    /**\n     * Refreshes the contents of the active sidebar\n     * @returns {void}\n     */\n    refresh(shouldRefreshCache: boolean = true): void {\n        const { current: activitySidebar } = this.activitySidebar;\n        const { current: detailsSidebar } = this.detailsSidebar;\n        const { current: metadataSidebar } = this.metadataSidebar;\n        const { current: versionsSidebar } = this.versionsSidebar;\n\n        if (activitySidebar) {\n            activitySidebar.refresh(shouldRefreshCache);\n        }\n\n        if (detailsSidebar) {\n            detailsSidebar.refresh();\n        }\n\n        if (metadataSidebar) {\n            metadataSidebar.refresh();\n        }\n\n        if (versionsSidebar) {\n            versionsSidebar.refresh();\n        }\n    }\n\n    render() {\n        const {\n            activitySidebarProps,\n            currentUser,\n            currentUserError,\n            detailsSidebarProps,\n            elementId,\n            file,\n            fileId,\n            getPreview,\n            getViewer,\n            hasActivity,\n            hasDetails,\n            hasMetadata,\n            hasSkills,\n            hasVersions,\n            isOpen,\n            metadataSidebarProps,\n            onAnnotationSelect,\n            onVersionChange,\n            onVersionHistoryClick,\n        }: // versionsSidebarProps,\n            Props = this.props;\n\n        const { isInitialized } = this.state;\n\n        if (!isOpen || (!hasActivity && !hasDetails && !hasMetadata && !hasSkills && !hasVersions)) {\n            return null;\n        }\n\n        return (\n            <Routes>\n                {/* <Route\n                    path=\"/\"\n                    element={\n                        <RedirectHandler\n                            hasSkills={hasSkills}\n                            hasActivity={hasActivity}\n                            hasDetails={hasDetails}\n                            hasMetadata={hasMetadata}\n                            hasVersions={hasVersions}\n                        />\n                    }\n                /> */}\n                {/* {hasSkills && (\n                    <Route\n                        path={`/vault/${SIDEBAR_VIEW_SKILLS}`}\n                        element={\n                            <LoadableSkillsSidebar\n                                elementId={elementId}\n                                key={file.id}\n                                file={file}\n                                getPreview={getPreview}\n                                getViewer={getViewer}\n                                hasSidebarInitialized={isInitialized}\n                                startMarkName={MARK_NAME_JS_LOADING_SKILLS}\n                            />\n                        }\n                    />\n                )} */}\n                {/* This handles both the default activity sidebar and the activity sidebar with a\n                comment or task deeplink.  */}\n                {/* {hasActivity &&\n                    [\n                        `/vault/${SIDEBAR_VIEW_ACTIVITY}`,\n                        `/vault/${SIDEBAR_VIEW_ACTIVITY}/:activeFeedEntryType(annotations)/:fileVersionId/:activeFeedEntryId?`,\n                        `/vault/${SIDEBAR_VIEW_ACTIVITY}/:activeFeedEntryType(comments|tasks)/:activeFeedEntryId?`,\n                    ].map(path => (\n                        <Route\n                            key={path}\n                            path={path}\n                            element={\n                                <ActivitySidebarWrapper\n                                    elementId={elementId}\n                                    currentUser={currentUser}\n                                    currentUserError={currentUserError}\n                                    file={file}\n                                    hasSidebarInitialized={isInitialized}\n                                    onAnnotationSelect={onAnnotationSelect}\n                                    onVersionChange={onVersionChange}\n                                    onVersionHistoryClick={onVersionHistoryClick}\n                                    activitySidebarRef={this.activitySidebar}\n                                    startMarkName={MARK_NAME_JS_LOADING_ACTIVITY}\n                                    {...activitySidebarProps}\n                                />\n                            }\n                        />\n                    ))} */}\n                {hasDetails && (\n                    <Route\n                        path={`/vault/${SIDEBAR_VIEW_DETAILS}`}\n                        element={\n                            <LoadableDetailsSidebar\n                                elementId={elementId}\n                                fileId={fileId}\n                                hasSidebarInitialized={isInitialized}\n                                key={fileId}\n                                hasVersions={hasVersions}\n                                onVersionHistoryClick={onVersionHistoryClick}\n                                ref={this.detailsSidebar}\n                                startMarkName={MARK_NAME_JS_LOADING_DETAILS}\n                                {...detailsSidebarProps}\n                            />\n                        }\n                    />\n                )}\n                {/* {hasMetadata && (\n                    <Route\n                        path={`/vault/${SIDEBAR_VIEW_METADATA}`}\n                        element={\n                            <LoadableMetadataSidebar\n                                elementId={elementId}\n                                fileId={fileId}\n                                hasSidebarInitialized={isInitialized}\n                                ref={this.metadataSidebar}\n                                startMarkName={MARK_NAME_JS_LOADING_METADATA}\n                                {...metadataSidebarProps}\n                            />\n                        }\n                    />\n                )} */}\n                {/* {hasVersions && (\n                    <Route\n                        path=\"/:sidebar(activity|details)/versions/:versionId?\"\n                        element={({ match }) => (\n                            <LoadableVersionsSidebar\n                                fileId={fileId}\n                                hasSidebarInitialized={isInitialized}\n                                key={fileId}\n                                onVersionChange={onVersionChange}\n                                parentName={match.params.sidebar}\n                                ref={this.versionsSidebar}\n                                versionId={match.params.versionId}\n                                {...versionsSidebarProps}\n                            />\n                        )}\n                    />\n                )} */}\n            </Routes>\n        );\n    }\n}\n\nfunction RedirectHandler({ hasSkills, hasActivity, hasDetails, hasMetadata }: any) {\n    let redirect = '';\n\n    if (hasSkills) {\n        redirect = `${SIDEBAR_VIEW_SKILLS}`;\n    } else if (hasActivity) {\n        redirect = `${SIDEBAR_VIEW_ACTIVITY}`;\n    } else if (hasDetails) {\n        redirect = `${SIDEBAR_VIEW_DETAILS}`;\n    } else if (hasMetadata) {\n        redirect = `${SIDEBAR_VIEW_METADATA}`;\n    }\n\n    console.log('redirecting?', redirect);\n    if (redirect) {\n        return <Navigate to={`/vault/${redirect}`} />;\n    }\n\n    return <Outlet />;\n}\n\nfunction ActivitySidebarWrapper(props) {\n    const { activeFeedEntryType: matchEntryType, activeFeedEntryId } = useParams();\n    const activeFeedEntryType = matchEntryType ? URL_TO_FEED_ITEM_TYPE[matchEntryType] : undefined;\n\n    return (\n        <LoadableActivitySidebar\n            {...props}\n            activeFeedEntryId={activeFeedEntryId}\n            activeFeedEntryType={activeFeedEntryId && activeFeedEntryType}\n        />\n    );\n}\n\nexport { SidebarPanels as SidebarPanelsComponent };\nexport default flow([withSidebarAnnotations, withAPIContext, withAnnotatorContext, withRouterAndRef])(SidebarPanels);\n"],"file":"SidebarPanels.js"}