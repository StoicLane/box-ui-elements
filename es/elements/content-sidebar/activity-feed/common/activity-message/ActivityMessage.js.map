{"version":3,"sources":["../../../../../../src/elements/content-sidebar/activity-feed/common/activity-message/ActivityMessage.js"],"names":["React","noop","FormattedMessage","CollapsableMessage","formatTaggedMessage","LoadingIndicator","messages","ShowOriginalButton","TranslateButton","withFeatureConsumer","isFeatureEnabled","ActivityMessage","isLoading","isTranslation","event","props","id","tagged_message","onTranslate","translatedTaggedMessage","setState","preventDefault","prevProps","translationFailed","prevTaggedMessage","prevTranslationFailed","button","handleShowOriginal","handleTranslate","features","getUserProfileUrl","isEdited","translationEnabled","state","commentToDisplay","MessageWrapper","Fragment","activityMessageEdited","getButton","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport CollapsableMessage from './CollapsableMessage';\nimport formatTaggedMessage from '../../utils/formatTaggedMessage';\nimport LoadingIndicator from '../../../../../components/loading-indicator';\nimport messages from './messages';\nimport ShowOriginalButton from './ShowOriginalButton';\nimport TranslateButton from './TranslateButton';\nimport { withFeatureConsumer, isFeatureEnabled } from '../../../../common/feature-checking';\n\nimport type { GetProfileUrlCallback } from '../../../../common/flowTypes';\nimport type { FeatureConfig } from '../../../../common/feature-checking';\n\nimport './ActivityMessage.scss';\n\ntype Props = {\n    features: FeatureConfig,\n    getUserProfileUrl?: GetProfileUrlCallback,\n    id: string,\n    isEdited?: boolean,\n    onTranslate?: Function,\n    tagged_message: string,\n    translatedTaggedMessage?: string,\n    translationEnabled?: boolean,\n    translationFailed?: ?boolean,\n};\n\ntype State = {\n    isLoading?: boolean,\n    isTranslation?: boolean,\n};\n\nclass ActivityMessage extends React.Component<Props, State> {\n    static defaultProps = {\n        isEdited: false,\n        translationEnabled: false,\n    };\n\n    state = {\n        isLoading: false,\n        isTranslation: false,\n    };\n\n    componentDidUpdate(prevProps: Props): void {\n        const { translatedTaggedMessage, translationFailed } = this.props;\n        const { translatedTaggedMessage: prevTaggedMessage, translationFailed: prevTranslationFailed } = prevProps;\n\n        if (prevTaggedMessage === translatedTaggedMessage || prevTranslationFailed === translationFailed) {\n            return;\n        }\n\n        if (translatedTaggedMessage || translationFailed) {\n            this.setState({ isLoading: false });\n        }\n    }\n\n    getButton(isTranslation?: boolean): React.Node {\n        let button = null;\n        if (isTranslation) {\n            button = <ShowOriginalButton handleShowOriginal={this.handleShowOriginal} />;\n        } else {\n            button = <TranslateButton handleTranslate={this.handleTranslate} />;\n        }\n\n        return button;\n    }\n\n    handleTranslate = (event: SyntheticMouseEvent<>): void => {\n        const { id, tagged_message, onTranslate = noop, translatedTaggedMessage } = this.props;\n        if (!translatedTaggedMessage) {\n            this.setState({ isLoading: true });\n            onTranslate({ id, tagged_message });\n        }\n\n        this.setState({ isTranslation: true });\n        event.preventDefault();\n    };\n\n    handleShowOriginal = (event: SyntheticMouseEvent<>): void => {\n        this.setState({ isTranslation: false });\n        event.preventDefault();\n    };\n\n    render(): React.Node {\n        const {\n            features,\n            getUserProfileUrl,\n            id,\n            isEdited,\n            tagged_message,\n            translatedTaggedMessage,\n            translationEnabled,\n        } = this.props;\n        const { isLoading, isTranslation } = this.state;\n        const commentToDisplay =\n            translationEnabled && isTranslation && translatedTaggedMessage ? translatedTaggedMessage : tagged_message;\n        const MessageWrapper = isFeatureEnabled(features, 'activityFeed.collapsableMessages.enabled')\n            ? CollapsableMessage\n            : React.Fragment;\n\n        return isLoading ? (\n            <div className=\"bcs-ActivityMessageLoading\">\n                <LoadingIndicator size=\"small\" />\n            </div>\n        ) : (\n            <div className=\"bcs-ActivityMessage\">\n                <MessageWrapper>\n                    {formatTaggedMessage(commentToDisplay, id, false, getUserProfileUrl)}\n                    {isEdited && (\n                        <span className=\"bcs-ActivityMessage-edited\">\n                            <FormattedMessage {...messages.activityMessageEdited} />\n                        </span>\n                    )}\n                </MessageWrapper>\n                {translationEnabled ? this.getButton(isTranslation) : null}\n            </div>\n        );\n    }\n}\n\nexport { ActivityMessage };\nexport default withFeatureConsumer(ActivityMessage);\n"],"file":"ActivityMessage.js"}