{"version":3,"sources":["../../../../../../src/elements/content-sidebar/activity-feed/common/activity-message/CollapsableMessage.js"],"names":["React","classNames","CollapsableMessageToggle","CollapsableMessage","children","useState","isCollapsed","setIsCollapsed","shouldCollapse","setShouldCollapse","messageContainer","useRef","useLayoutEffect","current","clientHeight","scrollHeight","prevState"],"mappings":";;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAO,wBAAP;AAMA,eAAe,SAASC,kBAAT,OAAiD;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;;AAAA,wBACtBJ,KAAK,CAACK,QAAN,CAAe,IAAf,CADsB;AAAA;AAAA,MACrDC,WADqD;AAAA,MACxCC,cADwC;;AAAA,yBAEhBP,KAAK,CAACK,QAAN,CAAe,KAAf,CAFgB;AAAA;AAAA,MAErDG,cAFqD;AAAA,MAErCC,iBAFqC;;AAG5D,MAAMC,gBAAgB,GAAGV,KAAK,CAACW,MAAN,CAAoC,IAApC,CAAzB;AAEAX,EAAAA,KAAK,CAACY,eAAN,CAAsB,YAAM;AACxB,QAAIF,gBAAgB,CAACG,OAArB,EAA8B;AAAA,kCACaH,gBAAgB,CAACG,OAD9B;AAAA,UAClBC,YADkB,yBAClBA,YADkB;AAAA,UACJC,YADI,yBACJA,YADI;AAE1BN,MAAAA,iBAAiB,CAACK,YAAY,KAAKC,YAAlB,CAAjB;AACH;AACJ,GALD,EAKG,EALH;AAOA,SACI,0CACI;AACI,IAAA,SAAS,EAAEd,UAAU,CAAC;AAClB,uCAAiCK;AADf,KAAD,CADzB;AAII,IAAA,GAAG,EAAEI;AAJT,KAMKN,QANL,CADJ,EAUKI,cAAc,IACX,oBAAC,wBAAD;AACI,IAAA,MAAM,EAAEF,WADZ;AAEI,IAAA,OAAO,EAAE;AAAA,aAAMC,cAAc,CAAC,UAAAS,SAAS;AAAA,eAAI,CAACA,SAAL;AAAA,OAAV,CAApB;AAAA;AAFb,IAXR,CADJ;AAmBH","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport CollapsableMessageToggle from './CollapsableMessageToggle';\nimport './ActivityMessage.scss';\n\ntype Props = {\n    children: React.Node,\n};\n\nexport default function CollapsableMessage({ children }: Props) {\n    const [isCollapsed, setIsCollapsed] = React.useState(true);\n    const [shouldCollapse, setShouldCollapse] = React.useState(false);\n    const messageContainer = React.useRef<HTMLDivElement | null>(null);\n\n    React.useLayoutEffect(() => {\n        if (messageContainer.current) {\n            const { clientHeight, scrollHeight } = messageContainer.current;\n            setShouldCollapse(clientHeight !== scrollHeight);\n        }\n    }, []);\n\n    return (\n        <>\n            <div\n                className={classNames({\n                    'bcs-ActivityMessage-collapsed': isCollapsed,\n                })}\n                ref={messageContainer}\n            >\n                {children}\n            </div>\n\n            {shouldCollapse && (\n                <CollapsableMessageToggle\n                    isMore={isCollapsed}\n                    onClick={() => setIsCollapsed(prevState => !prevState)}\n                />\n            )}\n        </>\n    );\n}\n"],"file":"CollapsableMessage.js"}