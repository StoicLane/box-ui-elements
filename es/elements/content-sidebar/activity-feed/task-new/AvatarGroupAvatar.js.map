{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/AvatarGroupAvatar.js"],"names":["React","FormattedMessage","classNames","camelCase","IconComplete","IconReject","Avatar","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_COMPLETED","TASK_NEW_NOT_STARTED","messages","StatusIcon","status","rest","AvatarGroupAvatar","memo","user","getAvatarUrl","className","taskAssignmentCompleted"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,kBAA/C,EAAmEC,oBAAnE,QAA+F,uBAA/F;AACA,OAAOC,QAAP,MAAqB,YAArB;AAKA,OAAO,0BAAP;;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAuD;AAAA,MAApDC,MAAoD,QAApDA,MAAoD;AAAA,MAAzCC,IAAyC;;AACtE,UAAQD,MAAR;AACI,SAAKN,iBAAL;AACA,SAAKE,kBAAL;AACI,aAAO,oBAAC,YAAD,EAAkBK,IAAlB,CAAP;;AACJ,SAAKN,iBAAL;AACI,aAAO,oBAAC,UAAD,EAAgBM,IAAhB,CAAP;;AACJ,SAAKJ,oBAAL;AACA;AACI,aAAO,IAAP;AARR;AAUH,CAXD;;AAaA,IAAMK,iBAAiB,GAAGf,KAAK,CAACgB,IAAN,CAAkB;AAAA,MAAGC,IAAH,SAAGA,IAAH;AAAA,MAASJ,MAAT,SAASA,MAAT;AAAA,MAAiBK,YAAjB,SAAiBA,YAAjB;AAAA,MAA+BC,SAA/B,SAA+BA,SAA/B;AAAA,MAA6CL,IAA7C;;AAAA,SACxC;AACI,IAAA,SAAS,EAAEZ,UAAU,CAAC,uBAAD,EAA0BiB,SAA1B,CADzB;AAEI,mBAAY;AAFhB,KAGQL,IAHR,GAKI,oBAAC,MAAD;AACI,IAAA,SAAS,EACL,oBAAC,UAAD;AACI,MAAA,SAAS,YAAKX,SAAS,CAACU,MAAD,CAAd,CADb;AAEI,MAAA,MAAM,EAAEA,MAFZ;AAGI,MAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBF,QAAQ,CAACS,uBAA/B;AAHX,MAFR;AAQI,IAAA,SAAS,EAAC,8BARd;AASI,IAAA,YAAY,EAAEF,YATlB;AAUI,IAAA,IAAI,EAAED;AAVV,IALJ,CADwC;AAAA,CAAlB,CAA1B;AAqBA,eAAeF,iBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport camelCase from 'lodash/camelCase';\nimport IconComplete from '../../../../icons/general/IconVerified';\nimport IconReject from '../../../../icons/general/IconRejected';\nimport Avatar from '../Avatar';\nimport { TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_COMPLETED, TASK_NEW_NOT_STARTED } from '../../../../constants';\nimport messages from './messages';\nimport type { TaskCollabStatus } from '../../../../common/types/tasks';\nimport type { UserMini } from '../../../../common/types/core';\nimport type { GetAvatarUrlCallback } from '../../../common/flowTypes';\n\nimport './AvatarGroupAvatar.scss';\n\ntype Props = {\n    className?: string,\n    getAvatarUrl?: GetAvatarUrlCallback,\n    status: TaskCollabStatus,\n    user: UserMini,\n};\n\nconst StatusIcon = ({ status, ...rest }: { status: TaskCollabStatus }) => {\n    switch (status) {\n        case TASK_NEW_APPROVED:\n        case TASK_NEW_COMPLETED:\n            return <IconComplete {...rest} />;\n        case TASK_NEW_REJECTED:\n            return <IconReject {...rest} />;\n        case TASK_NEW_NOT_STARTED:\n        default:\n            return null;\n    }\n};\n\nconst AvatarGroupAvatar = React.memo<Props>(({ user, status, getAvatarUrl, className, ...rest }: Props) => (\n    <div\n        className={classNames('bcs-AvatarGroupAvatar', className)}\n        data-testid=\"avatar-group-avatar-container\"\n        {...rest}\n    >\n        <Avatar\n            badgeIcon={\n                <StatusIcon\n                    className={`${camelCase(status)}`}\n                    status={status}\n                    title={<FormattedMessage {...messages.taskAssignmentCompleted} />}\n                />\n            }\n            className=\"bcs-AvatarGroupAvatar-avatar\"\n            getAvatarUrl={getAvatarUrl}\n            user={user}\n        />\n    </div>\n));\n\nexport default AvatarGroupAvatar;\n"],"file":"AvatarGroupAvatar.js"}