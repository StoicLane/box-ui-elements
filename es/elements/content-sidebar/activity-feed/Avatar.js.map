{"version":3,"sources":["../../../../src/elements/content-sidebar/activity-feed/Avatar.js"],"names":["React","AvatarComponent","Avatar","avatarUrl","isMounted","setState","props","user","getAvatarUrl","avatar_url","id","avatarPromise","Promise","resolve","then","getAvatarUrlHandler","badgeIcon","className","state","name","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;;IAeMC,M;;;;;;;;;;;;;;;;;;4DACM;AACJC,MAAAA,SAAS,EAAE;AADP,K;;gEAIa,K;;0EAOC,UAACA,SAAD,EAAwB;AAC1C,UAAI,MAAKC,SAAT,EAAoB;AAChB,cAAKC,QAAL,CAAc;AACVF,UAAAA,SAAS,EAATA;AADU,SAAd;AAGH;AACJ,K;;;;;;;;AAED;;;;;mCAKiC;AAAA,wBACc,KAAKG,KADnB;AAAA,yCACrBC,IADqB;AAAA,UACrBA,IADqB,iCACd,EADc;AAAA,UACVC,YADU,eACVA,YADU;AAAA,6BAEKD,IAFL,CAErBE,UAFqB;AAAA,UAErBA,UAFqB,iCAER,IAFQ;AAAA,UAEFC,EAFE,GAEKH,IAFL,CAEFG,EAFE;AAI7B,UAAMC,aAAa,GAAGD,EAAE,IAAIF,YAAN,GAAqBA,YAAY,WAAIE,EAAJ,EAAjC,GAA6CE,OAAO,CAACC,OAAR,CAAgBJ,UAAhB,CAAnE;AACA,aAAOE,aAAa,CAACG,IAAd,CAAmB,KAAKC,mBAAxB,CAAP;AACH;;;wCAEmB;AAChB,WAAKX,SAAL,GAAiB,IAAjB;AACA,WAAKI,YAAL;AACH;;;2CAEsB;AACnB,WAAKJ,SAAL,GAAiB,KAAjB;AACH;;;6BAEQ;AAAA,yBACyC,KAAKE,KAD9C;AAAA,UACGU,SADH,gBACGA,SADH;AAAA,UACcC,SADd,gBACcA,SADd;AAAA,UACyBV,IADzB,gBACyBA,IADzB;AAAA,UAEGJ,SAFH,GAEwB,KAAKe,KAF7B,CAEGf,SAFH;AAAA,UAGGO,EAHH,GAGgBH,IAHhB,CAGGG,EAHH;AAAA,UAGOS,IAHP,GAGgBZ,IAHhB,CAGOY,IAHP;AAKL,aACI,oBAAC,eAAD;AAAiB,QAAA,SAAS,EAAEhB,SAA5B;AAAuC,QAAA,SAAS,EAAEa,SAAlD;AAA6D,QAAA,SAAS,EAAEC,SAAxE;AAAmF,QAAA,EAAE,EAAEP,EAAvF;AAA2F,QAAA,IAAI,EAAES;AAAjG,QADJ;AAGH;;;;EAlDgBnB,KAAK,CAACoB,a;;AAqD3B,eAAelB,MAAf","sourcesContent":["/**\n * @flow\n * @file avatar component\n * @author Box\n */\nimport * as React from 'react';\nimport AvatarComponent from '../../../components/avatar';\nimport type { GetAvatarUrlCallback } from '../../common/flowTypes';\nimport type { User } from '../../../common/types/core';\n\ntype Props = {\n    badgeIcon?: React.Element<any>,\n    className?: string,\n    getAvatarUrl?: GetAvatarUrlCallback,\n    user: User,\n};\n\ntype State = {\n    avatarUrl?: ?string,\n};\n\nclass Avatar extends React.PureComponent<Props, State> {\n    state = {\n        avatarUrl: null,\n    };\n\n    isMounted: boolean = false;\n\n    /**\n     * Success handler for getting avatar url\n     *\n     * @param {string} avatarUrl the user avatar url\n     */\n    getAvatarUrlHandler = (avatarUrl: ?string) => {\n        if (this.isMounted) {\n            this.setState({\n                avatarUrl,\n            });\n        }\n    };\n\n    /**\n     * Gets the avatar URL for the user from the getAvatarUrl prop\n     *\n     * @return {Promise<?string>} Promise which resolve with the avatar url string\n     */\n    getAvatarUrl(): Promise<?string> {\n        const { user = {}, getAvatarUrl }: Props = this.props;\n        const { avatar_url = null, id } = user;\n\n        const avatarPromise = id && getAvatarUrl ? getAvatarUrl(`${id}`) : Promise.resolve(avatar_url);\n        return avatarPromise.then(this.getAvatarUrlHandler);\n    }\n\n    componentDidMount() {\n        this.isMounted = true;\n        this.getAvatarUrl();\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    render() {\n        const { badgeIcon, className, user }: Props = this.props;\n        const { avatarUrl }: State = this.state;\n        const { id, name } = user;\n\n        return (\n            <AvatarComponent avatarUrl={avatarUrl} badgeIcon={badgeIcon} className={className} id={id} name={name} />\n        );\n    }\n}\n\nexport default Avatar;\n"],"file":"Avatar.js"}