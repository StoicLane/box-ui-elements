{"version":3,"sources":["../../../src/elements/content-uploader/OverallUploadsProgressBar.js"],"names":["React","FormattedMessage","messages","ProgressBar","UploadsManagerItemAction","VIEW_UPLOAD_IN_PROGRESS","VIEW_UPLOAD_SUCCESS","VIEW_ERROR","VIEW_UPLOAD_EMPTY","getUploadStatus","view","uploadsManagerUploadInProgress","uploadsManagerUploadComplete","uploadsManagerUploadPrompt","uploadsManagerUploadFailed","getPercent","percent","OverallUploadsProgressBar","customPrompt","hasMultipleFailedUploads","isDragging","isExpanded","isResumeVisible","isVisible","onClick","onKeyDown","onUploadsManagerActionClick","shouldShowPrompt","message","status","updatedPercent"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,wBAAP,MAAqC,wBAArC;AACA,SAASC,uBAAT,EAAkCC,mBAAlC,EAAuDC,UAAvD,EAAmEC,iBAAnE,QAA4F,iBAA5F;AAGA,OAAO,kCAAP;AAEA;;;;;;;AAMA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAkB;AACtC,UAAQA,IAAR;AACI,SAAKL,uBAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBH,QAAQ,CAACS,8BAA/B,CAAP;;AACJ,SAAKL,mBAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBJ,QAAQ,CAACU,4BAA/B,CAAP;;AACJ,SAAKJ,iBAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBN,QAAQ,CAACW,0BAA/B,CAAP;;AACJ,SAAKN,UAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBL,QAAQ,CAACY,0BAA/B,CAAP;;AACJ;AACI,aAAO,EAAP;AAVR;AAYH,CAbD;AAeA;;;;;;;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACL,IAAD,EAAeM,OAAf,EAA2C;AAC1D,UAAQN,IAAR;AACI,SAAKJ,mBAAL;AACI,aAAO,GAAP;;AACJ,SAAKE,iBAAL;AACA,SAAKD,UAAL;AACI,aAAO,CAAP;;AACJ;AACI,aAAOS,OAAP;AAPR;AASH,CAVD;;AA0BA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,OAYrB;AAAA,MAXTC,YAWS,QAXTA,YAWS;AAAA,MAVTC,wBAUS,QAVTA,wBAUS;AAAA,MATTC,UASS,QATTA,UASS;AAAA,MARTC,UAQS,QARTA,UAQS;AAAA,MAPTC,eAOS,QAPTA,eAOS;AAAA,MANTC,SAMS,QANTA,SAMS;AAAA,MALTC,OAKS,QALTA,OAKS;AAAA,MAJTC,SAIS,QAJTA,SAIS;AAAA,MAHTC,2BAGS,QAHTA,2BAGS;AAAA,MAFTV,OAES,QAFTA,OAES;AAAA,MADTN,IACS,QADTA,IACS;AACT;AACA;AACA,MAAMiB,gBAAgB,GAAGP,UAAU,IAAI,CAACG,SAAxC;AACA,MAAMK,OAAO,GAAGV,YAAY,IAAIhB,QAAQ,CAACW,0BAAzC;AACA,MAAMgB,MAAM,GAAGF,gBAAgB,GAAG,oBAAC,gBAAD,EAAsBC,OAAtB,CAAH,GAAuCnB,eAAe,CAACC,IAAD,CAArF;AACA,MAAMoB,cAAc,GAAGH,gBAAgB,GAAG,CAAH,GAAOZ,UAAU,CAACL,IAAD,EAAOM,OAAP,CAAxD;AAEA,SACI;AACI,IAAA,SAAS,EAAC,0BADd;AAEI,yBAAmBK,UAAU,GAAG,gBAAH,GAAsB,cAFvD;AAGI,IAAA,OAAO,EAAEG,OAHb;AAII,IAAA,SAAS,EAAEC,SAJf;AAKI,IAAA,IAAI,EAAC,QALT;AAMI,IAAA,QAAQ,EAAEF,SAAS,GAAG,GAAH,GAAS;AANhC,KAQI;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAqCM,MAArC,CARJ,EASI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEC;AAAtB,IATJ,EAUKR,eAAe,IACZ,oBAAC,wBAAD;AACI,IAAA,wBAAwB,EAAEH,wBAD9B;AAEI,IAAA,OAAO,EAAEO;AAFb,IAXR,EAgBI;AAAM,IAAA,SAAS,EAAC;AAAhB,IAhBJ,CADJ;AAoBH,CAxCD;;AA0CA,eAAeT,yBAAf","sourcesContent":["/**\n * @flow\n * @file Overall uploads progress bar\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport ProgressBar from './ProgressBar';\nimport UploadsManagerItemAction from './UploadsManagerAction';\nimport { VIEW_UPLOAD_IN_PROGRESS, VIEW_UPLOAD_SUCCESS, VIEW_ERROR, VIEW_UPLOAD_EMPTY } from '../../constants';\nimport type { View } from '../../common/types/core';\n\nimport './OverallUploadsProgressBar.scss';\n\n/**\n * Get upload status\n *\n * @param {View} view\n * @return {FormattedMessage|string}\n */\nconst getUploadStatus = (view: string) => {\n    switch (view) {\n        case VIEW_UPLOAD_IN_PROGRESS:\n            return <FormattedMessage {...messages.uploadsManagerUploadInProgress} />;\n        case VIEW_UPLOAD_SUCCESS:\n            return <FormattedMessage {...messages.uploadsManagerUploadComplete} />;\n        case VIEW_UPLOAD_EMPTY:\n            return <FormattedMessage {...messages.uploadsManagerUploadPrompt} />;\n        case VIEW_ERROR:\n            return <FormattedMessage {...messages.uploadsManagerUploadFailed} />;\n        default:\n            return '';\n    }\n};\n\n/**\n * Get overall upload progress percentage\n *\n * @param {string} view\n * @param {number} percent\n */\nconst getPercent = (view: string, percent: number): number => {\n    switch (view) {\n        case VIEW_UPLOAD_SUCCESS:\n            return 100;\n        case VIEW_UPLOAD_EMPTY:\n        case VIEW_ERROR:\n            return 0;\n        default:\n            return percent;\n    }\n};\n\ntype Props = {\n    customPrompt?: { defaultMessage: string, description: string, id: string },\n    hasMultipleFailedUploads: boolean,\n    isDragging: boolean,\n    isExpanded: boolean,\n    isResumeVisible: boolean,\n    isVisible: boolean,\n    onClick: Function,\n    onKeyDown: Function,\n    onUploadsManagerActionClick: Function,\n    percent: number,\n    view: View,\n};\n\nconst OverallUploadsProgressBar = ({\n    customPrompt,\n    hasMultipleFailedUploads,\n    isDragging,\n    isExpanded,\n    isResumeVisible,\n    isVisible,\n    onClick,\n    onKeyDown,\n    onUploadsManagerActionClick,\n    percent,\n    view,\n}: Props) => {\n    // Show the upload prompt and set progress to 0 when the uploads manager\n    // is invisible or is having files dragged to it\n    const shouldShowPrompt = isDragging || !isVisible;\n    const message = customPrompt || messages.uploadsManagerUploadPrompt;\n    const status = shouldShowPrompt ? <FormattedMessage {...message} /> : getUploadStatus(view);\n    const updatedPercent = shouldShowPrompt ? 0 : getPercent(view, percent);\n\n    return (\n        <div\n            className=\"bcu-overall-progress-bar\"\n            data-resin-target={isExpanded ? 'uploadcollapse' : 'uploadexpand'}\n            onClick={onClick}\n            onKeyDown={onKeyDown}\n            role=\"button\"\n            tabIndex={isVisible ? '0' : '-1'}\n        >\n            <span className=\"bcu-upload-status\">{status}</span>\n            <ProgressBar percent={updatedPercent} />\n            {isResumeVisible && (\n                <UploadsManagerItemAction\n                    hasMultipleFailedUploads={hasMultipleFailedUploads}\n                    onClick={onUploadsManagerActionClick}\n                />\n            )}\n            <span className=\"bcu-uploads-manager-toggle\" />\n        </div>\n    );\n};\n\nexport default OverallUploadsProgressBar;\n"],"file":"OverallUploadsProgressBar.js"}