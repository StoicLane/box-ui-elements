{"version":3,"sources":["../../../src/components/datalist-item/DatalistItem.tsx"],"names":["React","classNames","omit","uniqueId","DatalistItem","props","setActiveItemID","id","isActive","prevProps","children","className","isSelected","rest","classes","itemProps","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAO,qBAAP;;IAmBMC,Y;;;;;AACF,wBAAYC,KAAZ,EAAsC;AAAA;;AAAA;;AAClC,sFAAMA,KAAN;;AADkC,sEAiBpB,YAAM;AAAA,UACZC,eADY,GACQ,MAAKD,KADb,CACZC,eADY;;AAGpB,UAAIA,eAAJ,EAAqB;AACjBA,QAAAA,eAAe,CAAC,MAAKC,EAAN,CAAf;AACH;AACJ,KAvBqC;;AAElC,UAAKA,EAAL,GAAUJ,QAAQ,CAAC,cAAD,CAAlB;AAFkC;AAGrC;;;;wCAEmB;AAChB,UAAI,KAAKE,KAAL,CAAWG,QAAf,EAAyB;AACrB,aAAKF,eAAL;AACH;AACJ;;;uCAEkBG,S,EAA8B;AAC7C,UAAI,KAAKJ,KAAL,CAAWG,QAAX,IAAuB,CAACC,SAAS,CAACD,QAAtC,EAAgD;AAC5C,aAAKF,eAAL;AACH;AACJ;;;6BAYQ;AAAA,wBAC0D,KAAKD,KAD/D;AAAA,UACGK,QADH,eACGA,QADH;AAAA,UACaC,SADb,eACaA,SADb;AAAA,UACwBH,QADxB,eACwBA,QADxB;AAAA,UACkCI,UADlC,eACkCA,UADlC;AAAA,UACiDC,IADjD;;AAEL,UAAMC,OAAO,GAAGb,UAAU,CACtB,eADsB,EAEtB;AACI,qBAAaO;AADjB,OAFsB,EAKtBG,SALsB,CAA1B;AAOA,UAAMI,SAAS,GAAGb,IAAI,CAACW,IAAD,EAAO,CAAC,eAAD,EAAkB,iBAAlB,CAAP,CAAtB;AAEA;AACA;;AACA,aACI,uCAAQE,SAAR;AAAmB,QAAA,SAAS,EAAED,OAA9B;AAAuC,QAAA,EAAE,EAAE,KAAKP,EAAhD;AAAoD,QAAA,IAAI,EAAC,QAAzD;AAAkE,yBAAeK;AAAjF,UACKF,QADL,CADJ;AAKA;AACH;;;;EA/CsBV,KAAK,CAACgB,S;;AAkDjC,eAAeZ,YAAf","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport uniqueId from 'lodash/uniqueId';\n\nimport './DatalistItem.scss';\n\nexport interface DatalistItemProps {\n    /** Content to render in the list item */\n    children: React.ReactNode;\n\n    /** CSS class for the list item */\n    className?: string;\n\n    /** Set by a parent datalist component to indicate when the item is highlighted (but not necessarily selected) */\n    isActive?: boolean;\n\n    /** Set by a parent datalist component to indicate when the item is selected */\n    isSelected?: boolean;\n\n    /** Set by a parent datalist component to receive the updated active item ID */\n    setActiveItemID?: (id: string) => void;\n}\n\nclass DatalistItem extends React.Component<DatalistItemProps> {\n    constructor(props: DatalistItemProps) {\n        super(props);\n        this.id = uniqueId('datalistitem');\n    }\n\n    componentDidMount() {\n        if (this.props.isActive) {\n            this.setActiveItemID();\n        }\n    }\n\n    componentDidUpdate(prevProps: DatalistItemProps) {\n        if (this.props.isActive && !prevProps.isActive) {\n            this.setActiveItemID();\n        }\n    }\n\n    setActiveItemID = () => {\n        const { setActiveItemID } = this.props;\n\n        if (setActiveItemID) {\n            setActiveItemID(this.id);\n        }\n    };\n\n    id: string;\n\n    render() {\n        const { children, className, isActive, isSelected, ...rest } = this.props;\n        const classes = classNames(\n            'datalist-item',\n            {\n                'is-active': isActive,\n            },\n            className,\n        );\n        const itemProps = omit(rest, ['closeDropdown', 'setActiveItemID']);\n\n        /* eslint-disable jsx-a11y/role-has-required-aria-props */\n        // required aria props are added dynamically\n        return (\n            <li {...itemProps} className={classes} id={this.id} role=\"option\" aria-selected={isSelected}>\n                {children}\n            </li>\n        );\n        /* eslint-enable jsx-a11y/role-has-required-aria-props */\n    }\n}\n\nexport default DatalistItem;\n"],"file":"DatalistItem.js"}