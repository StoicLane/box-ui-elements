{"version":3,"sources":["../../../src/components/search-form/SearchForm.js"],"names":["React","defineMessages","injectIntl","classNames","omit","ClearBadge16","Search16","makeLoadable","messages","clearButtonTitle","searchButtonTitle","searchLabel","SearchFormBase","isEmpty","event","props","onChange","shouldPreventClearEventPropagation","stopPropagation","searchInput","value","setState","target","trim","length","elements","onSubmit","element","getSearchInput","action","className","innerRef","intl","isLoading","method","name","queryParams","useClearButton","rest","state","inputProps","formatMessage","classes","formClassNames","hiddenInputs","Object","keys","map","param","index","SearchActions","onClearHandler","LoadableSearchActions","onChangeStub","onChangeHandler","onSubmitHandler","setInputRef","Component","SearchFormBaseIntl","SearchForm","forwardRef","ref","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AAEA,OAAOC,YAAP,MAAyB,mCAAzB;AAEA,OAAO,mBAAP;AAEA,IAAMC,QAAQ,GAAGP,cAAc,CAAC;AAC5BQ,EAAAA,gBAAgB;AAAA;AAAA;AAAA,GADY;AAM5BC,EAAAA,iBAAiB;AAAA;AAAA;AAAA,GANW;AAW5BC,EAAAA,WAAW;AAAA;AAAA;AAAA;AAXiB,CAAD,CAA/B;;IA8DMC,c;;;;;;;;;;;;;;;;;;4DASM;AACJC,MAAAA,OAAO,EAAE;AADL,K;;qEAgBS,UAACC,KAAD,EAA6B;AAAA,wBACe,MAAKC,KADpB;AAAA,UAClCC,QADkC,eAClCA,QADkC;AAAA,UACxBC,kCADwB,eACxBA,kCADwB;;AAE1C,UAAIA,kCAAJ,EAAwC;AACpCH,QAAAA,KAAK,CAACI,eAAN;AACH;;AAED,UAAI,MAAKC,WAAT,EAAsB;AAClB,cAAKA,WAAL,CAAiBC,KAAjB,GAAyB,EAAzB;AACH;;AACD,YAAKC,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAd;;AAEA,UAAIG,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,K;;sEAEiB,gBAAgB;AAAA,UAAbM,MAAa,QAAbA,MAAa;AAAA,UACtBF,KADsB,GACZE,MADY,CACtBF,KADsB;AAAA,UAEtBJ,QAFsB,GAET,MAAKD,KAFI,CAEtBC,QAFsB;;AAG9B,YAAKK,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE,CAACO,KAAD,IAAU,CAACA,KAAK,CAACG,IAAN,GAAaC;AAAnC,OAAd;;AAEA,UAAIR,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACI,KAAD,CAAR;AACH;AACJ,K;;sEAEiB,UAAAN,KAAK,EAAI;AAAA,UACfM,KADe,GACLN,KAAK,CAACQ,MAAN,CAAaG,QAAb,CAAsB,CAAtB,CADK,CACfL,KADe;AAAA,UAEfM,QAFe,GAEF,MAAKX,KAFH,CAEfW,QAFe;;AAIvB,UAAIA,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACN,KAAD,EAAQN,KAAR,CAAR;AACH;AACJ,K;;kEAEa,UAAAa,OAAO,EAAI;AACrB,YAAKR,WAAL,GAAmBQ,OAAnB;;AAEA,UAAI,MAAKZ,KAAL,CAAWa,cAAf,EAA+B;AAC3B,cAAKb,KAAL,CAAWa,cAAX,CAA0B,MAAKT,WAA/B;AACH;AACJ,K;;;;;;;6BAIQ;AAAA;;AAAA,yBAaD,KAAKJ,KAbJ;AAAA,UAEDc,MAFC,gBAEDA,MAFC;AAAA,UAGDC,SAHC,gBAGDA,SAHC;AAAA,UAIDC,QAJC,gBAIDA,QAJC;AAAA,UAKDC,IALC,gBAKDA,IALC;AAAA,UAMDC,SANC,gBAMDA,SANC;AAAA,UAODC,MAPC,gBAODA,MAPC;AAAA,UAQDC,IARC,gBAQDA,IARC;AAAA,UASDC,WATC,gBASDA,WATC;AAAA,UAUDV,QAVC,gBAUDA,QAVC;AAAA,UAWDW,cAXC,gBAWDA,cAXC;AAAA,UAYEC,IAZF;;AAAA,UAcGzB,OAdH,GAce,KAAK0B,KAdpB,CAcG1B,OAdH;AAgBL,UAAM2B,UAAU,GAAGpC,IAAI,CAACkC,IAAD,EAAO,CAC1B,gBAD0B,EAE1B,UAF0B,EAG1B,UAH0B,EAI1B,UAJ0B,EAK1B,oCAL0B,CAAP,CAAvB;AAhBK,UAwBGG,aAxBH,GAwBqBT,IAxBrB,CAwBGS,aAxBH;AAyBL,UAAMC,OAAO,GAAGvC,UAAU,CAAC2B,SAAD,EAAY,wBAAZ,CAA1B;AACA,UAAMa,cAAc,GAAGxC,UAAU,CAAC,aAAD,EAAgB;AAC7C,oBAAYU,OADiC;AAE7C,4BAAoBwB;AAFyB,OAAhB,CAAjC;AAIA,UAAMO,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYV,WAAZ,EAAyBW,GAAzB,CAA6B,UAACC,KAAD,EAAQC,KAAR;AAAA,eAC9C;AAAO,UAAA,GAAG,EAAEA,KAAZ;AAAmB,UAAA,IAAI,EAAED,KAAzB;AAAgC,UAAA,IAAI,EAAC,QAArC;AAA8C,UAAA,KAAK,EAAEZ,WAAW,CAACY,KAAD;AAAhE,UAD8C;AAAA,OAA7B,CAArB;;AAIA,UAAME,aAAa,GAAG,SAAhBA,aAAgB;AAAA,eAClB;AAAK,UAAA,SAAS,EAAC;AAAf,WACKxB,QAAQ,GACL;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,SAAS,EAAC,6BAFd;AAGI,UAAA,KAAK,EAAEe,aAAa,CAACjC,QAAQ,CAACE,iBAAV;AAHxB,WAKI,oBAAC,QAAD,OALJ,CADK,GASL;AAAK,UAAA,SAAS,EAAC;AAAf,WACI,oBAAC,QAAD,OADJ,CAVR,EAeI;AACI,UAAA,SAAS,EAAC,4BADd;AAEI,UAAA,OAAO,EAAE,MAAI,CAACyC,cAFlB;AAGI,UAAA,KAAK,EAAEV,aAAa,CAACjC,QAAQ,CAACC,gBAAV,CAHxB;AAII,UAAA,IAAI,EAAC;AAJT,WAMI,oBAAC,YAAD,OANJ,CAfJ,CADkB;AAAA,OAAtB;;AA2BA,UAAM2C,qBAAqB,GAAG7C,YAAY,CAAC2C,aAAD,CAA1C,CA7DK,CA+DL;;AACA,UAAMG,YAAY,GAAG,SAAfA,YAAe,GAAM,CAAE,CAA7B;;AAEA,aACI;AAAK,QAAA,GAAG,EAAEtB,QAAV;AAAoB,QAAA,SAAS,EAAEW;AAA/B,SACI;AACI,QAAA,MAAM,EAAEb,MADZ;AAEI,QAAA,SAAS,EAAEc,cAFf;AAGI,QAAA,MAAM,EAAET,MAHZ;AAII,QAAA,QAAQ,EAAE,KAAKoB,eAJnB;AAKI,QAAA,QAAQ,EAAE,KAAKC,eALnB;AAMI,QAAA,IAAI,EAAC;AANT,SAQI;AACI,QAAA,GAAG,EAAE,KAAKC,WADd;AAEI,sBAAYf,aAAa,CAACjC,QAAQ,CAACG,WAAV,CAF7B;AAGI,QAAA,YAAY,EAAC,KAHjB;AAII,QAAA,SAAS,EAAC,cAJd;AAKI,QAAA,IAAI,EAAEwB,IALV;AAMI,QAAA,QAAQ,EAAEkB,YANd;AAOI,QAAA,IAAI,EAAC;AAPT,SAQQb,UARR,EARJ,EAkBI,oBAAC,qBAAD;AACI,QAAA,SAAS,EAAEP,SADf;AAEI,QAAA,qBAAqB,EAAE;AACnBH,UAAAA,SAAS,EAAE;AADQ;AAF3B,QAlBJ,EAwBKc,YAxBL,CADJ,CADJ;AA8BH;;;6CAzJ+B7B,K,EAAmB;AAAA,UACvCK,KADuC,GAC7BL,KAD6B,CACvCK,KADuC;;AAG/C,UAAIA,KAAK,IAAI,CAAC,CAACA,KAAK,CAACG,IAAN,EAAf,EAA6B;AACzB,eAAO;AACHV,UAAAA,OAAO,EAAE;AADN,SAAP;AAGH;;AAED,aAAO,IAAP;AACH;;;;EAvBwBb,KAAK,CAACyD,S;;gBAA7B7C,c,kBACkC;AAChCiB,EAAAA,MAAM,EAAE,EADwB;AAEhCK,EAAAA,MAAM,EAAE,KAFwB;AAGhCC,EAAAA,IAAI,EAAE,QAH0B;AAIhCC,EAAAA,WAAW,EAAE,EAJmB;AAKhCC,EAAAA,cAAc,EAAE;AALgB,C;;AAwKxC,IAAMqB,kBAAkB,GAAGxD,UAAU,CAACU,cAAD,CAArC;AACA,SAAS8C,kBAAT;AAEA,IAAMC,UAAU,GAAG3D,KAAK,CAAC4D,UAAN,CAAyC,UAAC7C,KAAD,EAAgB8C,GAAhB;AAAA,SACxD,oBAAC,kBAAD,eAAwB9C,KAAxB;AAA+B,IAAA,QAAQ,EAAE8C;AAAzC,KADwD;AAAA,CAAzC,CAAnB;AAGAF,UAAU,CAACG,WAAX,GAAyB,YAAzB;AAEA,eAAeH,UAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport ClearBadge16 from '../../icon/fill/ClearBadge16';\nimport Search16 from '../../icon/fill/Search16';\n\nimport makeLoadable from '../loading-indicator/makeLoadable';\n\nimport './SearchForm.scss';\n\nconst messages = defineMessages({\n    clearButtonTitle: {\n        defaultMessage: 'Clear',\n        description: 'Title for a clear button',\n        id: 'boxui.searchForm.clearButtonTitle',\n    },\n    searchButtonTitle: {\n        defaultMessage: 'Search',\n        description: 'Title for a search button',\n        id: 'boxui.searchForm.searchButtonTitle',\n    },\n    searchLabel: {\n        defaultMessage: 'Search query',\n        description: 'Label for a search input',\n        id: 'boxui.searchForm.searchLabel',\n    },\n});\n\ntype Props = {\n    /** Form submit action */\n    action?: string,\n    className?: string,\n    getSearchInput?: Function,\n    innerRef?: React.Ref<any>,\n    intl: Object,\n    isLoading?: boolean,\n    /** The way to send the form data, get or post */\n    method?: 'get' | 'post',\n    /** Name of the text input */\n    name?: string,\n    /** On change handler for the search input, debounced by 250ms */\n    onChange?: Function,\n    /** On submit handler for the search input */\n    onSubmit?: Function,\n    /** Extra query parameters in addition to the form data */\n    queryParams: { [arg: string]: string },\n    /** Boolean to prevent propogation of search clear action */\n    shouldPreventClearEventPropagation?: boolean,\n    /** If the clear button is shown when input field is not empty */\n    useClearButton?: boolean,\n    /** The value of the input if controlled */\n    value?: string,\n};\n\ntype DefaultProps = {\n    action: string,\n    method: 'get' | 'post',\n    name: string,\n    queryParams: { [arg: string]: string },\n    useClearButton: boolean,\n};\n\ntype IntlProps = {\n    intl: Object,\n};\n\ntype State = {\n    isEmpty: boolean,\n};\n\ntype Config = React.Config<Props, DefaultProps & IntlProps>;\n\nclass SearchFormBase extends React.Component<Props, State> {\n    static defaultProps: DefaultProps = {\n        action: '',\n        method: 'get',\n        name: 'search',\n        queryParams: {},\n        useClearButton: false,\n    };\n\n    state = {\n        isEmpty: true,\n    };\n\n    static getDerivedStateFromProps(props: Props): any {\n        const { value } = props;\n\n        if (value && !!value.trim()) {\n            return {\n                isEmpty: true,\n            };\n        }\n\n        return null;\n    }\n\n    onClearHandler = (event: SyntheticEvent<>) => {\n        const { onChange, shouldPreventClearEventPropagation } = this.props;\n        if (shouldPreventClearEventPropagation) {\n            event.stopPropagation();\n        }\n\n        if (this.searchInput) {\n            this.searchInput.value = '';\n        }\n        this.setState({ isEmpty: true });\n\n        if (onChange) {\n            onChange('');\n        }\n    };\n\n    onChangeHandler = ({ target }) => {\n        const { value } = target;\n        const { onChange } = this.props;\n        this.setState({ isEmpty: !value || !value.trim().length });\n\n        if (onChange) {\n            onChange(value);\n        }\n    };\n\n    onSubmitHandler = event => {\n        const { value } = event.target.elements[0];\n        const { onSubmit } = this.props;\n\n        if (onSubmit) {\n            onSubmit(value, event);\n        }\n    };\n\n    setInputRef = element => {\n        this.searchInput = element;\n\n        if (this.props.getSearchInput) {\n            this.props.getSearchInput(this.searchInput);\n        }\n    };\n\n    searchInput: ?HTMLInputElement;\n\n    render() {\n        const {\n            action,\n            className,\n            innerRef,\n            intl,\n            isLoading,\n            method,\n            name,\n            queryParams,\n            onSubmit,\n            useClearButton,\n            ...rest\n        } = this.props;\n        const { isEmpty } = this.state;\n\n        const inputProps = omit(rest, [\n            'getSearchInput',\n            'onChange',\n            'onSubmit',\n            'required',\n            'shouldPreventClearEventPropagation',\n        ]);\n\n        const { formatMessage } = intl;\n        const classes = classNames(className, 'search-input-container');\n        const formClassNames = classNames('search-form', {\n            'is-empty': isEmpty,\n            'use-clear-button': useClearButton,\n        });\n        const hiddenInputs = Object.keys(queryParams).map((param, index) => (\n            <input key={index} name={param} type=\"hidden\" value={queryParams[param]} />\n        ));\n\n        const SearchActions = () => (\n            <div className=\"action-buttons\">\n                {onSubmit ? (\n                    <button\n                        type=\"submit\"\n                        className=\"action-button search-button\"\n                        title={formatMessage(messages.searchButtonTitle)}\n                    >\n                        <Search16 />\n                    </button>\n                ) : (\n                    <div className=\"action-button search-button\">\n                        <Search16 />\n                    </div>\n                )}\n\n                <button\n                    className=\"action-button clear-button\"\n                    onClick={this.onClearHandler}\n                    title={formatMessage(messages.clearButtonTitle)}\n                    type=\"button\"\n                >\n                    <ClearBadge16 />\n                </button>\n            </div>\n        );\n\n        const LoadableSearchActions = makeLoadable(SearchActions);\n\n        // @NOTE Prevent errors from React about controlled inputs\n        const onChangeStub = () => {};\n\n        return (\n            <div ref={innerRef} className={classes}>\n                <form\n                    action={action}\n                    className={formClassNames}\n                    method={method}\n                    onChange={this.onChangeHandler}\n                    onSubmit={this.onSubmitHandler}\n                    role=\"search\"\n                >\n                    <input\n                        ref={this.setInputRef}\n                        aria-label={formatMessage(messages.searchLabel)}\n                        autoComplete=\"off\"\n                        className=\"search-input\"\n                        name={name}\n                        onChange={onChangeStub}\n                        type=\"search\"\n                        {...inputProps}\n                    />\n                    <LoadableSearchActions\n                        isLoading={isLoading}\n                        loadingIndicatorProps={{\n                            className: 'search-form-loading-indicator',\n                        }}\n                    />\n                    {hiddenInputs}\n                </form>\n            </div>\n        );\n    }\n}\n\nconst SearchFormBaseIntl = injectIntl(SearchFormBase);\nexport { SearchFormBaseIntl };\n\nconst SearchForm = React.forwardRef<Config, HTMLDivElement>((props: Config, ref: React.Ref<any>) => (\n    <SearchFormBaseIntl {...props} innerRef={ref} />\n));\nSearchForm.displayName = 'SearchForm';\n\nexport default SearchForm;\n"],"file":"SearchForm.js"}