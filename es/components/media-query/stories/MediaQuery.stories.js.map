{"version":3,"sources":["../../../../src/components/media-query/stories/MediaQuery.stories.js"],"names":["React","VIEW_SIZE_TYPE","notes","useMediaQuery","withMediaQuery","CustomHook","hover","isTouchDevice","pointer","size","viewWidth","viewHeight","String","small","medium","large","xlarge","DemoComponent","props","HigherOrderComponent","title","component","parameters","viewport","defaultViewport"],"mappings":"AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,uBAC2CF,aAAa,EADxD;AAAA,MACpBG,KADoB,kBACpBA,KADoB;AAAA,MACbC,aADa,kBACbA,aADa;AAAA,MACEC,OADF,kBACEA,OADF;AAAA,MACWC,IADX,kBACWA,IADX;AAAA,MACiBC,SADjB,kBACiBA,SADjB;AAAA,MAC4BC,UAD5B,kBAC4BA,UAD5B;;AAG5B,SACI,iCACI,+BACI,wCADJ,EAEI,6CAAWL,KAAX,EAFJ,CADJ,EAKI,+BACI,0CADJ,EAEI,6CAAWE,OAAX,EAFJ,CALJ,EASI,+BACI,kDADJ,EAEI,6CAAWI,MAAM,CAACL,aAAD,CAAjB,EAFJ,CATJ,EAaI,+BACI,kDADJ,EAEI,6CAAWG,SAAX,sBAAgCC,UAAhC,YAFJ,CAbJ,EAiBKF,IAAI,KAAKR,cAAc,CAACY,KAAxB,IAAiC,qDAjBtC,EAkBKJ,IAAI,KAAKR,cAAc,CAACa,MAAxB,IAAkC,sDAlBvC,EAmBKL,IAAI,KAAKR,cAAc,CAACc,KAAxB,IAAiC,qDAnBtC,EAoBKN,IAAI,KAAKR,cAAc,CAACe,MAAxB,IAAkC,sDApBvC,CADJ;AAwBH,CA3BM;;AAuCP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAkB;AAAA,MAC5BZ,KAD4B,GACmCY,KADnC,CAC5BZ,KAD4B;AAAA,MACrBC,aADqB,GACmCW,KADnC,CACrBX,aADqB;AAAA,MACNC,OADM,GACmCU,KADnC,CACNV,OADM;AAAA,MACGC,IADH,GACmCS,KADnC,CACGT,IADH;AAAA,MACSC,SADT,GACmCQ,KADnC,CACSR,SADT;AAAA,MACoBC,UADpB,GACmCO,KADnC,CACoBP,UADpB;AAGpC,SACI,iCACI,+BACI,wCADJ,EAEI,6CAAWL,KAAX,EAFJ,CADJ,EAKI,+BACI,0CADJ,EAEI,6CAAWE,OAAX,EAFJ,CALJ,EASI,+BACI,kDADJ,EAEI,6CAAWI,MAAM,CAACL,aAAD,CAAjB,EAFJ,CATJ,EAaI,+BACI,kDADJ,EAEI,6CAAWG,SAAX,sBAAgCC,UAAhC,YAFJ,CAbJ,EAiBKF,IAAI,KAAK,OAAT,IAAoB,qDAjBzB,EAkBKA,IAAI,KAAK,QAAT,IAAqB,sDAlB1B,EAmBKA,IAAI,KAAK,OAAT,IAAoB,qDAnBzB,EAoBKA,IAAI,KAAK,SAAT,IAAsB,sDApB3B,CADJ;AAwBH,CA3BD;;AA6BA,OAAO,IAAMU,oBAAoB,GAAGf,cAAc,CAACa,aAAD,CAA3C;AAEP,eAAe;AACXG,EAAAA,KAAK,EAAE,uBADI;AAEXC,EAAAA,SAAS,EAAElB,aAFA;AAGXmB,EAAAA,UAAU,EAAE;AACRpB,IAAAA,KAAK,EAALA,KADQ;AAERqB,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAFF;AAHD,CAAf","sourcesContent":["// @flow\n\nimport * as React from 'react';\n\nimport { VIEW_SIZE_TYPE } from '../constants';\nimport notes from './MediaQuery.stories.md';\nimport useMediaQuery from '../useMediaQuery';\nimport withMediaQuery from '../withMediaQuery';\n\nexport const CustomHook = () => {\n    const { hover, isTouchDevice, pointer, size, viewWidth, viewHeight } = useMediaQuery();\n\n    return (\n        <div>\n            <p>\n                <b>Hover:</b>\n                <span>{` ${hover}`}</span>\n            </p>\n            <p>\n                <b>Pointer:</b>\n                <span>{` ${pointer}`}</span>\n            </p>\n            <p>\n                <b>Is Touch Device:</b>\n                <span>{` ${String(isTouchDevice)}`}</span>\n            </p>\n            <p>\n                <b>View Dimensions:</b>\n                <span>{` ${viewWidth}px (w) x ${viewHeight}px (h)`}</span>\n            </p>\n            {size === VIEW_SIZE_TYPE.small && <h4>This view is small</h4>}\n            {size === VIEW_SIZE_TYPE.medium && <h3>This view is medium</h3>}\n            {size === VIEW_SIZE_TYPE.large && <h2>This view is large</h2>}\n            {size === VIEW_SIZE_TYPE.xlarge && <h1>This view is xlarge</h1>}\n        </div>\n    );\n};\n\ntype Props = {\n    children?: any,\n    hover: string,\n    isTouchDevice: boolean,\n    pointer: string,\n    size: string,\n    viewHeight: number,\n    viewWidth: number,\n};\n\nconst DemoComponent = (props: Props) => {\n    const { hover, isTouchDevice, pointer, size, viewWidth, viewHeight } = props;\n\n    return (\n        <div>\n            <p>\n                <b>Hover:</b>\n                <span>{` ${hover}`}</span>\n            </p>\n            <p>\n                <b>Pointer:</b>\n                <span>{` ${pointer}`}</span>\n            </p>\n            <p>\n                <b>Is Touch Device:</b>\n                <span>{` ${String(isTouchDevice)}`}</span>\n            </p>\n            <p>\n                <b>View Dimensions:</b>\n                <span>{` ${viewWidth}px (w) x ${viewHeight}px (h)`}</span>\n            </p>\n            {size === 'small' && <h4>This view is small</h4>}\n            {size === 'medium' && <h3>This view is medium</h3>}\n            {size === 'large' && <h2>This view is large</h2>}\n            {size === 'x-large' && <h1>This view is xlarge</h1>}\n        </div>\n    );\n};\n\nexport const HigherOrderComponent = withMediaQuery(DemoComponent);\n\nexport default {\n    title: 'Components|MediaQuery',\n    component: useMediaQuery,\n    parameters: {\n        notes,\n        viewport: {\n            defaultViewport: 'tablet',\n        },\n    },\n};\n"],"file":"MediaQuery.stories.js"}