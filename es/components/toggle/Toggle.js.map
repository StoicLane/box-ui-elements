{"version":3,"sources":["../../../src/components/toggle/Toggle.js"],"names":["React","classNames","Toggle","forwardRef","ref","className","description","isDisabled","isOn","isToggleRightAligned","label","name","onBlur","onChange","onFocus","onMouseEnter","onMouseLeave","rest","classes","toggleElements","reverse","displayName"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,eAAP;AA6BA,IAAMC,MAAM,GAAGF,KAAK,CAACG,UAAN,CACX,gBAgBIC,GAhBJ,EAiBK;AAAA,4BAfGC,SAeH;AAAA,MAfGA,SAeH,+BAfe,EAef;AAAA,MAdGC,WAcH,QAdGA,WAcH;AAAA,MAbGC,UAaH,QAbGA,UAaH;AAAA,MAZGC,IAYH,QAZGA,IAYH;AAAA,mCAXGC,oBAWH;AAAA,MAXGA,oBAWH,sCAX0B,KAW1B;AAAA,MAVGC,KAUH,QAVGA,KAUH;AAAA,MATGC,IASH,QATGA,IASH;AAAA,MARGC,MAQH,QARGA,MAQH;AAAA,MAPGC,QAOH,QAPGA,QAOH;AAAA,MANGC,OAMH,QANGA,OAMH;AAAA,MALGC,YAKH,QALGA,YAKH;AAAA,MAJGC,YAIH,QAJGA,YAIH;AAAA,MAHMC,IAGN;;AACD,MAAMC,OAAO,GAAGjB,UAAU,CAAC,kBAAD,EAAqBI,SAArB,EAAgC;AACtD,+BAA2BI;AAD2B,GAAhC,CAA1B;AAIA,MAAMU,cAAc,GAAG,CACnB;AAAK,IAAA,GAAG,EAAC,sBAAT;AAAgC,IAAA,SAAS,EAAC;AAA1C,IADmB,EAEnB;AAAK,IAAA,GAAG,EAAC,qBAAT;AAA+B,IAAA,SAAS,EAAC;AAAzC,KACKT,KADL,CAFmB,CAAvB;;AAMA,MAAID,oBAAJ,EAA0B;AACtBU,IAAAA,cAAc,CAACC,OAAf;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAEF,OAAhB;AAAyB,IAAA,YAAY,EAAEH,YAAvC;AAAqD,IAAA,YAAY,EAAEC;AAAnE,KAEI;AAAO,IAAA,SAAS,EAAC;AAAjB,KACI;AACI,IAAA,OAAO,EAAER,IADb;AAEI,IAAA,SAAS,EAAC,qBAFd;AAGI,IAAA,QAAQ,EAAED,UAHd;AAII,IAAA,IAAI,EAAEI,IAJV;AAKI,IAAA,MAAM,EAAEC,MALZ;AAMI,IAAA,QAAQ,EAAEC,QANd;AAOI,IAAA,OAAO,EAAEC,OAPb;AAQI,IAAA,GAAG,EAAEV,GART;AASI,IAAA,IAAI,EAAC,QATT;AAUI,IAAA,IAAI,EAAC;AAVT,KAWQa,IAXR,EADJ,EAcKE,cAdL,CAFJ,EAkBKb,WAAW,GAAG;AAAK,IAAA,SAAS,EAAC;AAAf,KAA4CA,WAA5C,CAAH,GAAoE,IAlBpF,CADJ;AAsBH,CAvDU,CAAf;AAyDAJ,MAAM,CAACmB,WAAP,GAAqB,QAArB;AAGA,eAAenB,MAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Toggle.scss';\n\ntype Props = {\n    className?: string,\n    /** Description of the input */\n    description?: React.Node,\n    isDisabled?: boolean, // @TODO: eventually call this `disabled`\n    /** Toggle state */\n    isOn?: boolean, // @TODO: eventually call this `checked`\n    /** If set to true, the toggle will be aligned to the right */\n    isToggleRightAligned?: boolean,\n    /** Label displayed for the input */\n    label: React.Node,\n    /** Name of the input */\n    name?: string,\n    /** blur callback function called with event as the argument */\n    onBlur?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** change callback function called with event as the argument */\n    onChange?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** focus callback function called with event as the argument */\n    onFocus?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** mouse enter callback function called with event as the argument */\n    onMouseEnter?: (e: SyntheticInputEvent<HTMLDivElement>) => any,\n    /** mouse leave callback function called with event as the argument */\n    onMouseLeave?: (e: SyntheticInputEvent<HTMLDivElement>) => any,\n    /** optional value for the toggles checkbox */\n    value?: any,\n};\n\nconst Toggle = React.forwardRef<Props, HTMLInputElement>(\n    (\n        {\n            className = '',\n            description,\n            isDisabled,\n            isOn,\n            isToggleRightAligned = false,\n            label,\n            name,\n            onBlur,\n            onChange,\n            onFocus,\n            onMouseEnter,\n            onMouseLeave,\n            ...rest\n        }: Props,\n        ref,\n    ) => {\n        const classes = classNames('toggle-container', className, {\n            'is-toggle-right-aligned': isToggleRightAligned,\n        });\n\n        const toggleElements = [\n            <div key=\"toggle-simple-switch\" className=\"toggle-simple-switch\" />,\n            <div key=\"toggle-simple-label\" className=\"toggle-simple-label\">\n                {label}\n            </div>,\n        ];\n        if (isToggleRightAligned) {\n            toggleElements.reverse();\n        }\n\n        return (\n            <div className={classes} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n                {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n                <label className=\"toggle-simple\">\n                    <input\n                        checked={isOn}\n                        className=\"toggle-simple-input\"\n                        disabled={isDisabled}\n                        name={name}\n                        onBlur={onBlur}\n                        onChange={onChange}\n                        onFocus={onFocus}\n                        ref={ref}\n                        role=\"switch\"\n                        type=\"checkbox\"\n                        {...rest}\n                    />\n                    {toggleElements}\n                </label>\n                {description ? <div className=\"toggle-simple-description\">{description}</div> : null}\n            </div>\n        );\n    },\n);\nToggle.displayName = 'Toggle';\n\nexport type ToggleProps = Props;\nexport default Toggle;\n"],"file":"Toggle.js"}