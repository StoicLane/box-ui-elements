{"version":3,"sources":["../../../src/components/infinite-scroll/InfiniteScroll.tsx"],"names":["React","throttleFn","onContainerScroll","hasMore","isLoading","onLoadMore","scrollContainerNode","sentinelRef","threshold","useWindow","current","getBoundingClientRect","sentinelTop","top","window","innerHeight","containerBottom","bottom","InfiniteScroll","children","throttle","useRef","useEffect","params","scrollHandler","resizeHandler","container","addEventListener","removeEventListeners","removeEventListener"],"mappings":"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","sourcesContent":["/**\n * From https://github.com/jaredpalmer/react-simple-infinite-scroll\n * Updated to accept a scroll container React ref as the \"window\"\n */\nimport * as React from 'react';\nimport throttleFn from 'lodash/throttle';\n\nexport interface InfiniteScrollProps {\n    /** Components to render, should include entities/loading states/end message */\n    children: React.ReactNode;\n    /** Does the resource have more entities */\n    hasMore: boolean;\n    /** Are more entities being loaded */\n    isLoading: boolean;\n    /** Callback to load more entities */\n    onLoadMore: () => void;\n    /** React ref of the scroll container.\n     * Used to listen to scroll events and calculate onLoadMore calls.\n     * Set useWindow to true to use the window as scroll container.\n     */\n    scrollContainerNode?: HTMLElement;\n    /** Scroll threshold */\n    threshold?: number;\n    /** Throttle rate */\n    throttle?: number;\n    /** Set useWindow to true to use the window as scroll container. If set to true, will ignore scrollContainerNode. */\n    useWindow?: boolean;\n}\n\ntype OnContainerScrollParams = Pick<Required<InfiniteScrollProps>, 'threshold' | 'useWindow'> &\n    Pick<InfiniteScrollProps, 'isLoading' | 'hasMore' | 'scrollContainerNode' | 'onLoadMore'> & {\n        sentinelRef: React.RefObject<HTMLDivElement>;\n    };\n\nfunction onContainerScroll({\n    hasMore,\n    isLoading,\n    onLoadMore,\n    scrollContainerNode,\n    sentinelRef,\n    threshold,\n    useWindow,\n}: OnContainerScrollParams) {\n    if (isLoading || !hasMore) return;\n\n    if (sentinelRef.current === null) return;\n    const { top: sentinelTop } = sentinelRef.current.getBoundingClientRect();\n\n    if (useWindow) {\n        if (sentinelTop - window.innerHeight < threshold) {\n            onLoadMore();\n        }\n    } else {\n        if (!scrollContainerNode) return;\n\n        const { bottom: containerBottom } = scrollContainerNode.getBoundingClientRect();\n        if (sentinelTop - containerBottom < threshold) {\n            onLoadMore();\n        }\n    }\n}\n\nfunction InfiniteScroll({\n    children,\n    hasMore,\n    isLoading,\n    onLoadMore,\n    scrollContainerNode,\n    threshold = 100,\n    throttle = 64,\n    useWindow = false,\n}: InfiniteScrollProps) {\n    const sentinelRef = React.useRef<HTMLDivElement | null>(null);\n\n    React.useEffect(() => {\n        const params = {\n            hasMore,\n            isLoading,\n            onLoadMore,\n            scrollContainerNode,\n            sentinelRef,\n            threshold,\n            useWindow,\n        };\n\n        const scrollHandler = throttleFn(() => onContainerScroll(params), throttle);\n        const resizeHandler = throttleFn(() => onContainerScroll(params), throttle);\n\n        const container = useWindow ? window : scrollContainerNode;\n\n        if (container) {\n            container.addEventListener('scroll', scrollHandler);\n            container.addEventListener('resize', resizeHandler);\n        }\n\n        // loads more content until page becomes scrollable, or until there is no more data to fetch\n        onContainerScroll(params);\n\n        return function removeEventListeners() {\n            if (container) {\n                container.removeEventListener('scroll', scrollHandler);\n                container.removeEventListener('resize', resizeHandler);\n            }\n        };\n    }, [hasMore, isLoading, onLoadMore, scrollContainerNode, sentinelRef, threshold, throttle, useWindow]);\n\n    return (\n        <div>\n            {children}\n            <div ref={sentinelRef} data-testid=\"sentinel\" />\n        </div>\n    );\n}\n\nexport default InfiniteScroll;\n"],"file":"InfiniteScroll.js"}