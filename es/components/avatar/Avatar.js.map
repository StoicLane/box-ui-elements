{"version":3,"sources":["../../../src/components/avatar/Avatar.tsx"],"names":["React","injectIntl","classNames","Badgeable","AvatarImage","AvatarInitials","UnknownUserAvatar","GlobeBadge16","messages","SIZES","small","large","Avatar","avatarUrl","badgeIcon","className","name","id","intl","isExternal","shouldShowExternal","size","formatMessage","useState","hasImageErrored","setHasImageErrored","prevAvatarUrl","setPrevAvatarUrl","classes","avatar","badge","externalUser","AvatarBase"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport Badgeable from '../badgeable';\nimport AvatarImage from './AvatarImage';\nimport AvatarInitials from './AvatarInitials';\nimport UnknownUserAvatar from './UnknownUserAvatar';\nimport GlobeBadge16 from '../../icon/fill/GlobeBadge16';\n\nimport messages from './messages';\n\nimport './Avatar.scss';\n\nconst SIZES = { small: true, large: true };\n\nexport interface AvatarProps {\n    /**\n     * Url to avatar image.  If passed in, component will render the avatar image instead of the initials\n     *\n     * Required if \"name\" is not specified.\n     */\n    avatarUrl?: string | null;\n    /**\n     * Icon React Element that will be shown as a badge in bottom right corner of Avatar.\n     *\n     * Will not be used if `shouldShowExternal` and `isExternal` is true, then GlobalBadge will be shown.\n     */\n    badgeIcon?: React.ReactElement;\n    /** classname to add to the container element. */\n    className?: string;\n    /** Users id */\n    id?: string | number | null;\n    /** Intl object */\n    intl: IntlShape;\n    /** Whether this avatar should be labeled as external in the current context */\n    isExternal?: boolean;\n    /**\n     * Users full name.\n     *\n     * Required if \"avatarUrl\" is not specified.\n     */\n    name?: string | null;\n    /** Show the external avatar marker if the avatar is marked as for an external user */\n    shouldShowExternal?: boolean;\n    /* avatar size (enum) */\n    size?: keyof typeof SIZES | '';\n}\n\nfunction Avatar({\n    avatarUrl,\n    badgeIcon,\n    className,\n    name,\n    id,\n    intl,\n    isExternal,\n    shouldShowExternal = false,\n    size = '',\n}: AvatarProps) {\n    const { formatMessage } = intl;\n\n    const [hasImageErrored, setHasImageErrored] = React.useState<boolean>(false);\n    const [prevAvatarUrl, setPrevAvatarUrl] = React.useState<AvatarProps['avatarUrl']>(null);\n\n    const classes = classNames([\n        'avatar',\n        className,\n        {\n            [`avatar--${size}`]: size && SIZES[size],\n            'avatar--isExternal': shouldShowExternal && isExternal,\n            'avatar--iconBadge': !!badgeIcon,\n        },\n    ]);\n\n    // Reset hasImageErrored state when avatarUrl changes\n    if (avatarUrl !== prevAvatarUrl) {\n        setHasImageErrored(false);\n        setPrevAvatarUrl(avatarUrl);\n    }\n\n    let avatar;\n    if (avatarUrl && !hasImageErrored) {\n        avatar = (\n            <AvatarImage\n                onError={() => {\n                    setHasImageErrored(true);\n                }}\n                url={avatarUrl}\n            />\n        );\n    } else if (name) {\n        avatar = <AvatarInitials id={id} name={name} />;\n    } else {\n        avatar = <UnknownUserAvatar className=\"avatar-icon\" />;\n    }\n\n    let badge = null;\n    if (shouldShowExternal && isExternal) {\n        badge = <GlobeBadge16 className=\"bdl-Avatar-externalBadge\" title={formatMessage(messages.externalUser)} />;\n    } else if (badgeIcon) {\n        badge = <div className=\"bdl-Avatar-badge bdl-Avatar-iconBadge\">{badgeIcon}</div>;\n    }\n\n    return (\n        <Badgeable className={classes} bottomRight={badge}>\n            <span>{avatar}</span>\n        </Badgeable>\n    );\n}\n\nexport { Avatar as AvatarBase };\nexport default injectIntl(Avatar);\n"],"file":"Avatar.js"}