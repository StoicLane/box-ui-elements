{"version":3,"sources":["../../../src/components/contact-datalist-item/ContactDatalistItem.tsx"],"names":["React","Avatar","DatalistItem","ContactDatalistItem","props","avatarUrl","isMounted","setState","state","undefined","getContactAvatarUrl","id","Promise","resolve","then","getAvatarUrlHandler","catch","getAvatarUrl","isExternal","name","showAvatar","subtitle","rest","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AAKA,OAAO,4BAAP;;IAgBMC,mB;;;;;AACF,+BAAYC,KAAZ,EAA6C;AAAA;;AAAA;;AACzC,6FAAMA,KAAN;;AADyC,gEAKjC,KALiC;;AAAA,0EAYvB,UAACC,SAAD,EAA0C;AAC5D,UAAI,MAAKC,SAAT,EAAoB;AAChB,cAAKC,QAAL,CAAc;AACVF,UAAAA,SAAS,EAATA;AADU,SAAd;AAGH;AACJ,KAlB4C;;AAEzC,UAAKG,KAAL,GAAa;AAAEH,MAAAA,SAAS,EAAEI;AAAb,KAAb;AAFyC;AAG5C;;;;;AAiBD;;;;;mCAKe;AAAA,wBACyB,KAAKL,KAD9B;AAAA,UACHM,mBADG,eACHA,mBADG;AAAA,UACkBC,EADlB,eACkBA,EADlB;AAEXC,MAAAA,OAAO,CAACC,OAAR,CACIH,mBAAmB,IAAIC,EAAvB,GACMD,mBAAmB,CAAC;AAChBC,QAAAA,EAAE,EAAFA;AADgB,OAAD,CADzB,GAIMF,SALV,EAOKK,IAPL,CAOU,KAAKC,mBAPf,EAQKC,KARL,CAQW,YAAM,CACT;AACH,OAVL;AAWH;;;wCAEmB;AAChB,WAAKV,SAAL,GAAiB,IAAjB;AACA,WAAKW,YAAL;AACH;;;2CAEsB;AACnB,WAAKX,SAAL,GAAiB,KAAjB;AACH;;;6BAEQ;AACL;AADK,yBAEgF,KAAKF,KAFrF;AAAA,UAEGM,mBAFH,gBAEGA,mBAFH;AAAA,UAEwBC,EAFxB,gBAEwBA,EAFxB;AAAA,UAE4BO,UAF5B,gBAE4BA,UAF5B;AAAA,UAEwCC,IAFxC,gBAEwCA,IAFxC;AAAA,UAE8CC,UAF9C,gBAE8CA,UAF9C;AAAA,UAE0DC,QAF1D,gBAE0DA,QAF1D;AAAA,UAEuEC,IAFvE;;AAAA,UAGGjB,SAHH,GAGiB,KAAKG,KAHtB,CAGGH,SAHH;AAIL,aACI,oBAAC,YAAD;AAAc,QAAA,SAAS,EAAC;AAAxB,SAAqDiB,IAArD,GACKF,UAAU,IACP,oBAAC,MAAD;AACI,QAAA,SAAS,EAAC,gBADd;AAEI,QAAA,EAAE,EAAET,EAFR;AAGI,QAAA,IAAI,EAAEQ,IAHV;AAII,QAAA,UAAU,EAAED,UAJhB;AAKI,QAAA,kBAAkB,MALtB;AAMI,QAAA,SAAS,EAAEb;AANf,QAFR,EAWI;AAAK,QAAA,SAAS,EAAC;AAAf,SACI;AAAK,QAAA,SAAS,EAAC;AAAf,SAA4Cc,IAA5C,CADJ,EAEKE,QAAQ,IAAI;AAAK,QAAA,SAAS,EAAC;AAAf,SAAgDA,QAAhD,CAFjB,CAXJ,CADJ;AAkBH;;;;EAxE6BrB,KAAK,CAACuB,a;;AA2ExC,eAAepB,mBAAf","sourcesContent":["import * as React from 'react';\nimport Avatar from '../avatar';\nimport DatalistItem from '../datalist-item';\n\nimport { ContactType } from '../../features/unified-share-modal/types';\nimport { SuggestedPillType } from '../pill-selector-dropdown/types';\n\nimport './ContactDatalistItem.scss';\n\nexport interface ContactDatalistItemProps {\n    getContactAvatarUrl?: (contact: ContactType) => string | Promise<string | null | undefined>;\n    getPillImageUrl?: (data: SuggestedPillType) => string | Promise<string>;\n    id?: string;\n    isExternal?: boolean;\n    name: string | null | undefined;\n    showAvatar?: boolean;\n    subtitle?: React.ReactNode;\n}\n\ninterface ContactDatalistItemState {\n    avatarUrl: string | null | undefined;\n}\n\nclass ContactDatalistItem extends React.PureComponent<ContactDatalistItemProps, ContactDatalistItemState> {\n    constructor(props: ContactDatalistItemProps) {\n        super(props);\n        this.state = { avatarUrl: undefined };\n    }\n\n    isMounted = false;\n\n    /**\n     * Success handler for getting avatar url\n     *\n     * @param {string} [avatarUrl] the user avatar url\n     */\n    getAvatarUrlHandler = (avatarUrl: string | null | undefined) => {\n        if (this.isMounted) {\n            this.setState({\n                avatarUrl,\n            });\n        }\n    };\n\n    /**\n     * Gets the avatar URL for the user from the getContactAvatarUrl prop\n     *\n     * @return {void}\n     */\n    getAvatarUrl() {\n        const { getContactAvatarUrl, id } = this.props;\n        Promise.resolve(\n            getContactAvatarUrl && id\n                ? getContactAvatarUrl({\n                      id,\n                  })\n                : undefined,\n        )\n            .then(this.getAvatarUrlHandler)\n            .catch(() => {\n                // noop\n            });\n    }\n\n    componentDidMount() {\n        this.isMounted = true;\n        this.getAvatarUrl();\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { getContactAvatarUrl, id, isExternal, name, showAvatar, subtitle, ...rest } = this.props;\n        const { avatarUrl } = this.state;\n        return (\n            <DatalistItem className=\"contact-data-list-item\" {...rest}>\n                {showAvatar && (\n                    <Avatar\n                        className=\"contact-avatar\"\n                        id={id}\n                        name={name}\n                        isExternal={isExternal}\n                        shouldShowExternal\n                        avatarUrl={avatarUrl}\n                    />\n                )}\n                <div className=\"contact-name-container\">\n                    <div className=\"contact-text contact-name\">{name}</div>\n                    {subtitle && <div className=\"contact-text contact-sub-name\">{subtitle}</div>}\n                </div>\n            </DatalistItem>\n        );\n    }\n}\n\nexport default ContactDatalistItem;\n"],"file":"ContactDatalistItem.js"}