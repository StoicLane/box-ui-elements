{"version":3,"sources":["../../../src/features/content-insights/MetricSummary.tsx"],"names":["React","isFinite","isNaN","injectIntl","HeaderWithCount","messages","TrendPill","formatCount","METRIC","METRIC_MAP","PREVIEWS","headerMessage","previewGraphType","getPeriodCount","data","reduce","count","previewsCount","DOWNLOADS","downloadsCount","downloadGraphType","USERS","periodUsers","totalUsers","users","Set","Array","from","size","peopleTitle","formatTrend","calculatedTrend","MetricSummary","intl","metric","period","previousPeriodCount","totalCount","periodCount","trend","formatMessage"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport isFinite from 'lodash/isFinite';\nimport isNaN from 'lodash/isNaN';\nimport { injectIntl, IntlShape } from 'react-intl';\n\nimport HeaderWithCount from './HeaderWithCount';\nimport messages from './messages';\nimport TrendPill from './TrendPill';\nimport { formatCount } from './numberUtils';\nimport { METRIC } from './constants';\nimport { GraphData, Metric, Period } from './types';\n\nimport './MetricSummary.scss';\n\ninterface Props {\n    data: GraphData;\n    intl: IntlShape;\n    metric: Metric;\n    period: Period;\n    previousPeriodCount: number;\n    totalCount?: number;\n}\n\nconst METRIC_MAP = {\n    [METRIC.PREVIEWS]: {\n        headerMessage: messages.previewGraphType,\n        getPeriodCount: (data: GraphData) => data.reduce((count, { previewsCount }) => count + previewsCount, 0),\n    },\n    [METRIC.DOWNLOADS]: {\n        getPeriodCount: (data: GraphData) => data.reduce((count, { downloadsCount }) => count + downloadsCount, 0),\n        headerMessage: messages.downloadGraphType,\n    },\n    [METRIC.USERS]: {\n        getPeriodCount: (data: GraphData) => {\n            const periodUsers = data.reduce(\n                (totalUsers, { users }) => new Set([...Array.from(totalUsers), ...Array.from(users)]),\n                new Set(),\n            );\n            return periodUsers.size;\n        },\n        headerMessage: messages.peopleTitle,\n    },\n} as const;\n\n// Limit the trend to a finite number (in case the previous period count was 0 and the calculated trend is Infinity)\nconst formatTrend = (calculatedTrend: number) => (!isFinite(calculatedTrend) ? 1 : calculatedTrend);\n\nfunction MetricSummary({ data = [], intl, metric, period, previousPeriodCount = 0, totalCount }: Props) {\n    const { getPeriodCount, headerMessage } = METRIC_MAP[metric];\n    const periodCount = getPeriodCount(data);\n    const calculatedTrend = (periodCount - previousPeriodCount) / previousPeriodCount;\n    const trend = isNaN(calculatedTrend) ? 0 : formatTrend(calculatedTrend);\n\n    return (\n        <div className=\"MetricSummary\">\n            <HeaderWithCount title={intl.formatMessage(headerMessage)} totalCount={totalCount} />\n            <div className=\"MetricSummary-period\">\n                <span className=\"MetricSummary-periodCount\">{formatCount(periodCount, intl)}</span>\n                <TrendPill period={period} trend={trend} />\n            </div>\n        </div>\n    );\n}\n\nexport default injectIntl(MetricSummary);\n"],"file":"MetricSummary.js"}