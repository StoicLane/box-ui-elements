{"version":3,"sources":["../../../src/features/unified-share-modal/ContactRestrictionNotice.js"],"names":["React","noop","getProp","FormattedMessage","injectIntl","Tooltip","PlainButton","InlineNotice","LoadingIndicator","SingleSelectField","isRestrictedContact","COLLAB_RESTRICTION_TYPE_ACCESS_POLICY","COLLAB_RESTRICTION_TYPE_INFORMATION_BARRIER","messages","SINGLE_CONTACT","MULTIPLE_CONTACTS","EMAIL_CONTACT","GROUP_CONTACT","RESTRICTION_JUSTIFICATION_ENABLED","RESTRICTION_JUSTIFICATION_DISABLED","restrictionNoticeMessageMap","justifiableContactRestrictionNoticeSingular","justifiableContactRestrictionNotice","contactRestrictionNoticeSingular","contactRestrictionNotice","contactRestrictionNoticeInformationBarrierSingular","contactRestrictionNoticeInformationBarrierSingularGroup","contactRestrictionNoticeInformationBarrier","ContactRestrictionNotice","collabRestrictionType","error","intl","isFetchingJustificationReasons","isRestrictionJustificationEnabled","justificationReasons","onRemoveRestrictedContacts","onSelectJustificationReason","restrictedEmails","restrictedGroups","selectedContacts","selectedJustificationReason","restrictedContacts","filter","contact","restrictedContactCount","length","firstContact","isFirstContactAGroup","type","firstContactEmail","undefined","value","firstContactGroupName","text","selectedValue","isErrorTooltipShown","justificationStatus","restrictedContactCountType","removeButtonLabelMessage","justifiableContactRestrictionRemoveButtonLabel","contactRestrictionRemoveButtonLabel","restrictionNoticeMessage","contactType","justificationSelectSection","formatMessage","justificationSelectPlaceholder","count","email","groupName","displayName","defaultProps","ContactRestrictionNoticeComponent"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport getProp from 'lodash/get';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\n\nimport Tooltip from '../../components/tooltip';\nimport PlainButton from '../../components/plain-button';\nimport InlineNotice from '../../components/inline-notice';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport SingleSelectField from '../../components/select-field/SingleSelectField';\nimport isRestrictedContact from './utils/isRestrictedContact';\nimport { COLLAB_RESTRICTION_TYPE_ACCESS_POLICY, COLLAB_RESTRICTION_TYPE_INFORMATION_BARRIER } from './constants';\n\nimport messages from './messages';\n\nimport type { SelectOptionProp } from '../../components/select-field/props';\nimport type { CollabRestrictionType, contactType as Contact } from './flowTypes';\n\nimport './ContactRestrictionNotice.scss';\n\nconst SINGLE_CONTACT = 'singleContact';\nconst MULTIPLE_CONTACTS = 'multipleContacts';\nconst EMAIL_CONTACT = 'email';\nconst GROUP_CONTACT = 'group';\nconst RESTRICTION_JUSTIFICATION_ENABLED = 'restrictionJustificationEnabled';\nconst RESTRICTION_JUSTIFICATION_DISABLED = 'restrictionJustificationDisabled';\n\nconst restrictionNoticeMessageMap = {\n    [COLLAB_RESTRICTION_TYPE_ACCESS_POLICY]: {\n        [RESTRICTION_JUSTIFICATION_ENABLED]: {\n            [SINGLE_CONTACT]: messages.justifiableContactRestrictionNoticeSingular,\n            [MULTIPLE_CONTACTS]: messages.justifiableContactRestrictionNotice,\n        },\n        [RESTRICTION_JUSTIFICATION_DISABLED]: {\n            [SINGLE_CONTACT]: messages.contactRestrictionNoticeSingular,\n            [MULTIPLE_CONTACTS]: messages.contactRestrictionNotice,\n        },\n    },\n    [COLLAB_RESTRICTION_TYPE_INFORMATION_BARRIER]: {\n        [SINGLE_CONTACT]: {\n            [EMAIL_CONTACT]: messages.contactRestrictionNoticeInformationBarrierSingular,\n            [GROUP_CONTACT]: messages.contactRestrictionNoticeInformationBarrierSingularGroup,\n        },\n        [MULTIPLE_CONTACTS]: messages.contactRestrictionNoticeInformationBarrier,\n    },\n};\n\ntype Props = {\n    collabRestrictionType?: CollabRestrictionType,\n    error?: React.Node,\n    isFetchingJustificationReasons?: boolean,\n    isRestrictionJustificationEnabled?: boolean,\n    justificationReasons: Array<SelectOptionProp>,\n    onRemoveRestrictedContacts: () => void,\n    onSelectJustificationReason: (justificationReasonOption: SelectOptionProp) => void,\n    restrictedEmails: Array<string>,\n    restrictedGroups: Array<number>,\n    selectedContacts: Array<Contact>,\n    selectedJustificationReason: ?SelectOptionProp,\n} & InjectIntlProvidedProps;\n\nconst ContactRestrictionNotice = ({\n    collabRestrictionType = COLLAB_RESTRICTION_TYPE_ACCESS_POLICY,\n    error,\n    intl,\n    isFetchingJustificationReasons,\n    isRestrictionJustificationEnabled,\n    justificationReasons,\n    onRemoveRestrictedContacts,\n    onSelectJustificationReason,\n    restrictedEmails,\n    restrictedGroups,\n    selectedContacts,\n    selectedJustificationReason,\n}: Props) => {\n    const restrictedContacts = selectedContacts.filter(contact =>\n        isRestrictedContact(contact, restrictedEmails, restrictedGroups),\n    );\n    const restrictedContactCount = restrictedContacts.length;\n\n    if (!restrictedContactCount) {\n        return null;\n    }\n\n    const [firstContact] = restrictedContacts;\n    const isFirstContactAGroup = firstContact.type === 'group';\n    const firstContactEmail = isFirstContactAGroup ? undefined : firstContact.value;\n    const firstContactGroupName = isFirstContactAGroup ? firstContact.text : undefined;\n\n    const selectedValue = getProp(selectedJustificationReason, 'value', null);\n    const isErrorTooltipShown = !!error;\n\n    const justificationStatus = isRestrictionJustificationEnabled\n        ? RESTRICTION_JUSTIFICATION_ENABLED\n        : RESTRICTION_JUSTIFICATION_DISABLED;\n    const restrictedContactCountType = restrictedContactCount === 1 ? SINGLE_CONTACT : MULTIPLE_CONTACTS;\n\n    const removeButtonLabelMessage = isRestrictionJustificationEnabled\n        ? messages.justifiableContactRestrictionRemoveButtonLabel\n        : messages.contactRestrictionRemoveButtonLabel;\n\n    let restrictionNoticeMessage;\n    // Information Barrier restrictions do not allow justifications\n    if (collabRestrictionType === COLLAB_RESTRICTION_TYPE_INFORMATION_BARRIER) {\n        if (restrictedContactCountType === SINGLE_CONTACT) {\n            const contactType = isFirstContactAGroup ? GROUP_CONTACT : EMAIL_CONTACT;\n\n            // Group names are displayed in quotes, which need to be localized, hence why\n            // we need to use different messages for groups and emails\n            restrictionNoticeMessage =\n                restrictionNoticeMessageMap[COLLAB_RESTRICTION_TYPE_INFORMATION_BARRIER][SINGLE_CONTACT][contactType];\n        } else {\n            restrictionNoticeMessage =\n                restrictionNoticeMessageMap[COLLAB_RESTRICTION_TYPE_INFORMATION_BARRIER][MULTIPLE_CONTACTS];\n        }\n    } else {\n        restrictionNoticeMessage =\n            restrictionNoticeMessageMap[collabRestrictionType][justificationStatus][restrictedContactCountType];\n    }\n\n    const justificationSelectSection = isFetchingJustificationReasons ? (\n        <LoadingIndicator className=\"bdl-ContactRestrictionNotice-loadingIndicator\" />\n    ) : (\n        <SingleSelectField\n            data-resin-target=\"justificationReasonsSelect\"\n            options={justificationReasons}\n            onChange={onSelectJustificationReason}\n            placeholder={intl.formatMessage(messages.justificationSelectPlaceholder)}\n            selectedValue={selectedValue}\n        />\n    );\n\n    return (\n        <Tooltip text={error} isShown={isErrorTooltipShown} position=\"middle-right\" theme=\"error\">\n            <InlineNotice\n                className=\"bdl-ContactRestrictionNotice\"\n                data-resin-component=\"contactRestrictionNotice\"\n                type=\"error\"\n            >\n                <FormattedMessage\n                    {...restrictionNoticeMessage}\n                    values={{\n                        count: restrictedContactCount,\n                        // We use the first contact because email address and\n                        // group name are only displayed for single contact messages\n                        email: firstContactEmail,\n                        groupName: firstContactGroupName,\n                    }}\n                />\n                &nbsp;\n                {isRestrictionJustificationEnabled && justificationSelectSection}\n                <PlainButton\n                    className=\"bdl-ContactRestrictionNotice-removeBtn\"\n                    data-resin-target=\"removeBtn\"\n                    onClick={onRemoveRestrictedContacts}\n                >\n                    {/* TODO: count was removed but need to keep it while translations are updated otherwise non-English messages will break */}\n                    <FormattedMessage {...removeButtonLabelMessage} values={{ count: restrictedContactCount }} />\n                </PlainButton>\n            </InlineNotice>\n        </Tooltip>\n    );\n};\n\nContactRestrictionNotice.displayName = 'ContactRestrictionNotice';\n\nContactRestrictionNotice.defaultProps = {\n    justificationReasons: [],\n    onRemoveRestrictedContacts: noop,\n    onSelectJustificationReason: noop,\n};\n\nexport { ContactRestrictionNotice as ContactRestrictionNoticeComponent };\nexport default injectIntl(ContactRestrictionNotice);\n"],"file":"ContactRestrictionNotice.js"}