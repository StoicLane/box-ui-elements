{"version":3,"sources":["../../../../src/features/content-explorer/content-explorer-modal-container/ContentExplorerModalContainer.js"],"names":["PropTypes","React","Component","classNames","BreadcrumbPropType","ContentExplorerModePropType","FoldersPathPropType","ItemsPropType","ContentExplorerModal","NewFolderModal","ContentExplorerModalContainer","props","enteredFolder","newFoldersPath","onEnterFolder","setState","foldersPath","onNewFolderModalShown","isNewFolderModalOpen","onNewFolderModalClosed","state","initialFoldersPath","prevInitialFoldersPath","className","modalTitle","modalDescription","onCreateFolderSubmit","onCreateFolderInput","isCreatingFolder","createFolderError","rest","currentFolder","length","handleEnterFolder","handleCreateNewFolderButtonClick","name","handleNewFolderModalClose","additionalColumns","arrayOf","element","isNoSelectionAllowed","bool","breadcrumbProps","string","hasFolderTreeBreadcrumbs","headerActionsAccessory","node","onRequestClose","func","isRequired","onSelectedClick","onSelectItem","onViewSelectedClick","isSelectAllAllowed","contentExplorerMode","includeSubfoldersProps","object","initialSelectedItems","onFoldersPathUpdate","onSelectedItemsUpdate","onChooseItems","onMoveItem","onCopyItem","isCreateNewFolderAllowed","onSearchSubmit","onExitSearch","items","numItemsPerPage","number","numTotalItems","onLoadMoreItems","itemIconRenderer","itemNameLinkRenderer","itemButtonRenderer","itemRowHeight","itemRowRenderer","listHeaderHeight","listHeaderRenderer","showCreateNewFolderButton","searchInputProps","chooseButtonText"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\nimport { BreadcrumbPropType, ContentExplorerModePropType, FoldersPathPropType, ItemsPropType } from '../prop-types';\nimport ContentExplorerModal from '../content-explorer-modal';\nimport NewFolderModal from '../new-folder-modal';\n\nclass ContentExplorerModalContainer extends Component {\n    static propTypes = {\n        /**\n         * Extra columns displayed in the folders table after folder name column\n         * Each column has to be a Column element\n         */\n        additionalColumns: PropTypes.arrayOf(PropTypes.element),\n        /**  Allow users to choose no selections in MULTI_SELECT mode, defaults to false */\n        isNoSelectionAllowed: PropTypes.bool,\n        /** Breadcrumb component options */\n        breadcrumbProps: BreadcrumbPropType,\n        /** Adds class name. */\n        className: PropTypes.string,\n        /** Whether the user can see the breadcrumbs represented with the folder tree button */\n        hasFolderTreeBreadcrumbs: PropTypes.bool,\n        /** Any extra items in the header to the right of the search input (and new folder button) */\n        headerActionsAccessory: PropTypes.node,\n        /** Title shown in the ContentExplorerModal. */\n        modalTitle: PropTypes.string,\n        /** Description text shown in the ContentExplorerModal. */\n        modalDescription: PropTypes.string,\n        /** Called when the ContentExplorerModal is closed. */\n        onRequestClose: PropTypes.func.isRequired,\n        /**\n         * Called when the folder creation is submitted.\n         *\n         * @param {string} folderName\n         */\n        onCreateFolderSubmit: PropTypes.func,\n        /**\n         * Called with the latest folder name input.\n         *\n         * @param {string} folderName\n         */\n        onCreateFolderInput: PropTypes.func,\n        /** Called when the NewFolderModal is shown. */\n        onNewFolderModalShown: PropTypes.func,\n        /** Called when the NewFolderModal is closed. */\n        onNewFolderModalClosed: PropTypes.func,\n        /** Called when selected button is clicked */\n        onSelectedClick: PropTypes.func,\n        /**\n         * Called when an item is selected\n         *\n         * @param {Object} selectedItem\n         * @param {number} selectedItemIndex\n         */\n        onSelectItem: PropTypes.func,\n        /** Called when the number of items selected text is clicked */\n        onViewSelectedClick: PropTypes.func,\n        /** Folder is in the process of being created. */\n        isCreatingFolder: PropTypes.bool,\n        /** Whether the user can see select all checkbox */\n        isSelectAllAllowed: PropTypes.bool,\n        /** Message that will be shown when there was an error creating the folder. */\n        createFolderError: PropTypes.string,\n        /** Configures the content explorer based on the user's intended action (ex. select file or move/copy) */\n        contentExplorerMode: ContentExplorerModePropType.isRequired,\n        /** Props for the include subfolders toggle */\n        includeSubfoldersProps: PropTypes.object,\n        /** Initial path of folders. The last folder in the array is the current folder. */\n        initialFoldersPath: FoldersPathPropType.isRequired,\n        /** Initial items that will show up as selected */\n        initialSelectedItems: PropTypes.object,\n        /**\n         * Called when the current folder changes\n         *\n         * @param {Object} enteredFolder\n         * @param {Array} newFoldersPath\n         */\n        onEnterFolder: PropTypes.func.isRequired,\n        /** Called when the folders path is updated\n         *\n         * @param {Array} newFoldersPath\n         */\n        onFoldersPathUpdate: PropTypes.func,\n        /** Called whenever the selected items list changes\n         *\n         * @param {Object} selectedItems\n         */\n        onSelectedItemsUpdate: PropTypes.func,\n        /**\n         * Called when items are chosen.\n         *\n         * @param {Object[]} chosenItems In non-multi select mode, the chosenItems will be a 1 element array contain the one chosen item\n         */\n        onChooseItems: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for moving an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onMoveItem: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for copying an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onCopyItem: PropTypes.func,\n        /** Whether the user has permission to create a new folder */\n        isCreateNewFolderAllowed: PropTypes.bool,\n        /**\n         * Called when a search query is submitted.\n         *\n         * @param {string} searchQuery\n         */\n        onSearchSubmit: PropTypes.func.isRequired,\n        /**\n         * Called when search mode is exited. An updated items list should now be passed in to display the user's file tree.\n         *\n         * @param {Object} folderBeforeSearch the previous folder object before entering search mode\n         */\n        onExitSearch: PropTypes.func.isRequired,\n        /** List of items to display */\n        items: ItemsPropType.isRequired,\n        /** Number of items to load per page as the user scrolls */\n        numItemsPerPage: PropTypes.number,\n        /** Total number of items across all pages */\n        numTotalItems: PropTypes.number,\n        /** Called to load more items */\n        onLoadMoreItems: PropTypes.func,\n        /** Used to render item icons in the list. Overrides the default icons. */\n        itemIconRenderer: PropTypes.func,\n        /** Used to render item name links in the list. Overrides the default links. */\n        itemNameLinkRenderer: PropTypes.func,\n        /** Used to render item buttons in the list. Overrides the default buttons. */\n        itemButtonRenderer: PropTypes.func,\n        /** Height of an item row */\n        itemRowHeight: PropTypes.number,\n        /** Used to render the row element for items on the list */\n        itemRowRenderer: PropTypes.func,\n        /** Height of the item list header, defaults to 0, which makes header not visible */\n        listHeaderHeight: PropTypes.number,\n        /** Used to render the header row on the item list */\n        listHeaderRenderer: PropTypes.func,\n        /** Whether the new folder button should be shown */\n        showCreateNewFolderButton: PropTypes.bool,\n        /** Props for the search input */\n        searchInputProps: PropTypes.object,\n        /** Custom text for the choose button */\n        chooseButtonText: PropTypes.node,\n    };\n\n    static defaultProps = {\n        onCreateFolderSubmit: () => {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            foldersPath: props.initialFoldersPath,\n            isNewFolderModalOpen: false,\n        };\n    }\n\n    componentDidUpdate({ initialFoldersPath: prevInitialFoldersPath }) {\n        const { initialFoldersPath } = this.props;\n\n        if (prevInitialFoldersPath !== initialFoldersPath) {\n            // Close the new folder modal when the folders path has changed\n            this.setState({\n                foldersPath: initialFoldersPath,\n                isNewFolderModalOpen: false,\n            });\n        }\n    }\n\n    handleEnterFolder = (enteredFolder, newFoldersPath) => {\n        const { onEnterFolder } = this.props;\n\n        this.setState({ foldersPath: newFoldersPath });\n        onEnterFolder(enteredFolder, newFoldersPath);\n    };\n\n    handleCreateNewFolderButtonClick = () => {\n        const { onNewFolderModalShown } = this.props;\n\n        this.setState({ isNewFolderModalOpen: true }, () => onNewFolderModalShown && onNewFolderModalShown());\n    };\n\n    handleNewFolderModalClose = () => {\n        const { onNewFolderModalClosed } = this.props;\n\n        this.setState({ isNewFolderModalOpen: false }, () => onNewFolderModalClosed && onNewFolderModalClosed());\n    };\n\n    render() {\n        const {\n            className,\n            modalTitle,\n            modalDescription,\n            onCreateFolderSubmit,\n            onCreateFolderInput,\n            isCreatingFolder,\n            createFolderError,\n            initialFoldersPath,\n            ...rest\n        } = this.props;\n        const { foldersPath, isNewFolderModalOpen } = this.state;\n        const currentFolder = foldersPath[foldersPath.length - 1];\n\n        return (\n            <div className={classNames('content-explorer-modal-container', className)}>\n                <ContentExplorerModal\n                    className={isNewFolderModalOpen ? 'hidden' : ''}\n                    title={modalTitle}\n                    description={modalDescription}\n                    initialFoldersPath={initialFoldersPath}\n                    isOpen\n                    onEnterFolder={this.handleEnterFolder}\n                    onCreateNewFolderButtonClick={this.handleCreateNewFolderButtonClick}\n                    {...rest}\n                />\n                {isNewFolderModalOpen && (\n                    <NewFolderModal\n                        isOpen\n                        parentFolderName={currentFolder.name}\n                        onRequestClose={this.handleNewFolderModalClose}\n                        onCreateFolderSubmit={onCreateFolderSubmit}\n                        onCreateFolderInput={onCreateFolderInput}\n                        isCreatingFolder={isCreatingFolder}\n                        createFolderError={createFolderError}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ContentExplorerModalContainer;\n"],"file":"ContentExplorerModalContainer.js"}