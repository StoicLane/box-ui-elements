{"version":3,"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorer.js"],"names":["PropTypes","React","Component","classNames","omit","ContentExplorerHeaderActions","ContentExplorerEmptyState","ContentExplorerActionButtons","ContentExplorerSelectAll","ContentExplorerIncludeSubfolders","ItemList","ContentExplorerModePropType","FoldersPathPropType","ItemsPropType","ContentExplorerModes","TYPE_FOLDER","ContentExplorer","props","items","selectedItems","state","length","every","item","id","isLoading","node","className","limit","nodeOfInterest","counter","parentNode","includes","contentExplorerMode","MULTI_SELECT","event","isInside","domNode","contains","target","shouldDeselectItems","deselectItems","enteredFolder","onEnterFolder","onFoldersPathUpdate","foldersPath","folderIndex","findIndex","folder","newFoldersPath","slice","concat","newState","setState","searchQuery","onSearchSubmit","isInSearchMode","folderBeforeSearch","onExitSearch","index","onSelectItem","onSelectedItemsUpdate","isDisabled","isActionDisabled","stopPropagation","newSelectedItems","toggleSelectedItem","onChooseItems","type","enterFolder","preventDefault","result","forEach","isLoadingItems","isSelectAllChecked","unselectAll","selectAll","isViewingSearchResults","initialSelectedItems","initialFoldersPath","document","addEventListener","handleDocumentClick","prevInitialFoldersPath","isSelectAllAllowed","handleFoldersPathUpdated","areAllItemsSelected","removeEventListener","actionButtonsProps","additionalColumns","isNoSelectionAllowed","breadcrumbProps","cancelButtonProps","chooseButtonProps","chooseButtonText","customInput","hasFolderTreeBreadcrumbs","headerActionsAccessory","onMoveItem","onCopyItem","onCancelButtonClick","onCreateNewFolderButtonClick","onSelectedClick","onViewSelectedClick","showCreateNewFolderButton","isChooseButtonLoading","isCopyButtonLoading","isCreateNewFolderAllowed","isMoveButtonLoading","isResponsive","numItemsPerPage","numTotalItems","onLoadMoreItems","includeSubfoldersProps","itemIconRenderer","itemNameLinkRenderer","itemButtonRenderer","itemRowHeight","itemRowRenderer","listHeaderHeight","listHeaderRenderer","listWidth","listHeight","searchInputProps","rest","currentFolder","getCurrentFolder","contentExplorerProps","canIncludeSubfolders","hasSubheader","selectedItemsIds","Object","keys","areActionButtonsDisabled","SELECT_FILE","handleContentExplorerClick","ref","handleExitSearch","handleSearchSubmit","handleSelectAllClick","renderItemListEmptyState","handleItemClick","handleItemDoubleClick","handleItemNameClick","object","arrayOf","element","bool","string","isRequired","func","number"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport ContentExplorerHeaderActions from './ContentExplorerHeaderActions';\nimport ContentExplorerEmptyState from './ContentExplorerEmptyState';\nimport ContentExplorerActionButtons from './ContentExplorerActionButtons';\nimport ContentExplorerSelectAll from './ContentExplorerSelectAll';\nimport ContentExplorerIncludeSubfolders from './ContentExplorerIncludeSubfolders';\n\nimport ItemList from '../item-list';\nimport { ContentExplorerModePropType, FoldersPathPropType, ItemsPropType } from '../prop-types';\nimport ContentExplorerModes from '../modes';\n\nimport { TYPE_FOLDER } from '../../../constants';\n\nimport './ContentExplorer.scss';\n\nclass ContentExplorer extends Component {\n    static propTypes = {\n        /** Props for the action buttons container */\n        actionButtonsProps: PropTypes.object,\n        /**\n         * Extra columns displayed in the folders table after folder name column\n         * Each column has to be a Column element\n         */\n        additionalColumns: PropTypes.arrayOf(PropTypes.element),\n        /**  Allow users to choose no selections in MULTI_SELECT mode, defaults to false  */\n        isNoSelectionAllowed: PropTypes.bool,\n        /** Props for breadcrumbs */\n        breadcrumbProps: PropTypes.object,\n        /** Props for the cancel button */\n        cancelButtonProps: PropTypes.object,\n        /** Props for the choose button */\n        chooseButtonProps: PropTypes.object,\n        /** Custom text for the choose button */\n        chooseButtonText: PropTypes.node,\n        /** Adds class name. */\n        className: PropTypes.string,\n        /** Configures the content explorer based on the user's intended action (ex. select file or move/copy) */\n        contentExplorerMode: ContentExplorerModePropType.isRequired,\n        /** Props that contains the custom search input. Is rendered in header actions */\n        customInput: PropTypes.func,\n        /** Whether the user can see the breadcrumbs represented with the folder tree button */\n        hasFolderTreeBreadcrumbs: PropTypes.bool,\n        /** Any extra items in the header to the right of the search input (and new folder button) */\n        headerActionsAccessory: PropTypes.node,\n        /** Props for the include subfolders toggle */\n        includeSubfoldersProps: PropTypes.object,\n        /** Initial path of folders. The last folder in the array is the current folder. */\n        initialFoldersPath: FoldersPathPropType.isRequired,\n        /** Initial items that will show up as selected */\n        initialSelectedItems: PropTypes.object,\n        /** Whether to use the responsive version */\n        isResponsive: PropTypes.bool,\n        /**\n         * Called when the current folder changes\n         *\n         * @param {Object} enteredFolder\n         * @param {Array} newFoldersPath\n         */\n        onEnterFolder: PropTypes.func.isRequired,\n        /** Called when the folders path is updated\n         *\n         * @param {Array} newFoldersPath\n         */\n        onFoldersPathUpdate: PropTypes.func,\n        /** Called whenever the selected items list changes\n         *\n         * @param {Object} selectedItems\n         */\n        onSelectedItemsUpdate: PropTypes.func,\n        /**\n         * Called when an item is selected\n         *\n         * @param {Object} selectedItem\n         * @param {number} selectedItemIndex\n         */\n        onSelectItem: PropTypes.func,\n        /**\n         * Called when an item is chosen\n         *\n         * @param {Object[]} chosenItems\n         */\n        onChooseItems: PropTypes.func,\n        /** Called when selected button is clicked */\n        onSelectedClick: PropTypes.func,\n        /** Called when the number of items selected text is clicked */\n        onViewSelectedClick: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for moving an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onMoveItem: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for copying an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onCopyItem: PropTypes.func,\n        /** Called when cancel button is clicked */\n        onCancelButtonClick: PropTypes.func,\n        /** Called when new folder button is clicked */\n        onCreateNewFolderButtonClick: PropTypes.func,\n        /** Whether the new folder button should be shown */\n        showCreateNewFolderButton: PropTypes.bool,\n        /** Whether the choose button should be shown with a loading indicator */\n        isChooseButtonLoading: PropTypes.bool,\n        /** Whether the copy button should be shown with a loading indicator */\n        isCopyButtonLoading: PropTypes.bool,\n        /** Whether the user has permission to create a new folder */\n        isCreateNewFolderAllowed: PropTypes.bool,\n        /** Whether the user can see select all checkbox */\n        isSelectAllAllowed: PropTypes.bool,\n        /** Whether the move button should be shown with a loading indicator */\n        isMoveButtonLoading: PropTypes.bool,\n        /**\n         * Called when a search query is submitted.\n         *\n         * @param {string} searchQuery\n         */\n        onSearchSubmit: PropTypes.func.isRequired,\n        /**\n         * Called when search mode is exited. An updated items list should now be passed in to display the user's file tree.\n         *\n         * @param {Object} folderBeforeSearch the previous folder object before entering search mode\n         */\n        onExitSearch: PropTypes.func.isRequired,\n        /** List of items to display */\n        items: ItemsPropType.isRequired,\n        /** Number of items to load per page as the user scrolls */\n        numItemsPerPage: PropTypes.number,\n        /** Total number of items across all pages */\n        numTotalItems: PropTypes.number,\n        /** Called to load more items */\n        onLoadMoreItems: PropTypes.func,\n        /** Used to render item icons in the list. Overrides the default icons. */\n        itemIconRenderer: PropTypes.func,\n        /** Used to render item name links in the list. Overrides the default links. */\n        itemNameLinkRenderer: PropTypes.func,\n        /** Used to render item buttons in the list. Overrides the default buttons. */\n        itemButtonRenderer: PropTypes.func,\n        /** Height of an item row */\n        itemRowHeight: PropTypes.number,\n        /** Used to render the row element for items on the list. Allows row customizations such as adding tooltips, etc. */\n        itemRowRenderer: PropTypes.func,\n        /** Height of the item list header, defaults to 0, which makes header not visible */\n        listHeaderHeight: PropTypes.number,\n        /** Used to render the header row on the item list */\n        listHeaderRenderer: PropTypes.func,\n        /** Width of the item list */\n        listWidth: PropTypes.number.isRequired,\n        /** Height of the item list */\n        listHeight: PropTypes.number.isRequired,\n        /** Props for the search input */\n        searchInputProps: PropTypes.object,\n    };\n\n    static defaultProps = {\n        actionButtonsProps: {},\n        cancelButtonProps: {},\n        chooseButtonProps: {},\n        className: '',\n        searchInputProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedItems: props.initialSelectedItems || {},\n            foldersPath: props.initialFoldersPath,\n            isInSearchMode: false,\n            isSelectAllChecked: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.handleDocumentClick, true);\n    }\n\n    componentDidUpdate({ initialFoldersPath: prevInitialFoldersPath }) {\n        const { initialFoldersPath, isSelectAllAllowed } = this.props;\n        const { isSelectAllChecked } = this.state;\n\n        if (prevInitialFoldersPath !== initialFoldersPath) {\n            this.handleFoldersPathUpdated(initialFoldersPath);\n        }\n        if (!this.isLoadingItems() && isSelectAllAllowed) {\n            const areAllItemsSelected = this.areAllItemsSelected();\n            if (areAllItemsSelected !== isSelectAllChecked) {\n                this.setState({ isSelectAllChecked: areAllItemsSelected });\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n\n    areAllItemsSelected = () => {\n        const { items } = this.props;\n        const { selectedItems } = this.state;\n\n        return items.length > 0 && items.every(item => selectedItems[item.id]);\n    };\n\n    isLoadingItems = () => {\n        return this.props?.items?.[0]?.isLoading;\n    };\n\n    getCurrentFolder() {\n        const { foldersPath } = this.state;\n        return foldersPath[foldersPath.length - 1];\n    }\n\n    /**\n     * Traverse the hirerachy up to the limit to see if any of the parent has the className\n     */\n    doAncestersContainClassname = (node, className, limit) => {\n        let nodeOfInterest = node;\n        let counter = 0;\n        while (nodeOfInterest.parentNode && counter < limit) {\n            // Done traversing (Document node does not have classnames)\n            if (!nodeOfInterest.parentNode.className) {\n                break;\n            }\n\n            if (nodeOfInterest.parentNode.className.includes(className)) {\n                return true;\n            }\n\n            nodeOfInterest = nodeOfInterest.parentNode;\n            counter += 1;\n        }\n\n        return false;\n    };\n\n    shouldDeselectItems = () => {\n        const { contentExplorerMode } = this.props;\n\n        return (\n            // always deselect when not in multi select mode\n            contentExplorerMode !== ContentExplorerModes.MULTI_SELECT\n        );\n    };\n\n    handleDocumentClick = event => {\n        const isInside = (this.domNode && this.domNode.contains(event.target)) || this.domNode === event.target;\n\n        if (!isInside && this.shouldDeselectItems()) {\n            this.deselectItems();\n        }\n    };\n\n    handleContentExplorerClick = () => {\n        if (this.shouldDeselectItems()) {\n            this.deselectItems();\n        }\n    };\n\n    deselectItems() {\n        const { onSelectedItemsUpdate } = this.props;\n        this.setState({\n            selectedItems: {},\n        });\n        if (onSelectedItemsUpdate) {\n            onSelectedItemsUpdate({});\n        }\n    }\n\n    enterFolder = enteredFolder => {\n        const { contentExplorerMode, onEnterFolder, onFoldersPathUpdate } = this.props;\n        const { foldersPath } = this.state;\n\n        const folderIndex = foldersPath.findIndex(folder => folder.id === enteredFolder.id);\n        let newFoldersPath = foldersPath.slice();\n\n        if (folderIndex === -1) {\n            // Append folder to the path if it's not already in the folders path\n            newFoldersPath = newFoldersPath.concat([\n                {\n                    ...enteredFolder,\n                },\n            ]);\n        } else {\n            // Otherwise, remove all folders that came after the entered folder\n            newFoldersPath = newFoldersPath.slice(0, folderIndex + 1);\n        }\n\n        const newState = { foldersPath: newFoldersPath };\n        if (contentExplorerMode !== ContentExplorerModes.MULTI_SELECT) {\n            newState.selectedItems = {};\n        }\n\n        this.setState(newState);\n        if (onFoldersPathUpdate) {\n            onFoldersPathUpdate(newFoldersPath);\n        }\n\n        onEnterFolder(enteredFolder, newFoldersPath);\n    };\n\n    handleFoldersPathUpdated = newFoldersPath => {\n        const { onFoldersPathUpdate } = this.props;\n\n        this.setState({\n            foldersPath: newFoldersPath,\n        });\n        if (onFoldersPathUpdate) {\n            onFoldersPathUpdate(newFoldersPath);\n        }\n    };\n\n    handleSearchSubmit = searchQuery => {\n        const { onSearchSubmit } = this.props;\n\n        this.setState({ isInSearchMode: true });\n        onSearchSubmit(searchQuery);\n    };\n\n    handleExitSearch = folderBeforeSearch => {\n        const { onExitSearch } = this.props;\n\n        this.setState({ isInSearchMode: false });\n        onExitSearch(folderBeforeSearch);\n    };\n\n    handleItemClick = ({ event, index }) => {\n        const { contentExplorerMode, items, onSelectItem, onSelectedItemsUpdate } = this.props;\n        const { selectedItems } = this.state;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading || item.isActionDisabled) {\n            return;\n        }\n\n        // Prevent the event from bubbling up (so our content explorer click handler doesn't fire)\n        event.stopPropagation();\n\n        let newSelectedItems = {};\n        if (contentExplorerMode === ContentExplorerModes.MULTI_SELECT) {\n            newSelectedItems = this.toggleSelectedItem(selectedItems, item);\n        } else {\n            newSelectedItems[item.id] = item;\n        }\n\n        this.setState({ selectedItems: newSelectedItems });\n\n        if (onSelectedItemsUpdate) {\n            onSelectedItemsUpdate(newSelectedItems);\n        }\n\n        if (onSelectItem) {\n            onSelectItem(item, index);\n        }\n    };\n\n    handleItemDoubleClick = ({ index }) => {\n        const { items, onChooseItems } = this.props;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading) {\n            return;\n        }\n\n        if (item.type === TYPE_FOLDER) {\n            this.enterFolder(item);\n        } else if (!item.isActionDisabled) {\n            onChooseItems([item]);\n        }\n    };\n\n    handleItemNameClick = (event, index) => {\n        const { items } = this.props;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading) {\n            return;\n        }\n\n        if (item.type !== TYPE_FOLDER) {\n            return;\n        }\n\n        // Prevent the event from bubbling (so our row click handler doesn't fire)\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.enterFolder(item);\n    };\n\n    toggleSelectedItem = (selectedItems, item) => {\n        const result = { ...selectedItems };\n        if (result[item.id]) {\n            delete result[item.id];\n        } else {\n            result[item.id] = item;\n        }\n\n        return result;\n    };\n\n    selectAll = () => {\n        const { items } = this.props;\n        const { selectedItems } = this.state;\n        const result = { ...selectedItems };\n        items.forEach(item => {\n            if (!result[item.id]) {\n                result[item.id] = item;\n            }\n        });\n\n        return result;\n    };\n\n    unselectAll = () => {\n        const { items } = this.props;\n        const { selectedItems } = this.state;\n        const result = { ...selectedItems };\n        items.forEach(item => {\n            if (result[item.id]) {\n                delete result[item.id];\n            }\n        });\n\n        return result;\n    };\n\n    handleSelectAllClick = async () => {\n        const { onSelectedItemsUpdate } = this.props;\n        if (this.isLoadingItems()) {\n            return;\n        }\n        const { isSelectAllChecked } = this.state;\n        const newSelectedItems = isSelectAllChecked ? this.unselectAll() : this.selectAll();\n        this.setState({ selectedItems: newSelectedItems, isSelectAllChecked: !isSelectAllChecked });\n        if (onSelectedItemsUpdate) {\n            onSelectedItemsUpdate(newSelectedItems);\n        }\n    };\n\n    renderItemListEmptyState = () => {\n        const { foldersPath, isInSearchMode } = this.state;\n        const isViewingSearchResults = isInSearchMode && foldersPath.length === 1;\n\n        return <ContentExplorerEmptyState isSearch={isViewingSearchResults} />;\n    };\n\n    render() {\n        const {\n            actionButtonsProps,\n            additionalColumns,\n            isNoSelectionAllowed = false,\n            breadcrumbProps,\n            cancelButtonProps,\n            chooseButtonProps,\n            chooseButtonText,\n            className,\n            contentExplorerMode,\n            customInput,\n            hasFolderTreeBreadcrumbs,\n            headerActionsAccessory,\n            onChooseItems,\n            onMoveItem,\n            onCopyItem,\n            onCancelButtonClick,\n            onCreateNewFolderButtonClick,\n            onSelectedClick,\n            onViewSelectedClick,\n            showCreateNewFolderButton,\n            isChooseButtonLoading,\n            isCopyButtonLoading,\n            isCreateNewFolderAllowed,\n            isMoveButtonLoading,\n            isResponsive = false,\n            isSelectAllAllowed,\n            items,\n            numItemsPerPage,\n            numTotalItems,\n            onLoadMoreItems,\n            includeSubfoldersProps,\n            itemIconRenderer,\n            itemNameLinkRenderer,\n            itemButtonRenderer,\n            itemRowHeight,\n            itemRowRenderer,\n            listHeaderHeight,\n            listHeaderRenderer,\n            listWidth,\n            listHeight,\n            searchInputProps,\n            ...rest\n        } = this.props;\n        const { isInSearchMode, foldersPath, selectedItems, isSelectAllChecked } = this.state;\n        const isViewingSearchResults = isInSearchMode && foldersPath.length === 1;\n        const currentFolder = this.getCurrentFolder();\n        const contentExplorerProps = omit(rest, [\n            'initialFoldersPath',\n            'onEnterFolder',\n            'onSelectItem',\n            'onSearchSubmit',\n            'onExitSearch',\n            'initialSelectedItems',\n            'onFoldersPathUpdate',\n            'onSelectedItemsUpdate',\n        ]);\n        const canIncludeSubfolders = !!includeSubfoldersProps;\n        const hasSubheader = canIncludeSubfolders || isSelectAllAllowed;\n\n        const selectedItemsIds = Object.keys(selectedItems);\n        let areActionButtonsDisabled;\n        // NOTE: it almost feels like this whole section should be inside the\n        // ContentExplorerActionButtons instead. There's a lot of implicit knowledge\n        // of what the action buttons are and what they should be doing.\n        if (contentExplorerMode === ContentExplorerModes.MULTI_SELECT) {\n            // NOTE: only expecting to have 1 (choose) button so as long as something\n            // is selected and that item's isActionDisabled is false, we enable the action button\n            areActionButtonsDisabled =\n                (selectedItemsIds.length === 0 && !isNoSelectionAllowed) ||\n                (selectedItemsIds.length === 1 && selectedItems[selectedItemsIds[0]].isActionDisabled);\n        } else if (isViewingSearchResults || contentExplorerMode === ContentExplorerModes.SELECT_FILE) {\n            // Buttons are only enabled when an item is selected\n            // When viewing search results, there is no \"current folder\"\n            // When selecting a file, the file can only selected from the list\n            areActionButtonsDisabled =\n                selectedItemsIds.length === 0 || selectedItems[selectedItemsIds[0]].isActionDisabled;\n        } else {\n            // Buttons are enabled using the selected item or the current folder if no item is selected\n            areActionButtonsDisabled =\n                selectedItemsIds.length > 0\n                    ? selectedItems[selectedItemsIds[0]].isActionDisabled\n                    : currentFolder.isActionDisabled;\n        }\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events\n            <div\n                className={classNames('content-explorer', className, {\n                    'bdl-ContentExplorer--responsive': isResponsive,\n                })}\n                data-testid=\"content-explorer\"\n                onClick={this.handleContentExplorerClick}\n                ref={ref => {\n                    this.domNode = ref;\n                }}\n                {...contentExplorerProps}\n            >\n                <ContentExplorerHeaderActions\n                    breadcrumbProps={breadcrumbProps}\n                    contentExplorerMode={contentExplorerMode}\n                    customInput={customInput}\n                    foldersPath={foldersPath}\n                    hasFolderTreeBreadcrumbs={hasFolderTreeBreadcrumbs}\n                    isCreateNewFolderAllowed={isCreateNewFolderAllowed}\n                    onCreateNewFolderButtonClick={onCreateNewFolderButtonClick}\n                    onFoldersPathUpdated={this.handleFoldersPathUpdated}\n                    onEnterFolder={this.enterFolder}\n                    onExitSearch={this.handleExitSearch}\n                    onSearchSubmit={this.handleSearchSubmit}\n                    numTotalItems={numTotalItems}\n                    searchInputProps={searchInputProps}\n                    showCreateNewFolderButton={showCreateNewFolderButton}\n                >\n                    {headerActionsAccessory}\n                </ContentExplorerHeaderActions>\n                {hasSubheader && (\n                    <div className=\"bdl-ContentExplorer-subheader\">\n                        {canIncludeSubfolders && <ContentExplorerIncludeSubfolders {...includeSubfoldersProps} />}\n                        {isSelectAllAllowed && (\n                            <ContentExplorerSelectAll\n                                handleSelectAllClick={this.handleSelectAllClick}\n                                isLabelHidden={canIncludeSubfolders}\n                                isSelectAllChecked={isSelectAllChecked}\n                                numTotalItems={numTotalItems}\n                            />\n                        )}\n                    </div>\n                )}\n                <ItemList\n                    additionalColumns={additionalColumns}\n                    contentExplorerMode={contentExplorerMode}\n                    headerHeight={listHeaderHeight}\n                    headerRenderer={listHeaderRenderer}\n                    height={listHeight}\n                    isResponsive={isResponsive}\n                    itemButtonRenderer={itemButtonRenderer}\n                    itemIconRenderer={itemIconRenderer}\n                    itemNameLinkRenderer={itemNameLinkRenderer}\n                    items={items}\n                    itemRowRenderer={itemRowRenderer}\n                    noItemsRenderer={this.renderItemListEmptyState}\n                    numItemsPerPage={numItemsPerPage}\n                    numTotalItems={numTotalItems}\n                    onItemClick={this.handleItemClick}\n                    onItemDoubleClick={this.handleItemDoubleClick}\n                    onItemNameClick={this.handleItemNameClick}\n                    onLoadMoreItems={onLoadMoreItems}\n                    rowHeight={itemRowHeight}\n                    selectedItems={selectedItems}\n                    width={listWidth}\n                />\n                <ContentExplorerActionButtons\n                    actionButtonsProps={actionButtonsProps}\n                    areButtonsDisabled={areActionButtonsDisabled}\n                    cancelButtonProps={cancelButtonProps}\n                    canIncludeSubfolders={canIncludeSubfolders}\n                    chooseButtonProps={chooseButtonProps}\n                    chooseButtonText={chooseButtonText}\n                    contentExplorerMode={contentExplorerMode}\n                    currentFolder={currentFolder}\n                    isChooseButtonLoading={isChooseButtonLoading}\n                    isCopyButtonLoading={isCopyButtonLoading}\n                    isMoveButtonLoading={isMoveButtonLoading}\n                    isResponsive={isResponsive}\n                    isSelectAllAllowed={isSelectAllAllowed}\n                    onCancelClick={onCancelButtonClick}\n                    onChooseClick={onChooseItems}\n                    onCopyClick={onCopyItem}\n                    onFoldersPathUpdated={this.handleFoldersPathUpdated}\n                    onSelectedClick={onSelectedClick}\n                    onMoveClick={onMoveItem}\n                    onViewSelectedClick={onViewSelectedClick}\n                    selectedItems={selectedItems}\n                    isNoSelectionAllowed={isNoSelectionAllowed}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ContentExplorer;\n"],"file":"ContentExplorer.js"}