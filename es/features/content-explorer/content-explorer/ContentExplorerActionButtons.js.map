{"version":3,"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorerActionButtons.js"],"names":["PropTypes","React","FormattedMessage","Button","PlainButton","PrimaryButton","ContentExplorerModePropType","FolderPropType","ItemsMapPropType","ContentExplorerModes","messages","getChosenItemsFromSelectedItems","selectedItems","chosenItems","selectedItemsIds","Object","keys","forEach","id","isActionDisabled","push","ContentExplorerActionButtons","actionButtonsProps","areButtonsDisabled","cancelButtonProps","canIncludeSubfolders","chooseButtonProps","chooseButtonText","contentExplorerMode","currentFolder","isChooseButtonLoading","isCopyButtonLoading","isMoveButtonLoading","isResponsive","isSelectAllAllowed","onCancelClick","onChooseClick","onCopyClick","onFoldersPathUpdated","onMoveClick","onSelectedClick","onViewSelectedClick","isNoSelectionAllowed","handleChooseClick","length","SELECT_FOLDER","handleMoveClick","itemToMove","handleCopyClick","itemToCopy","getStatusElement","statusMessage","statusElement","foldersPath","renderStatus","numSelected","numItemsSelected","numFoldersSelected","MULTI_SELECT","contentExplorerActionButtonsStyle","cancel","SELECT_FILE","choose","MOVE_COPY","move","COPY","copy","propTypes","object","bool","node","isRequired","func"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AAEA,SAASC,2BAAT,EAAsCC,cAAtC,EAAsDC,gBAAtD,QAA8E,eAA9E;AACA,OAAOC,oBAAP,MAAiC,UAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAAC,aAAa,EAAI;AAC5D,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,aAAZ,CAAzB;AACAE,EAAAA,gBAAgB,CAACG,OAAjB,CAAyB,UAAAC,EAAE,EAAI;AAC3B,QAAI,CAACN,aAAa,CAACM,EAAD,CAAb,CAAkBC,gBAAvB,EAAyC;AACrCN,MAAAA,WAAW,CAACO,IAAZ,CAAiBR,aAAa,CAACM,EAAD,CAA9B;AACH;AACJ,GAJD;AAKA,SAAOL,WAAP;AACH,CATM;;AAWP,IAAMQ,4BAA4B,GAAG,SAA/BA,4BAA+B,OAuB/B;AAAA,mCAtBFC,kBAsBE;AAAA,MAtBFA,kBAsBE,sCAtBmB,EAsBnB;AAAA,mCArBFC,kBAqBE;AAAA,MArBFA,kBAqBE,sCArBmB,KAqBnB;AAAA,mCApBFC,iBAoBE;AAAA,MApBFA,iBAoBE,sCApBkB,EAoBlB;AAAA,MAnBFC,oBAmBE,QAnBFA,oBAmBE;AAAA,mCAlBFC,iBAkBE;AAAA,MAlBFA,iBAkBE,sCAlBkB,EAkBlB;AAAA,MAjBFC,gBAiBE,QAjBFA,gBAiBE;AAAA,MAhBFC,mBAgBE,QAhBFA,mBAgBE;AAAA,MAfFC,aAeE,QAfFA,aAeE;AAAA,mCAdFC,qBAcE;AAAA,MAdFA,qBAcE,sCAdsB,KActB;AAAA,mCAbFC,mBAaE;AAAA,MAbFA,mBAaE,sCAboB,KAapB;AAAA,mCAZFC,mBAYE;AAAA,MAZFA,mBAYE,sCAZoB,KAYpB;AAAA,+BAXFC,YAWE;AAAA,MAXFA,YAWE,kCAXa,KAWb;AAAA,MAVFC,kBAUE,QAVFA,kBAUE;AAAA,MATFC,aASE,QATFA,aASE;AAAA,MARFC,aAQE,QARFA,aAQE;AAAA,MAPFC,WAOE,QAPFA,WAOE;AAAA,MANFC,oBAME,QANFA,oBAME;AAAA,MALFC,WAKE,QALFA,WAKE;AAAA,MAJFC,eAIE,QAJFA,eAIE;AAAA,MAHFC,mBAGE,QAHFA,mBAGE;AAAA,MAFF7B,aAEE,QAFFA,aAEE;AAAA,MADF8B,oBACE,QADFA,oBACE;;AACF,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,QAAI9B,WAAW,GAAGF,+BAA+B,CAACC,aAAD,CAAjD;;AACA,QAAIC,WAAW,CAAC+B,MAAZ,KAAuB,CAAvB,IAA4BhB,mBAAmB,KAAKnB,oBAAoB,CAACoC,aAAzE,IAA0FhB,aAA9F,EAA6G;AACzG;AACAhB,MAAAA,WAAW,GAAG,CAACgB,aAAD,CAAd;AACH;;AAED,QAAIO,aAAa,KAAKvB,WAAW,CAAC+B,MAAZ,GAAqB,CAArB,IAA0BF,oBAA/B,CAAjB,EAAuE;AACnEN,MAAAA,aAAa,CAACvB,WAAD,CAAb;AACH;AACJ,GAVD;;AAYA,MAAMiC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B,QAAMhC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,aAAZ,CAAzB,CAD0B,CAE1B;;AACA,QAAMmC,UAAU,GAAGjC,gBAAgB,CAAC8B,MAAjB,GAA0B,CAA1B,GAA8BhC,aAAa,CAACE,gBAAgB,CAAC,CAAD,CAAjB,CAA3C,GAAmEe,aAAtF;;AAEA,QAAIU,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACQ,UAAD,CAAX;AACH;AACJ,GARD;;AAUA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B,QAAMlC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,aAAZ,CAAzB,CAD0B,CAE1B;;AACA,QAAMqC,UAAU,GAAGnC,gBAAgB,CAAC8B,MAAjB,GAA0B,CAA1B,GAA8BhC,aAAa,CAACE,gBAAgB,CAAC,CAAD,CAAjB,CAA3C,GAAmEe,aAAtF;;AAEA,QAAIQ,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACY,UAAD,CAAX;AACH;AACJ,GARD;;AAUA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,aAAa,EAAI;AACtC,QAAIC,aAAa,GAAG;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAkCD,aAAlC,CAApB;;AAEA,QAAIV,mBAAJ,EAAyB;AACrBW,MAAAA,aAAa,GACT,oBAAC,WAAD;AACI,QAAA,SAAS,EAAC,qBADd;AAEI,QAAA,OAAO,EAAE,mBAAM;AACX,cAAMC,WAAW,GAAGZ,mBAAmB,EAAvC;;AACA,cAAIY,WAAJ,EAAiB;AACbf,YAAAA,oBAAoB,CAACe,WAAD,CAApB;AACH;AACJ,SAPL;AAQI,QAAA,IAAI,EAAC;AART,SAUKF,aAVL,CADJ;AAcH,KAfD,MAeO,IAAIX,eAAJ,EAAqB;AACxBY,MAAAA,aAAa,GACT,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,gBAAlB;AAAmC,QAAA,OAAO,EAAEZ,eAA5C;AAA6D,QAAA,IAAI,EAAC;AAAlE,SACKW,aADL,CADJ;AAKH;;AACD,WAAOC,aAAP;AACH,GA1BD;;AA4BA,MAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,QAAMC,WAAW,GAAG5C,+BAA+B,CAACC,aAAD,CAA/B,CAA+CgC,MAAnE;AAEA,QAAIO,aAAa,GAAG,oBAAC,gBAAD,eAAsBzC,QAAQ,CAAC6C,WAA/B;AAA4C,MAAA,MAAM,EAAE;AAAEA,QAAAA,WAAW,EAAXA;AAAF;AAApD,OAApB;;AAEA,QAAI9B,oBAAJ,EAA0B;AACtB0B,MAAAA,aAAa,GAAGjB,kBAAkB,GAC9B,oBAAC,gBAAD,eAAsBxB,QAAQ,CAAC8C,gBAA/B;AAAiD,QAAA,MAAM,EAAE;AAAED,UAAAA,WAAW,EAAXA;AAAF;AAAzD,SAD8B,GAG9B,oBAAC,gBAAD,eAAsB7C,QAAQ,CAAC+C,kBAA/B;AAAmD,QAAA,MAAM,EAAE;AAAEF,UAAAA,WAAW,EAAXA;AAAF;AAA3D,SAHJ;AAKH;;AAED,QAAMH,aAAa,GAAGF,gBAAgB,CAACC,aAAD,CAAtC;AAEA,WAAOvB,mBAAmB,KAAKnB,oBAAoB,CAACiD,YAA7C,IAA6DN,aAApE;AACH,GAhBD;;AAiBA,MAAMO,iCAAiC,GAAG1B,YAAY,GAChD,eADgD,GAEhD,2CAFN;AAIA,SACI;AAAK,IAAA,SAAS,EAAE0B;AAAhB,KAAuDrC,kBAAvD,GACKgC,YAAY,EADjB,EAEI,oBAAC,MAAD;AACI,IAAA,SAAS,EAAC,gCADd;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,UAAU,EAAExB,qBAAqB,IAAIE,mBAAzB,IAAgDD,mBAHhE;AAII,IAAA,OAAO,EAAEI;AAJb,KAKQX,iBALR,GAOI,oBAAC,gBAAD,EAAsBd,QAAQ,CAACkD,MAA/B,CAPJ,CAFJ,EAWK,CAAChC,mBAAmB,KAAKnB,oBAAoB,CAACoD,WAA7C,IACEjC,mBAAmB,KAAKnB,oBAAoB,CAACoC,aAD/C,IAEEjB,mBAAmB,KAAKnB,oBAAoB,CAACiD,YAFhD,KAGG,oBAAC,aAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,gCAFd;AAGI,IAAA,UAAU,EAAEnC,kBAAkB,IAAIO,qBAHtC;AAII,IAAA,SAAS,EAAEA,qBAJf;AAKI,IAAA,OAAO,EAAEa;AALb,KAMQjB,iBANR,GAQKC,gBAAgB,IAAI,oBAAC,gBAAD,EAAsBjB,QAAQ,CAACoD,MAA/B,CARzB,CAdR,EAyBKlC,mBAAmB,KAAKnB,oBAAoB,CAACsD,SAA7C,IACG,oBAAC,aAAD;AACI,IAAA,GAAG,EAAC,UADR;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,SAAS,EAAC,8BAHd;AAII,IAAA,OAAO,EAAEjB,eAJb;AAKI,IAAA,UAAU,EAAEvB,kBAAkB,IAAIS,mBAAtB,IAA6CD,mBAL7D;AAMI,IAAA,SAAS,EAAEC;AANf,KAQI,oBAAC,gBAAD,EAAsBtB,QAAQ,CAACsD,IAA/B,CARJ,CA1BR,EAqCK,CAACpC,mBAAmB,KAAKnB,oBAAoB,CAACsD,SAA7C,IACEnC,mBAAmB,KAAKnB,oBAAoB,CAACwD,IADhD,KAEG,oBAAC,aAAD;AACI,IAAA,GAAG,EAAC,UADR;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,SAAS,EAAC,8BAHd;AAII,IAAA,OAAO,EAAEjB,eAJb;AAKI,IAAA,UAAU,EAAEzB,kBAAkB,IAAIS,mBAAtB,IAA6CD,mBAL7D;AAMI,IAAA,SAAS,EAAEA;AANf,KAQI,oBAAC,gBAAD,EAAsBrB,QAAQ,CAACwD,IAA/B,CARJ,CAvCR,CADJ;AAqDH,CA9JD;;AAgKA7C,4BAA4B,CAAC8C,SAA7B,GAAyC;AACrC7C,EAAAA,kBAAkB,EAAEtB,SAAS,CAACoE,MADO;AAErC7C,EAAAA,kBAAkB,EAAEvB,SAAS,CAACqE,IAFO;AAGrC7C,EAAAA,iBAAiB,EAAExB,SAAS,CAACoE,MAHQ;AAIrC3C,EAAAA,oBAAoB,EAAEzB,SAAS,CAACqE,IAJK;AAKrC3C,EAAAA,iBAAiB,EAAE1B,SAAS,CAACoE,MALQ;AAMrCzC,EAAAA,gBAAgB,EAAE3B,SAAS,CAACsE,IANS;AAOrC1C,EAAAA,mBAAmB,EAAEtB,2BAA2B,CAACiE,UAPZ;AAQrC1C,EAAAA,aAAa,EAAEtB,cARsB;AASrCuB,EAAAA,qBAAqB,EAAE9B,SAAS,CAACqE,IATI;AAUrCtC,EAAAA,mBAAmB,EAAE/B,SAAS,CAACqE,IAVM;AAWrCrC,EAAAA,mBAAmB,EAAEhC,SAAS,CAACqE,IAXM;AAYrCpC,EAAAA,YAAY,EAAEjC,SAAS,CAACqE,IAZa;AAarCnC,EAAAA,kBAAkB,EAAElC,SAAS,CAACqE,IAbO;AAcrClC,EAAAA,aAAa,EAAEnC,SAAS,CAACwE,IAdY;AAerCpC,EAAAA,aAAa,EAAEpC,SAAS,CAACwE,IAfY;AAgBrCnC,EAAAA,WAAW,EAAErC,SAAS,CAACwE,IAhBc;AAiBrClC,EAAAA,oBAAoB,EAAEtC,SAAS,CAACwE,IAjBK;AAkBrCjC,EAAAA,WAAW,EAAEvC,SAAS,CAACwE,IAlBc;AAmBrChC,EAAAA,eAAe,EAAExC,SAAS,CAACwE,IAnBU;AAoBrC/B,EAAAA,mBAAmB,EAAEzC,SAAS,CAACwE,IApBM;AAqBrC5D,EAAAA,aAAa,EAAEJ,gBAAgB,CAAC+D,UArBK;AAsBrC7B,EAAAA,oBAAoB,EAAE1C,SAAS,CAACqE;AAtBK,CAAzC;AAyBA,eAAehD,4BAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../../components/button';\nimport PlainButton from '../../../components/plain-button';\nimport PrimaryButton from '../../../components/primary-button';\n\nimport { ContentExplorerModePropType, FolderPropType, ItemsMapPropType } from '../prop-types';\nimport ContentExplorerModes from '../modes';\nimport messages from '../messages';\n\nexport const getChosenItemsFromSelectedItems = selectedItems => {\n    const chosenItems = [];\n    const selectedItemsIds = Object.keys(selectedItems);\n    selectedItemsIds.forEach(id => {\n        if (!selectedItems[id].isActionDisabled) {\n            chosenItems.push(selectedItems[id]);\n        }\n    });\n    return chosenItems;\n};\n\nconst ContentExplorerActionButtons = ({\n    actionButtonsProps = {},\n    areButtonsDisabled = false,\n    cancelButtonProps = {},\n    canIncludeSubfolders,\n    chooseButtonProps = {},\n    chooseButtonText,\n    contentExplorerMode,\n    currentFolder,\n    isChooseButtonLoading = false,\n    isCopyButtonLoading = false,\n    isMoveButtonLoading = false,\n    isResponsive = false,\n    isSelectAllAllowed,\n    onCancelClick,\n    onChooseClick,\n    onCopyClick,\n    onFoldersPathUpdated,\n    onMoveClick,\n    onSelectedClick,\n    onViewSelectedClick,\n    selectedItems,\n    isNoSelectionAllowed,\n}) => {\n    const handleChooseClick = () => {\n        let chosenItems = getChosenItemsFromSelectedItems(selectedItems);\n        if (chosenItems.length === 0 && contentExplorerMode === ContentExplorerModes.SELECT_FOLDER && currentFolder) {\n            // Choose the selected item. If no item is selected, choose the current folder.\n            chosenItems = [currentFolder];\n        }\n\n        if (onChooseClick && (chosenItems.length > 0 || isNoSelectionAllowed)) {\n            onChooseClick(chosenItems);\n        }\n    };\n\n    const handleMoveClick = () => {\n        const selectedItemsIds = Object.keys(selectedItems);\n        // Move to the selected item. If no item is selected, move to the current folder.\n        const itemToMove = selectedItemsIds.length > 0 ? selectedItems[selectedItemsIds[0]] : currentFolder;\n\n        if (onMoveClick) {\n            onMoveClick(itemToMove);\n        }\n    };\n\n    const handleCopyClick = () => {\n        const selectedItemsIds = Object.keys(selectedItems);\n        // Copy to the selected item. If no item is selected, copy to the current folder.\n        const itemToCopy = selectedItemsIds.length > 0 ? selectedItems[selectedItemsIds[0]] : currentFolder;\n\n        if (onCopyClick) {\n            onCopyClick(itemToCopy);\n        }\n    };\n\n    const getStatusElement = statusMessage => {\n        let statusElement = <span className=\"status-message\">{statusMessage}</span>;\n\n        if (onViewSelectedClick) {\n            statusElement = (\n                <PlainButton\n                    className=\"status-message-link\"\n                    onClick={() => {\n                        const foldersPath = onViewSelectedClick();\n                        if (foldersPath) {\n                            onFoldersPathUpdated(foldersPath);\n                        }\n                    }}\n                    type=\"button\"\n                >\n                    {statusMessage}\n                </PlainButton>\n            );\n        } else if (onSelectedClick) {\n            statusElement = (\n                <Button className=\"status-message\" onClick={onSelectedClick} type=\"button\">\n                    {statusMessage}\n                </Button>\n            );\n        }\n        return statusElement;\n    };\n\n    const renderStatus = () => {\n        const numSelected = getChosenItemsFromSelectedItems(selectedItems).length;\n\n        let statusMessage = <FormattedMessage {...messages.numSelected} values={{ numSelected }} />;\n\n        if (canIncludeSubfolders) {\n            statusMessage = isSelectAllAllowed ? (\n                <FormattedMessage {...messages.numItemsSelected} values={{ numSelected }} />\n            ) : (\n                <FormattedMessage {...messages.numFoldersSelected} values={{ numSelected }} />\n            );\n        }\n\n        const statusElement = getStatusElement(statusMessage);\n\n        return contentExplorerMode === ContentExplorerModes.MULTI_SELECT && statusElement;\n    };\n    const contentExplorerActionButtonsStyle = isResponsive\n        ? 'modal-actions'\n        : 'content-explorer-action-buttons-container';\n\n    return (\n        <div className={contentExplorerActionButtonsStyle} {...actionButtonsProps}>\n            {renderStatus()}\n            <Button\n                className=\"content-explorer-cancel-button\"\n                type=\"button\"\n                isDisabled={isChooseButtonLoading || isMoveButtonLoading || isCopyButtonLoading}\n                onClick={onCancelClick}\n                {...cancelButtonProps}\n            >\n                <FormattedMessage {...messages.cancel} />\n            </Button>\n            {(contentExplorerMode === ContentExplorerModes.SELECT_FILE ||\n                contentExplorerMode === ContentExplorerModes.SELECT_FOLDER ||\n                contentExplorerMode === ContentExplorerModes.MULTI_SELECT) && (\n                <PrimaryButton\n                    type=\"button\"\n                    className=\"content-explorer-choose-button\"\n                    isDisabled={areButtonsDisabled || isChooseButtonLoading}\n                    isLoading={isChooseButtonLoading}\n                    onClick={handleChooseClick}\n                    {...chooseButtonProps}\n                >\n                    {chooseButtonText || <FormattedMessage {...messages.choose} />}\n                </PrimaryButton>\n            )}\n            {contentExplorerMode === ContentExplorerModes.MOVE_COPY && (\n                <PrimaryButton\n                    key=\"move-btn\"\n                    type=\"button\"\n                    className=\"content-explorer-move-button\"\n                    onClick={handleMoveClick}\n                    isDisabled={areButtonsDisabled || isMoveButtonLoading || isCopyButtonLoading}\n                    isLoading={isMoveButtonLoading}\n                >\n                    <FormattedMessage {...messages.move} />\n                </PrimaryButton>\n            )}\n            {(contentExplorerMode === ContentExplorerModes.MOVE_COPY ||\n                contentExplorerMode === ContentExplorerModes.COPY) && (\n                <PrimaryButton\n                    key=\"copy-btn\"\n                    type=\"button\"\n                    className=\"content-explorer-copy-button\"\n                    onClick={handleCopyClick}\n                    isDisabled={areButtonsDisabled || isMoveButtonLoading || isCopyButtonLoading}\n                    isLoading={isCopyButtonLoading}\n                >\n                    <FormattedMessage {...messages.copy} />\n                </PrimaryButton>\n            )}\n        </div>\n    );\n};\n\nContentExplorerActionButtons.propTypes = {\n    actionButtonsProps: PropTypes.object,\n    areButtonsDisabled: PropTypes.bool,\n    cancelButtonProps: PropTypes.object,\n    canIncludeSubfolders: PropTypes.bool,\n    chooseButtonProps: PropTypes.object,\n    chooseButtonText: PropTypes.node,\n    contentExplorerMode: ContentExplorerModePropType.isRequired,\n    currentFolder: FolderPropType,\n    isChooseButtonLoading: PropTypes.bool,\n    isCopyButtonLoading: PropTypes.bool,\n    isMoveButtonLoading: PropTypes.bool,\n    isResponsive: PropTypes.bool,\n    isSelectAllAllowed: PropTypes.bool,\n    onCancelClick: PropTypes.func,\n    onChooseClick: PropTypes.func,\n    onCopyClick: PropTypes.func,\n    onFoldersPathUpdated: PropTypes.func,\n    onMoveClick: PropTypes.func,\n    onSelectedClick: PropTypes.func,\n    onViewSelectedClick: PropTypes.func,\n    selectedItems: ItemsMapPropType.isRequired,\n    isNoSelectionAllowed: PropTypes.bool,\n};\n\nexport default ContentExplorerActionButtons;\n"],"file":"ContentExplorerActionButtons.js"}