{"version":3,"sources":["../../../src/features/security-cloud-game/SecurityCloudGame.js"],"names":["PropTypes","React","useEffect","useLayoutEffect","useRef","useState","FormattedMessage","injectIntl","Tooltip","DragCloud","DropCloud","messages","checkOverlap","getGridPosition","getRandomCloudPosition","CLOUD_SIZE_RATIO","GRID_TRACK_SIZE_RATIO","SecurityCloudGame","height","formatMessage","intl","onValidDrop","width","dropCloudPosition","setDropCloudPosition","dragCloudPosition","setDragCloudPosition","layout","setLayout","liveText","setLiveText","isOverlap","setIsOverlap","isValidDrop","setIsValidDrop","messageElementRef","gameBoardSizeRef","cloudSize","gameBoardHeight","gridTrackSize","messageElement","current","newGameBoardHeight","getBoundingClientRect","minGameBoardLength","Math","min","prevHeight","prevWidth","heightRatio","widthRatio","newDropCloudPosition","prevPos","x","y","nextPos","updateLiveText","text","includeTargetPosition","targetPositionText","targetPosition","onDrop","success","updatePosition","newPosition","shouldUpdateLiveText","hasOverlap","newliveText","targetInRange","currentPosition","getAccessibilityInstructions","accessibilityInstructions","renderDropCloud","renderDragCloud","gameBoardSize","renderMessage","instructions","displayName","propTypes","number","isRequired","any","func","SecurityCloudGameBase"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport Tooltip from '../../components/tooltip';\n\nimport DragCloud from './DragCloud';\nimport DropCloud from './DropCloud';\nimport messages from './messages';\nimport { checkOverlap, getGridPosition, getRandomCloudPosition } from './utils';\n\nimport './SecurityCloudGame.scss';\n\n// pick these numbers to balance accessibility and game complexity\nconst CLOUD_SIZE_RATIO = 4;\nconst GRID_TRACK_SIZE_RATIO = 16;\n\nconst SecurityCloudGame = ({ height, intl: { formatMessage }, onValidDrop, width }) => {\n    const [dropCloudPosition, setDropCloudPosition] = useState(null);\n    const [dragCloudPosition, setDragCloudPosition] = useState(null);\n    const [layout, setLayout] = useState({});\n    // game interaction states\n    const [liveText, setLiveText] = useState('');\n    const [isOverlap, setIsOverlap] = useState(false);\n    const [isValidDrop, setIsValidDrop] = useState(false);\n\n    const messageElementRef = useRef();\n    // to handle resize events\n    const gameBoardSizeRef = useRef({});\n\n    const { cloudSize, gameBoardHeight, gridTrackSize } = layout;\n\n    useLayoutEffect(() => {\n        const { current: messageElement } = messageElementRef;\n        const newGameBoardHeight = height - messageElement.getBoundingClientRect().height;\n        // guardrail to prevent further rendering if the game board height is not positive\n        if (newGameBoardHeight <= 0) return;\n\n        const minGameBoardLength = Math.min(newGameBoardHeight, width);\n        setLayout({\n            gameBoardHeight: newGameBoardHeight,\n            cloudSize: minGameBoardLength / CLOUD_SIZE_RATIO,\n            gridTrackSize: minGameBoardLength / GRID_TRACK_SIZE_RATIO,\n        });\n    }, [height, width]);\n\n    useEffect(() => {\n        if (!gameBoardHeight) {\n            return;\n        }\n\n        const { height: prevHeight, width: prevWidth } = gameBoardSizeRef.current;\n        const heightRatio = prevHeight ? gameBoardHeight / prevHeight : 1;\n        const widthRatio = prevWidth ? width / prevWidth : 1;\n\n        // declare and update this variable first in order to generate the starting position for drag cloud\n        let newDropCloudPosition;\n        // use prevState => {} to avoid referencing and updating the state at the same time\n        setDropCloudPosition(prevPos => {\n            newDropCloudPosition = prevPos\n                ? { x: prevPos.x * widthRatio, y: prevPos.y * heightRatio } // on board resize\n                : getRandomCloudPosition(cloudSize, gameBoardHeight, width); // initial render\n            return newDropCloudPosition;\n        });\n        setDragCloudPosition(prevPos => {\n            // on board resize\n            if (prevPos) {\n                return { x: prevPos.x * widthRatio, y: prevPos.y * heightRatio };\n            }\n            let nextPos = getRandomCloudPosition(cloudSize, gameBoardHeight, width);\n            // keep generating new random position until there is no overlap\n            while (checkOverlap(nextPos, newDropCloudPosition, cloudSize)) {\n                nextPos = getRandomCloudPosition(cloudSize, gameBoardHeight, width);\n            }\n            return nextPos;\n        });\n\n        // update previous height and width for ratio calculation\n        gameBoardSizeRef.current = { height: gameBoardHeight, width };\n    }, [cloudSize, gameBoardHeight, width]);\n\n    /**\n     * Update real-time instructional messages for screen reader users.\n     * @param {string}} text - assistive text for screen readers\n     * @param {boolean} includeTargetPosition - if target/drop cloud position should be included\n     */\n    const updateLiveText = (text, includeTargetPosition = false) => {\n        if (includeTargetPosition) {\n            const targetPositionText = formatMessage(\n                messages.targetPosition,\n                getGridPosition(dropCloudPosition, gridTrackSize),\n            );\n            text += ` ${targetPositionText}`;\n        }\n\n        setLiveText(text);\n    };\n\n    /**\n     * DragCloud drop event handler. Checks if it's valid drop and handles valid drop if it is.\n     * @returns {void}\n     */\n    const onDrop = () => {\n        if (isOverlap) {\n            setIsValidDrop(true);\n            updateLiveText(formatMessage(messages.success));\n\n            if (onValidDrop) {\n                // call onValidDrop if passed in through props\n                onValidDrop();\n            }\n        }\n    };\n\n    /**\n     * Pass along to the drag cloud to set position on moving.\n     * @param {number} newPosition - new drag cloud position\n     * @param {boolean} shouldUpdateLiveText - default to false\n     * @returns {void}\n     */\n    const updatePosition = (newPosition, shouldUpdateLiveText = false) => {\n        setDragCloudPosition(newPosition);\n        const hasOverlap = checkOverlap(newPosition, dropCloudPosition, cloudSize);\n        setIsOverlap(hasOverlap);\n\n        if (shouldUpdateLiveText) {\n            const newliveText = hasOverlap\n                ? formatMessage(messages.targetInRange)\n                : formatMessage(messages.currentPosition, getGridPosition(newPosition, gridTrackSize));\n            updateLiveText(newliveText, !hasOverlap);\n        }\n    };\n\n    /**\n     * Get aria label for the message element.\n     * @returns {string|undefined}\n     */\n    const getAccessibilityInstructions = () =>\n        gameBoardHeight &&\n        cloudSize &&\n        gridTrackSize &&\n        formatMessage(\n            messages.accessibilityInstructions,\n            getGridPosition({ x: width - cloudSize, y: gameBoardHeight - cloudSize }, gridTrackSize),\n        );\n\n    /**\n     * Renders the drop cloud.\n     * @returns {JSX}\n     */\n    const renderDropCloud = () => {\n        if (dropCloudPosition && !isValidDrop) {\n            return (\n                <DropCloud className={isOverlap ? 'is-over' : ''} cloudSize={cloudSize} position={dropCloudPosition} />\n            );\n        }\n\n        return null;\n    };\n\n    /**\n     * Renders the drag cloud.\n     * @returns {JSX}\n     */\n    const renderDragCloud = () => {\n        const { current: gameBoardSize } = gameBoardSizeRef;\n\n        if (dragCloudPosition) {\n            return (\n                <DragCloud\n                    cloudSize={cloudSize}\n                    disabled={isValidDrop}\n                    gameBoardSize={gameBoardSize}\n                    gridTrackSize={gridTrackSize}\n                    onDrop={onDrop}\n                    position={dragCloudPosition}\n                    updateLiveText={updateLiveText}\n                    updatePosition={updatePosition}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    /**\n     * Renders the message shown to the user\n     * @returns {JSX}\n     */\n    const renderMessage = () => {\n        if (isValidDrop) {\n            return <FormattedMessage {...messages.success} />;\n        }\n\n        return <FormattedMessage {...messages.instructions} />;\n    };\n\n    /**\n     * Renders the cloud game\n     * @returns {JSX}\n     */\n    return (\n        <div>\n            <div className=\"bdl-SecurityCloudGame-liveText\" aria-live=\"polite\">\n                {liveText}\n            </div>\n            <div className=\"bdl-SecurityCloudGame\" style={{ height: `${height}px`, width: `${width}px` }}>\n                <Tooltip\n                    ariaHidden\n                    className=\"bdl-SecurityCloudGame-tooltip\"\n                    constrainToWindow={false}\n                    position=\"bottom-center\"\n                    text={renderMessage()}\n                >\n                    <div\n                        ref={messageElementRef}\n                        className=\"bdl-SecurityCloudGame-message\"\n                        aria-label={getAccessibilityInstructions()}\n                    >\n                        {renderMessage()}\n                    </div>\n                </Tooltip>\n                <div className=\"bdl-SecurityCloudGame-board\">\n                    {renderDropCloud()}\n                    {renderDragCloud()}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nSecurityCloudGame.displayName = 'SecurityCloudGame';\n\nSecurityCloudGame.propTypes = {\n    /** Height to set the game to */\n    height: PropTypes.number.isRequired,\n    /* Intl object */\n    intl: PropTypes.any,\n    /** Function to call when the `DragCloud` is successfully dropped onto the `DropCloud` */\n    onValidDrop: PropTypes.func,\n    /** Width to set the game to */\n    width: PropTypes.number.isRequired,\n};\n\nexport { SecurityCloudGame as SecurityCloudGameBase };\nexport default injectIntl(SecurityCloudGame);\n"],"file":"SecurityCloudGame.js"}