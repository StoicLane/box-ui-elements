{"version":3,"sources":["../../../src/features/security-cloud-game/DragCloud.js"],"names":["PropTypes","React","useState","injectIntl","classNames","throttle","Draggable","IconCloud","messages","getGridPosition","DropShadowFilter","DragCloud","cloudSize","disabled","gameBoardSize","height","width","gridTrackSize","formatMessage","intl","onDrop","position","updateLiveText","updatePosition","isMoving","setIsMoving","dragCloudClasses","moveLeft","newX","x","Math","max","reachLeftEdge","moveRight","maxX","min","reachRightEdge","moveUp","newY","y","reachTopEdge","moveDown","maxY","reachBottomEdge","handleSpacebar","cloudStatusText","cloudDropped","cloudGrabbed","currentPositionText","currentPosition","onKeyDown","event","preventDefault","stopPropagation","key","onBlur","onDrag","e","leading","trailing","id","definition","cloudObject","displayName","propTypes","number","bool","objectOf","any","isRequired","func","DragCloudBase"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport throttle from 'lodash/throttle';\nimport Draggable from 'react-draggable';\n\nimport IconCloud from '../../icons/general/IconCloud';\nimport messages from './messages';\nimport { getGridPosition } from './utils';\n\nconst DropShadowFilter = () => (\n    <filter id=\"drop-shadow\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"2\" />\n        <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\n        <feFlood floodColor=\"black\" floodOpacity=\"0.3\" />\n        <feComposite in2=\"offsetblur\" operator=\"in\" />\n        <feMerge>\n            <feMergeNode />\n            <feMergeNode in=\"SourceGraphic\" />\n        </feMerge>\n    </filter>\n);\n\nconst DragCloud = ({\n    cloudSize,\n    disabled,\n    gameBoardSize: { height, width },\n    gridTrackSize,\n    intl: { formatMessage },\n    onDrop,\n    position,\n    updateLiveText,\n    updatePosition,\n}) => {\n    const [isMoving, setIsMoving] = useState(false);\n\n    const dragCloudClasses = classNames('bdl-DragCloud', {\n        'is-moving': isMoving,\n    });\n\n    const moveLeft = () => {\n        const newX = position.x - gridTrackSize;\n        updatePosition({ ...position, x: Math.max(newX, 0) }, true);\n        if (newX < 0) {\n            updateLiveText(formatMessage(messages.reachLeftEdge));\n        }\n    };\n\n    const moveRight = () => {\n        const maxX = width - cloudSize;\n        const newX = position.x + gridTrackSize;\n        updatePosition({ ...position, x: Math.min(newX, maxX) }, true);\n        if (newX > maxX) {\n            updateLiveText(formatMessage(messages.reachRightEdge));\n        }\n    };\n\n    const moveUp = () => {\n        const newY = position.y - gridTrackSize;\n        updatePosition({ ...position, y: Math.max(newY, 0) }, true);\n        if (newY < 0) {\n            updateLiveText(formatMessage(messages.reachTopEdge));\n        }\n    };\n\n    const moveDown = () => {\n        const maxY = height - cloudSize;\n        const newY = position.y + gridTrackSize;\n        updatePosition({ ...position, y: Math.min(newY, maxY) }, true);\n        if (newY > maxY) {\n            updateLiveText(formatMessage(messages.reachBottomEdge));\n        }\n    };\n\n    const handleSpacebar = () => {\n        const cloudStatusText = formatMessage(isMoving ? messages.cloudDropped : messages.cloudGrabbed);\n        const currentPositionText = formatMessage(messages.currentPosition, getGridPosition(position, gridTrackSize));\n        updateLiveText(`${cloudStatusText} ${currentPositionText}`, true);\n\n        if (isMoving) {\n            onDrop();\n        }\n\n        setIsMoving(!isMoving);\n    };\n\n    /**\n     * DragCloud keyboard event handler. Supports Up/Down/Left/Right arrow keys and Spacebar\n     * @param {KeyboardEvent} event - The drag event\n     * @returns {void}\n     */\n    const onKeyDown = event => {\n        if (disabled) {\n            return;\n        }\n\n        if (isMoving) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        if (event.key === ' ') {\n            handleSpacebar();\n        } else if (isMoving) {\n            switch (event.key) {\n                case 'ArrowUp':\n                    moveUp();\n                    break;\n                case 'ArrowDown':\n                    moveDown();\n                    break;\n                case 'ArrowLeft':\n                    moveLeft();\n                    break;\n                case 'ArrowRight':\n                    moveRight();\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n    /**\n     * Reset isMoving state when DragCloud loses focus\n     * @returns {void}\n     */\n    const onBlur = () => setIsMoving(false);\n\n    /**\n     * DragCloud drag event handler. Updates current position.\n     * @param {MouseEvent} e - The drag event\n     * @param {object} { x, y } - Object which contains x and y coordinate of the drag event.\n     * @returns {void}\n     */\n    const onDrag = throttle((e, { x, y }) => updatePosition({ x, y }), 100, { leading: true, trailing: true });\n\n    return (\n        <Draggable bounds=\"parent\" disabled={disabled} onDrag={onDrag} onStop={onDrop} position={position}>\n            <div className={dragCloudClasses} onBlur={onBlur} onKeyDown={onKeyDown} role=\"button\" tabIndex={0}>\n                <IconCloud\n                    filter={{ id: 'drop-shadow', definition: <DropShadowFilter /> }}\n                    height={cloudSize}\n                    title={formatMessage(messages.cloudObject)}\n                    width={cloudSize}\n                />\n            </div>\n        </Draggable>\n    );\n};\n\nDragCloud.displayName = 'DragCloud';\n\nDragCloud.propTypes = {\n    cloudSize: PropTypes.number,\n    disabled: PropTypes.bool,\n    gameBoardSize: PropTypes.objectOf(PropTypes.number),\n    gridTrackSize: PropTypes.number,\n    intl: PropTypes.any,\n    position: PropTypes.objectOf(PropTypes.number).isRequired,\n    onDrop: PropTypes.func,\n    updateLiveText: PropTypes.func,\n    updatePosition: PropTypes.func,\n};\n\n// Actual export\nexport { DragCloud as DragCloudBase };\nexport default injectIntl(DragCloud);\n"],"file":"DragCloud.js"}